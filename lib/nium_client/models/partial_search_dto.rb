=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'date'
require 'time'

module NiumClient
  class PartialSearchDTO
    # This field accepts the [2-letter ISO-2 country code](doc:currency-and-country-codes) for which routing code search is initiated.
    attr_accessor :country_code

    # This field accepts the [3-letter ISO-4217 currency code](doc:currency-and-country-codes) for which routing code search is to be initiated.
    attr_accessor :currency_code

    # This field can accept the different modes of payout. This field can accept one of the following values: 1.LOCAL 2.SWIFT Default value of the parameter is LOCAL.
    attr_accessor :payout_method

    # This field determines the routing code type for the search. The possible values are: IFSC SWIFT ACH CODE BSB CODE SORT CODE BANK CODE LOCATION ID BRANCH CODE BRANCH NAME TRANSIT NUMBER
    attr_accessor :routing_code_type

    # This field accepts the key on which the search is initiated. The possible values for search key are: bank_name branch_name
    attr_accessor :search_key

    # This field accepts the partial or full value of the search key on which the search is initiated, for example, if search_key is bank_name, search_value could be DBS.
    attr_accessor :search_value

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'country_code' => :'country_code',
        :'currency_code' => :'currency_code',
        :'payout_method' => :'payout_method',
        :'routing_code_type' => :'routing_code_type',
        :'search_key' => :'search_key',
        :'search_value' => :'search_value'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'country_code' => :'String',
        :'currency_code' => :'String',
        :'payout_method' => :'String',
        :'routing_code_type' => :'String',
        :'search_key' => :'String',
        :'search_value' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NiumClient::PartialSearchDTO` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NiumClient::PartialSearchDTO`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'country_code')
        self.country_code = attributes[:'country_code']
      end

      if attributes.key?(:'currency_code')
        self.currency_code = attributes[:'currency_code']
      end

      if attributes.key?(:'payout_method')
        self.payout_method = attributes[:'payout_method']
      end

      if attributes.key?(:'routing_code_type')
        self.routing_code_type = attributes[:'routing_code_type']
      else
        self.routing_code_type = nil
      end

      if attributes.key?(:'search_key')
        self.search_key = attributes[:'search_key']
      else
        self.search_key = nil
      end

      if attributes.key?(:'search_value')
        self.search_value = attributes[:'search_value']
      else
        self.search_value = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @routing_code_type.nil?
        invalid_properties.push('invalid value for "routing_code_type", routing_code_type cannot be nil.')
      end

      if @search_key.nil?
        invalid_properties.push('invalid value for "search_key", search_key cannot be nil.')
      end

      if @search_value.nil?
        invalid_properties.push('invalid value for "search_value", search_value cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @routing_code_type.nil?
      routing_code_type_validator = EnumAttributeValidator.new('String', ["IFSC", "SWIFT", "ACH CODE", "BSB CODE", "SORT CODE", "BANK CODE", "LOCATION ID", "BRANCH CODE", "BRANCH NAME", "TRANSIT NUMBER"])
      return false unless routing_code_type_validator.valid?(@routing_code_type)
      return false if @search_key.nil?
      search_key_validator = EnumAttributeValidator.new('String', ["bank_name", "branch_name"])
      return false unless search_key_validator.valid?(@search_key)
      return false if @search_value.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] routing_code_type Object to be assigned
    def routing_code_type=(routing_code_type)
      validator = EnumAttributeValidator.new('String', ["IFSC", "SWIFT", "ACH CODE", "BSB CODE", "SORT CODE", "BANK CODE", "LOCATION ID", "BRANCH CODE", "BRANCH NAME", "TRANSIT NUMBER"])
      unless validator.valid?(routing_code_type)
        fail ArgumentError, "invalid value for \"routing_code_type\", must be one of #{validator.allowable_values}."
      end
      @routing_code_type = routing_code_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] search_key Object to be assigned
    def search_key=(search_key)
      validator = EnumAttributeValidator.new('String', ["bank_name", "branch_name"])
      unless validator.valid?(search_key)
        fail ArgumentError, "invalid value for \"search_key\", must be one of #{validator.allowable_values}."
      end
      @search_key = search_key
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          country_code == o.country_code &&
          currency_code == o.currency_code &&
          payout_method == o.payout_method &&
          routing_code_type == o.routing_code_type &&
          search_key == o.search_key &&
          search_value == o.search_value
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [country_code, currency_code, payout_method, routing_code_type, search_key, search_value].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NiumClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
