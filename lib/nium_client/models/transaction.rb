=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'date'
require 'time'

module NiumClient
  class Transaction
    # Basic Bank Account Number (BBAN) Identifier.
    attr_accessor :bban

    attr_accessor :booking_date

    attr_accessor :card_acceptor_address

    attr_accessor :card_acceptor_id

    attr_accessor :card_transaction_id

    # This field contains the 3-letter [ISO-4217 currency code](doc:currency-and-country-codes).
    attr_accessor :currency

    # International Bank Account Number (IBAN) of an account, for example: \"FR7612345987650123456789014.
    attr_accessor :iban

    attr_accessor :masked_pan

    # Primary Account Number (PAN) of a card in a masked form. This is used for card account in responses, for example \"1234\". The maximum length: 35
    attr_accessor :masked_pan

    # An alias to access a payment account via a registered mobile phone number. The maximum length: 35
    attr_accessor :msisdn

    attr_accessor :original_amount

    # Primary Account Number (PAN) of a card, can be tokenized by the ASPSP due to PCI DSS requirements. This is used for card account in responses. The maximum length: 35
    attr_accessor :pan

    attr_accessor :transaction_amount

    attr_accessor :transaction_date

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'bban' => :'bban',
        :'booking_date' => :'bookingDate',
        :'card_acceptor_address' => :'cardAcceptorAddress',
        :'card_acceptor_id' => :'cardAcceptorId',
        :'card_transaction_id' => :'cardTransactionId',
        :'currency' => :'currency',
        :'iban' => :'iban',
        :'masked_pan' => :'maskedPAN',
        :'masked_pan' => :'maskedPan',
        :'msisdn' => :'msisdn',
        :'original_amount' => :'originalAmount',
        :'pan' => :'pan',
        :'transaction_amount' => :'transactionAmount',
        :'transaction_date' => :'transactionDate'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'bban' => :'String',
        :'booking_date' => :'Time',
        :'card_acceptor_address' => :'CardAcceptorAddress',
        :'card_acceptor_id' => :'String',
        :'card_transaction_id' => :'String',
        :'currency' => :'String',
        :'iban' => :'String',
        :'masked_pan' => :'String',
        :'masked_pan' => :'String',
        :'msisdn' => :'String',
        :'original_amount' => :'TransactionAmount',
        :'pan' => :'String',
        :'transaction_amount' => :'TransactionAmount',
        :'transaction_date' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NiumClient::Transaction` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NiumClient::Transaction`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'bban')
        self.bban = attributes[:'bban']
      end

      if attributes.key?(:'booking_date')
        self.booking_date = attributes[:'booking_date']
      end

      if attributes.key?(:'card_acceptor_address')
        self.card_acceptor_address = attributes[:'card_acceptor_address']
      end

      if attributes.key?(:'card_acceptor_id')
        self.card_acceptor_id = attributes[:'card_acceptor_id']
      end

      if attributes.key?(:'card_transaction_id')
        self.card_transaction_id = attributes[:'card_transaction_id']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'iban')
        self.iban = attributes[:'iban']
      end

      if attributes.key?(:'masked_pan')
        self.masked_pan = attributes[:'masked_pan']
      end

      if attributes.key?(:'masked_pan')
        self.masked_pan = attributes[:'masked_pan']
      end

      if attributes.key?(:'msisdn')
        self.msisdn = attributes[:'msisdn']
      end

      if attributes.key?(:'original_amount')
        self.original_amount = attributes[:'original_amount']
      end

      if attributes.key?(:'pan')
        self.pan = attributes[:'pan']
      end

      if attributes.key?(:'transaction_amount')
        self.transaction_amount = attributes[:'transaction_amount']
      end

      if attributes.key?(:'transaction_date')
        self.transaction_date = attributes[:'transaction_date']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          bban == o.bban &&
          booking_date == o.booking_date &&
          card_acceptor_address == o.card_acceptor_address &&
          card_acceptor_id == o.card_acceptor_id &&
          card_transaction_id == o.card_transaction_id &&
          currency == o.currency &&
          iban == o.iban &&
          masked_pan == o.masked_pan &&
          masked_pan == o.masked_pan &&
          msisdn == o.msisdn &&
          original_amount == o.original_amount &&
          pan == o.pan &&
          transaction_amount == o.transaction_amount &&
          transaction_date == o.transaction_date
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [bban, booking_date, card_acceptor_address, card_acceptor_id, card_transaction_id, currency, iban, masked_pan, masked_pan, msisdn, original_amount, pan, transaction_amount, transaction_date].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NiumClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
