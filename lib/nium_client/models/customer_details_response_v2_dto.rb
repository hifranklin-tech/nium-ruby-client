=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'date'
require 'time'

module NiumClient
  class CustomerDetailsResponseV2DTO
    attr_accessor :tags

    attr_accessor :account_details

    # This field contains the comment entered while blocking the customer, if applicable. Otherwise, it contains null.
    attr_accessor :block_comment

    # This field contains the reason for blocking the customer, if applicable. Otherwise, it contains null.
    attr_accessor :block_reason

    # This field contains the details of the entity updating a customer block/unblock, if applicable. Otherwise, it contains null. The possible values are CLIENT or NIUM.
    attr_accessor :block_updated_by

    # This field contains the compliance level for the customer. The possible values for customer type INDIVIDUAL are: SCREENING_KYC, SCREENING, SCREENING_KYB. The possible values for customer type CORPORATE is SCREENING_KYB.
    attr_accessor :compliance_level

    # This field contains the compliance remarks from Compliance officer, if applicable.
    attr_accessor :compliance_remarks

    attr_accessor :compliance_status

    attr_accessor :corporate_customer

    # This field contains the timestamp of customer creation in the format YYY-MM-DD hh:mm:ss, for example, 2021-07-29 06:11:43.
    attr_accessor :created_at

    attr_accessor :customer_hash_id

    attr_accessor :customer_type

    attr_accessor :individual_customer

    # This field contains the kyc mode  The possible values for customer type INDIVIDUAL are: E_KYC, MANUAL_KYC, SCREENING, EVERIFY_KYC, or NONE.  The possible values for customer type CORPORATE are: KYB or NONE.
    attr_accessor :kyc_mode

    # This field contains any system-generated compliance comments, if applicable.
    attr_accessor :remarks

    attr_accessor :segment

    # This field contains the overall KYC status of the customer
    attr_accessor :status

    # This flag denotes that the customer has accepted the Terms and Conditions.
    attr_accessor :terms_and_condition_acceptance_flag

    # This name that the customer has accepted the Terms and Conditions.
    attr_accessor :terms_and_condition_name

    # This version that the customer has accepted the Terms and Conditions.
    attr_accessor :terms_and_condition_version_id

    # This field contains the timestamp of last customer updation in the format YYY-MM-DD hh:mm:ss, for example, 2021-07-29 06:11:43.
    attr_accessor :updated_at

    # This flag contain the customer consent to proceed in case e-Document verification flow is initiated.
    attr_accessor :verification_consent

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'tags' => :'tags',
        :'account_details' => :'accountDetails',
        :'block_comment' => :'blockComment',
        :'block_reason' => :'blockReason',
        :'block_updated_by' => :'blockUpdatedBy',
        :'compliance_level' => :'complianceLevel',
        :'compliance_remarks' => :'complianceRemarks',
        :'compliance_status' => :'complianceStatus',
        :'corporate_customer' => :'corporateCustomer',
        :'created_at' => :'createdAt',
        :'customer_hash_id' => :'customerHashId',
        :'customer_type' => :'customerType',
        :'individual_customer' => :'individualCustomer',
        :'kyc_mode' => :'kycMode',
        :'remarks' => :'remarks',
        :'segment' => :'segment',
        :'status' => :'status',
        :'terms_and_condition_acceptance_flag' => :'termsAndConditionAcceptanceFlag',
        :'terms_and_condition_name' => :'termsAndConditionName',
        :'terms_and_condition_version_id' => :'termsAndConditionVersionId',
        :'updated_at' => :'updatedAt',
        :'verification_consent' => :'verificationConsent'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'tags' => :'Hash<String, String>',
        :'account_details' => :'Array<CustomerAccountDetail>',
        :'block_comment' => :'String',
        :'block_reason' => :'String',
        :'block_updated_by' => :'String',
        :'compliance_level' => :'String',
        :'compliance_remarks' => :'String',
        :'compliance_status' => :'String',
        :'corporate_customer' => :'CorporateCustomerResponseDTO',
        :'created_at' => :'Time',
        :'customer_hash_id' => :'String',
        :'customer_type' => :'String',
        :'individual_customer' => :'IndividualCustomerResponseDTO',
        :'kyc_mode' => :'String',
        :'remarks' => :'String',
        :'segment' => :'String',
        :'status' => :'String',
        :'terms_and_condition_acceptance_flag' => :'Boolean',
        :'terms_and_condition_name' => :'String',
        :'terms_and_condition_version_id' => :'String',
        :'updated_at' => :'Time',
        :'verification_consent' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NiumClient::CustomerDetailsResponseV2DTO` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NiumClient::CustomerDetailsResponseV2DTO`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Hash)
          self.tags = value
        end
      end

      if attributes.key?(:'account_details')
        if (value = attributes[:'account_details']).is_a?(Array)
          self.account_details = value
        end
      end

      if attributes.key?(:'block_comment')
        self.block_comment = attributes[:'block_comment']
      end

      if attributes.key?(:'block_reason')
        self.block_reason = attributes[:'block_reason']
      end

      if attributes.key?(:'block_updated_by')
        self.block_updated_by = attributes[:'block_updated_by']
      end

      if attributes.key?(:'compliance_level')
        self.compliance_level = attributes[:'compliance_level']
      end

      if attributes.key?(:'compliance_remarks')
        self.compliance_remarks = attributes[:'compliance_remarks']
      end

      if attributes.key?(:'compliance_status')
        self.compliance_status = attributes[:'compliance_status']
      end

      if attributes.key?(:'corporate_customer')
        self.corporate_customer = attributes[:'corporate_customer']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'customer_hash_id')
        self.customer_hash_id = attributes[:'customer_hash_id']
      end

      if attributes.key?(:'customer_type')
        self.customer_type = attributes[:'customer_type']
      end

      if attributes.key?(:'individual_customer')
        self.individual_customer = attributes[:'individual_customer']
      end

      if attributes.key?(:'kyc_mode')
        self.kyc_mode = attributes[:'kyc_mode']
      end

      if attributes.key?(:'remarks')
        self.remarks = attributes[:'remarks']
      end

      if attributes.key?(:'segment')
        self.segment = attributes[:'segment']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'terms_and_condition_acceptance_flag')
        self.terms_and_condition_acceptance_flag = attributes[:'terms_and_condition_acceptance_flag']
      end

      if attributes.key?(:'terms_and_condition_name')
        self.terms_and_condition_name = attributes[:'terms_and_condition_name']
      end

      if attributes.key?(:'terms_and_condition_version_id')
        self.terms_and_condition_version_id = attributes[:'terms_and_condition_version_id']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'verification_consent')
        self.verification_consent = attributes[:'verification_consent']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      block_reason_validator = EnumAttributeValidator.new('String', ["CUSTOMER_REQUEST", "CLIENT_REQUEST", "DECEASED", "ACCOUNT_CLOSURE", "SUSPICIOUS_ACTIVITY", "FRAUDULENT_ACTIVITY", "POTENTIAL_SANCTION", "SANCTIONED_CUSTOMER"])
      return false unless block_reason_validator.valid?(@block_reason)
      block_updated_by_validator = EnumAttributeValidator.new('String', ["NIUM", "CLIENT"])
      return false unless block_updated_by_validator.valid?(@block_updated_by)
      customer_type_validator = EnumAttributeValidator.new('String', ["INDIVIDUAL", "CORPORATE"])
      return false unless customer_type_validator.valid?(@customer_type)
      status_validator = EnumAttributeValidator.new('String', ["Pending", "Clear", "Failed", "Suspended", "Blocked"])
      return false unless status_validator.valid?(@status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] block_reason Object to be assigned
    def block_reason=(block_reason)
      validator = EnumAttributeValidator.new('String', ["CUSTOMER_REQUEST", "CLIENT_REQUEST", "DECEASED", "ACCOUNT_CLOSURE", "SUSPICIOUS_ACTIVITY", "FRAUDULENT_ACTIVITY", "POTENTIAL_SANCTION", "SANCTIONED_CUSTOMER"])
      unless validator.valid?(block_reason)
        fail ArgumentError, "invalid value for \"block_reason\", must be one of #{validator.allowable_values}."
      end
      @block_reason = block_reason
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] block_updated_by Object to be assigned
    def block_updated_by=(block_updated_by)
      validator = EnumAttributeValidator.new('String', ["NIUM", "CLIENT"])
      unless validator.valid?(block_updated_by)
        fail ArgumentError, "invalid value for \"block_updated_by\", must be one of #{validator.allowable_values}."
      end
      @block_updated_by = block_updated_by
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_type Object to be assigned
    def customer_type=(customer_type)
      validator = EnumAttributeValidator.new('String', ["INDIVIDUAL", "CORPORATE"])
      unless validator.valid?(customer_type)
        fail ArgumentError, "invalid value for \"customer_type\", must be one of #{validator.allowable_values}."
      end
      @customer_type = customer_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["Pending", "Clear", "Failed", "Suspended", "Blocked"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          tags == o.tags &&
          account_details == o.account_details &&
          block_comment == o.block_comment &&
          block_reason == o.block_reason &&
          block_updated_by == o.block_updated_by &&
          compliance_level == o.compliance_level &&
          compliance_remarks == o.compliance_remarks &&
          compliance_status == o.compliance_status &&
          corporate_customer == o.corporate_customer &&
          created_at == o.created_at &&
          customer_hash_id == o.customer_hash_id &&
          customer_type == o.customer_type &&
          individual_customer == o.individual_customer &&
          kyc_mode == o.kyc_mode &&
          remarks == o.remarks &&
          segment == o.segment &&
          status == o.status &&
          terms_and_condition_acceptance_flag == o.terms_and_condition_acceptance_flag &&
          terms_and_condition_name == o.terms_and_condition_name &&
          terms_and_condition_version_id == o.terms_and_condition_version_id &&
          updated_at == o.updated_at &&
          verification_consent == o.verification_consent
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [tags, account_details, block_comment, block_reason, block_updated_by, compliance_level, compliance_remarks, compliance_status, corporate_customer, created_at, customer_hash_id, customer_type, individual_customer, kyc_mode, remarks, segment, status, terms_and_condition_acceptance_flag, terms_and_condition_name, terms_and_condition_version_id, updated_at, verification_consent].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NiumClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
