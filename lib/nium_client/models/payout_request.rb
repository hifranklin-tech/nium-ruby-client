=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'date'
require 'time'

module NiumClient
  class PayoutRequest
    # This field accepts an account number as a payout detail.
    attr_accessor :account_number

    # This field accepts the type of account. This field is conditional in case of WALLET payout.
    attr_accessor :account_type

    # This field accepts the bank code of the payout.
    attr_accessor :bank_code

    # This field contains the beneficiary bank name.
    attr_accessor :bank_name

    # This field accepts the [ISO-2 country code](doc:currency-and-country-codes) for the payout bank.
    attr_accessor :country_code

    # This field accepts the 3-letter [ISO-4217 destination currency code](doc:currency-and-country-codes) of the payout as per the destination country from supported corridors.
    attr_accessor :destination_currency

    # This field accepts the type of identification document name for a beneficiary.
    attr_accessor :identification_type

    # This field accepts an identification document number for the beneficiary.
    attr_accessor :identification_value

    # This field accepts the payout method for the remittance payout.
    attr_accessor :payout_method

    # This field indicates the proxy type sent in the payment request.  For SGD-PayNow: The proxy type can be MOBILE, UEN, NRIC, or VPA.  For INR-UPI: The proxy type should be VPA. For BRL-PIX: The proxy type can be MOBILE, ID, EMAIL, or RANDOM_KEY For AUD-PayID: The proxy type can be MOBILE, EMAIL, ABN, or ORGANISATION_ID(only domestic payouts are allowed) For MYR-DuitNow: The proxy type can be NRIC, PASSPORT, CORPORATE_REGISTRATION_NUMBER, MOBILE, or ARMY_ID. Note: This field is mandatory when the payout_method type is PROXY
    attr_accessor :proxy_type

    # This field indicates the proxy value such as VPA, UEN, or mobile number etc. Note: This field is mandatory when the payout_method type is PROXY The mobile number should include country code.
    attr_accessor :proxy_value

    # This field accepts the routing code type 1, for example, SWIFT for all countries, IFSC for India, SORT CODE for UK, ACH CODE for USA, BRANCH CODE for Brazil and Bangladesh, BSB CODE for Australia, BANK CODE for HongKong.
    attr_accessor :routing_code_type_1

    # This field accepts the routing code type 2, for example, SWIFT for all countries, IFSC for India, SORT CODE for UK, ACH CODE for USA, BRANCH CODE for Brazil and Bangladesh, BSB CODE for Australia, BANK CODE for HongKong.
    attr_accessor :routing_code_type_2

    # This field accepts the routing code value 1, for example, ADCBINBB or ADCBINBB123 for SWIFT, SBIN0000058 for IFSC, 100000 for SORT CODE, 111000025 for ACH CODE, 012515 for BSB CODE, 151 for BANK CODE.
    attr_accessor :routing_code_value_1

    # This field accepts the routing code value 2, for example, ADCBINBB or ADCBINBB123 for SWIFT, SBIN0000058 for IFSC, 100000 for SORT CODE, 111000025 for ACH CODE, 012515 for BSB CODE, 151 for BANK CODE.
    attr_accessor :routing_code_value_2

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'account_number' => :'account_number',
        :'account_type' => :'account_type',
        :'bank_code' => :'bank_code',
        :'bank_name' => :'bank_name',
        :'country_code' => :'country_code',
        :'destination_currency' => :'destination_currency',
        :'identification_type' => :'identification_type',
        :'identification_value' => :'identification_value',
        :'payout_method' => :'payout_method',
        :'proxy_type' => :'proxy_type',
        :'proxy_value' => :'proxy_value',
        :'routing_code_type_1' => :'routing_code_type_1',
        :'routing_code_type_2' => :'routing_code_type_2',
        :'routing_code_value_1' => :'routing_code_value_1',
        :'routing_code_value_2' => :'routing_code_value_2'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'account_number' => :'String',
        :'account_type' => :'String',
        :'bank_code' => :'String',
        :'bank_name' => :'String',
        :'country_code' => :'String',
        :'destination_currency' => :'String',
        :'identification_type' => :'String',
        :'identification_value' => :'String',
        :'payout_method' => :'String',
        :'proxy_type' => :'String',
        :'proxy_value' => :'String',
        :'routing_code_type_1' => :'String',
        :'routing_code_type_2' => :'String',
        :'routing_code_value_1' => :'String',
        :'routing_code_value_2' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NiumClient::PayoutRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NiumClient::PayoutRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'account_number')
        self.account_number = attributes[:'account_number']
      end

      if attributes.key?(:'account_type')
        self.account_type = attributes[:'account_type']
      end

      if attributes.key?(:'bank_code')
        self.bank_code = attributes[:'bank_code']
      end

      if attributes.key?(:'bank_name')
        self.bank_name = attributes[:'bank_name']
      end

      if attributes.key?(:'country_code')
        self.country_code = attributes[:'country_code']
      end

      if attributes.key?(:'destination_currency')
        self.destination_currency = attributes[:'destination_currency']
      else
        self.destination_currency = nil
      end

      if attributes.key?(:'identification_type')
        self.identification_type = attributes[:'identification_type']
      end

      if attributes.key?(:'identification_value')
        self.identification_value = attributes[:'identification_value']
      end

      if attributes.key?(:'payout_method')
        self.payout_method = attributes[:'payout_method']
      else
        self.payout_method = nil
      end

      if attributes.key?(:'proxy_type')
        self.proxy_type = attributes[:'proxy_type']
      end

      if attributes.key?(:'proxy_value')
        self.proxy_value = attributes[:'proxy_value']
      end

      if attributes.key?(:'routing_code_type_1')
        self.routing_code_type_1 = attributes[:'routing_code_type_1']
      end

      if attributes.key?(:'routing_code_type_2')
        self.routing_code_type_2 = attributes[:'routing_code_type_2']
      end

      if attributes.key?(:'routing_code_value_1')
        self.routing_code_value_1 = attributes[:'routing_code_value_1']
      end

      if attributes.key?(:'routing_code_value_2')
        self.routing_code_value_2 = attributes[:'routing_code_value_2']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @destination_currency.nil?
        invalid_properties.push('invalid value for "destination_currency", destination_currency cannot be nil.')
      end

      if @payout_method.nil?
        invalid_properties.push('invalid value for "payout_method", payout_method cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      account_type_validator = EnumAttributeValidator.new('String', ["Current", "Saving", "Maestra", "Checking"])
      return false unless account_type_validator.valid?(@account_type)
      return false if @destination_currency.nil?
      return false if @payout_method.nil?
      payout_method_validator = EnumAttributeValidator.new('String', ["LOCAL", "SWIFT", "WALLET", "CASH", "CARD", "PROXY", "FEDWIRE"])
      return false unless payout_method_validator.valid?(@payout_method)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_type Object to be assigned
    def account_type=(account_type)
      validator = EnumAttributeValidator.new('String', ["Current", "Saving", "Maestra", "Checking"])
      unless validator.valid?(account_type)
        fail ArgumentError, "invalid value for \"account_type\", must be one of #{validator.allowable_values}."
      end
      @account_type = account_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payout_method Object to be assigned
    def payout_method=(payout_method)
      validator = EnumAttributeValidator.new('String', ["LOCAL", "SWIFT", "WALLET", "CASH", "CARD", "PROXY", "FEDWIRE"])
      unless validator.valid?(payout_method)
        fail ArgumentError, "invalid value for \"payout_method\", must be one of #{validator.allowable_values}."
      end
      @payout_method = payout_method
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          account_number == o.account_number &&
          account_type == o.account_type &&
          bank_code == o.bank_code &&
          bank_name == o.bank_name &&
          country_code == o.country_code &&
          destination_currency == o.destination_currency &&
          identification_type == o.identification_type &&
          identification_value == o.identification_value &&
          payout_method == o.payout_method &&
          proxy_type == o.proxy_type &&
          proxy_value == o.proxy_value &&
          routing_code_type_1 == o.routing_code_type_1 &&
          routing_code_type_2 == o.routing_code_type_2 &&
          routing_code_value_1 == o.routing_code_value_1 &&
          routing_code_value_2 == o.routing_code_value_2
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [account_number, account_type, bank_code, bank_name, country_code, destination_currency, identification_type, identification_value, payout_method, proxy_type, proxy_value, routing_code_type_1, routing_code_type_2, routing_code_value_1, routing_code_value_2].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NiumClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
