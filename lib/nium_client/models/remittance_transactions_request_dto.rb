=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'date'
require 'time'

module NiumClient
  class RemittanceTransactionsRequestDTO
    attr_accessor :additional_fees

    # This field accepts the authentication code generated as part of SCA (Strong Customer Authentication).  Note: Either exemption code or authentication is expected if the program's regulatory region is UK or EU. This field does not accept a value for any other region.
    attr_accessor :authentication_code

    attr_accessor :beneficiary

    # This field is used to add any customer comments.  Maximum character limit is 512.  Note: Special characters are not allowed in this field.
    attr_accessor :customer_comments

    attr_accessor :device_details

    # This field accepts the reason code for the exemption provided as part of SCA (Strong Customer Authentication). This must be 2 character string and the valid values are as following: 01 - Trusted Beneficiary 03 - Recurring Transactions 04 - Payment to Self Note: Exemption code is expected if authenticationCode is not provided and regulatory region is UK or EU.
    attr_accessor :exemption_code

    # This field applies only to licensed financial institutions. Boolean value 'false' indicates an on-behalf payout request or 'true' indicates a payout executed by the Financial Institution itself. If the field is absent from the request, the default flag is set to 'false'. A valid remitter object is required to be passed for on-behalf payout.
    attr_accessor :own_payment

    attr_accessor :payout

    # This field accepts the purpose code for the payment. Refer to the [Glossary of Purpose Codes](doc:purpose-of-transfer-codes) to identify the correct value to be provided.  If purpose code value is not passed then the default value will be IR01802 (Advertising & Public relations-related expenses).  Purpose Code - Description IR001         - Transfer to own account IR002         - Family Maintenance IR003         - Education-related student expenses IR004         - Medical Treatment IR005         - Hotel Accommodation IR006         - Travel IR007         - Utility Bills IR008         - Repayment of Loans IR009         - Tax Payment IR010         - Purchase of Residential Property IR011         - Payment of Property Rental IR012         - Insurance Premium IR013         - Product indemnity insurance IR014         - Insurance Claims Payment IR015         - Mutual Fund Investment IR016         - Investment in Shares IR017         - Donations IR01801       - Information Service Charges IR01802       - Advertising & Public relations-related expenses IR01803       - Royalty fees, trademark fees, patent fees, and copyright fees IR01804       - Fees for brokers, front end fee, commitment fee, guarantee fee and custodian fee IR01805       - Fees for advisors, technical assistance, and academic knowledge, including remuneration for specialists IR01806       - Representative office expenses IR01807       - Construction costs/expenses IR01808       - Transportation fees for goods IR01809       - For payment of exported goods IR01810       - Delivery fees for goods IR01811       - General Goods Trades - Offline trade
    attr_accessor :purpose_code

    attr_accessor :remitter

    # This field accepts the source of funds. The possible values are: Salary Personal Savings Personal Wealth Retirement Funds Business Owner/Shareholder Loan Facility Personal Account Corporate Account
    attr_accessor :source_of_funds

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'additional_fees' => :'additionalFees',
        :'authentication_code' => :'authenticationCode',
        :'beneficiary' => :'beneficiary',
        :'customer_comments' => :'customerComments',
        :'device_details' => :'deviceDetails',
        :'exemption_code' => :'exemptionCode',
        :'own_payment' => :'ownPayment',
        :'payout' => :'payout',
        :'purpose_code' => :'purposeCode',
        :'remitter' => :'remitter',
        :'source_of_funds' => :'sourceOfFunds'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'additional_fees' => :'AdditionalFeesDTO',
        :'authentication_code' => :'String',
        :'beneficiary' => :'Beneficiary',
        :'customer_comments' => :'String',
        :'device_details' => :'DeviceDetailsDTO',
        :'exemption_code' => :'String',
        :'own_payment' => :'Boolean',
        :'payout' => :'Payout',
        :'purpose_code' => :'String',
        :'remitter' => :'RemitterRequestDTO',
        :'source_of_funds' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NiumClient::RemittanceTransactionsRequestDTO` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NiumClient::RemittanceTransactionsRequestDTO`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'additional_fees')
        self.additional_fees = attributes[:'additional_fees']
      end

      if attributes.key?(:'authentication_code')
        self.authentication_code = attributes[:'authentication_code']
      end

      if attributes.key?(:'beneficiary')
        self.beneficiary = attributes[:'beneficiary']
      else
        self.beneficiary = nil
      end

      if attributes.key?(:'customer_comments')
        self.customer_comments = attributes[:'customer_comments']
      end

      if attributes.key?(:'device_details')
        self.device_details = attributes[:'device_details']
      end

      if attributes.key?(:'exemption_code')
        self.exemption_code = attributes[:'exemption_code']
      end

      if attributes.key?(:'own_payment')
        self.own_payment = attributes[:'own_payment']
      end

      if attributes.key?(:'payout')
        self.payout = attributes[:'payout']
      else
        self.payout = nil
      end

      if attributes.key?(:'purpose_code')
        self.purpose_code = attributes[:'purpose_code']
      else
        self.purpose_code = nil
      end

      if attributes.key?(:'remitter')
        self.remitter = attributes[:'remitter']
      end

      if attributes.key?(:'source_of_funds')
        self.source_of_funds = attributes[:'source_of_funds']
      else
        self.source_of_funds = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @beneficiary.nil?
        invalid_properties.push('invalid value for "beneficiary", beneficiary cannot be nil.')
      end

      if @payout.nil?
        invalid_properties.push('invalid value for "payout", payout cannot be nil.')
      end

      if @purpose_code.nil?
        invalid_properties.push('invalid value for "purpose_code", purpose_code cannot be nil.')
      end

      if @source_of_funds.nil?
        invalid_properties.push('invalid value for "source_of_funds", source_of_funds cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @beneficiary.nil?
      exemption_code_validator = EnumAttributeValidator.new('String', ["01", "03", "04"])
      return false unless exemption_code_validator.valid?(@exemption_code)
      return false if @payout.nil?
      return false if @purpose_code.nil?
      return false if @source_of_funds.nil?
      source_of_funds_validator = EnumAttributeValidator.new('String', ["Salary", "Personal Savings", "Personal Wealth", "Retirement Funds", "Business Owner/Shareholder", "Loan Facility", "Personal Account", "Corporate Account"])
      return false unless source_of_funds_validator.valid?(@source_of_funds)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] exemption_code Object to be assigned
    def exemption_code=(exemption_code)
      validator = EnumAttributeValidator.new('String', ["01", "03", "04"])
      unless validator.valid?(exemption_code)
        fail ArgumentError, "invalid value for \"exemption_code\", must be one of #{validator.allowable_values}."
      end
      @exemption_code = exemption_code
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] source_of_funds Object to be assigned
    def source_of_funds=(source_of_funds)
      validator = EnumAttributeValidator.new('String', ["Salary", "Personal Savings", "Personal Wealth", "Retirement Funds", "Business Owner/Shareholder", "Loan Facility", "Personal Account", "Corporate Account"])
      unless validator.valid?(source_of_funds)
        fail ArgumentError, "invalid value for \"source_of_funds\", must be one of #{validator.allowable_values}."
      end
      @source_of_funds = source_of_funds
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          additional_fees == o.additional_fees &&
          authentication_code == o.authentication_code &&
          beneficiary == o.beneficiary &&
          customer_comments == o.customer_comments &&
          device_details == o.device_details &&
          exemption_code == o.exemption_code &&
          own_payment == o.own_payment &&
          payout == o.payout &&
          purpose_code == o.purpose_code &&
          remitter == o.remitter &&
          source_of_funds == o.source_of_funds
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [additional_fees, authentication_code, beneficiary, customer_comments, device_details, exemption_code, own_payment, payout, purpose_code, remitter, source_of_funds].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NiumClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
