=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'date'
require 'time'

module NiumClient
  class InwardPaymentManualRequestDTO
    # This object accepts the additional information
    attr_accessor :additional_info

    # This field contains the amount.
    attr_accessor :amount

    # This field contains the bank reference number
    attr_accessor :bank_reference_number

    # This field contains the source of payment/fund.
    attr_accessor :bank_source

    # This field contains the country.
    attr_accessor :country

    # This field contains the 3-letter currency code.
    attr_accessor :currency

    # This field contains the expiry time for ICC.
    attr_accessor :icc_expiry

    # This field contains the payment instruction type
    attr_accessor :instruction_type

    # This field contains the narrative.
    attr_accessor :narrative

    # This field contains the remitter account number.
    attr_accessor :remitter_account_number

    # This field contains the remitter bank code.
    attr_accessor :remitter_bank_code

    # This field contains the remitter bank name.
    attr_accessor :remitter_bank_name

    # This field contains the remitter name.
    attr_accessor :remitter_name

    # This field contains the remitter name local language.
    attr_accessor :remitter_name_local_language

    # This field contains the transaction reference number/ID.
    attr_accessor :transaction_id

    # This field contains the ICC transaction source.
    attr_accessor :transaction_source

    # This field contains the ICC entry type.
    attr_accessor :type

    # This field contains the virtual account number.
    attr_accessor :virtual_account_number

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'additional_info' => :'additionalInfo',
        :'amount' => :'amount',
        :'bank_reference_number' => :'bankReferenceNumber',
        :'bank_source' => :'bankSource',
        :'country' => :'country',
        :'currency' => :'currency',
        :'icc_expiry' => :'iccExpiry',
        :'instruction_type' => :'instructionType',
        :'narrative' => :'narrative',
        :'remitter_account_number' => :'remitterAccountNumber',
        :'remitter_bank_code' => :'remitterBankCode',
        :'remitter_bank_name' => :'remitterBankName',
        :'remitter_name' => :'remitterName',
        :'remitter_name_local_language' => :'remitterNameLocalLanguage',
        :'transaction_id' => :'transactionId',
        :'transaction_source' => :'transactionSource',
        :'type' => :'type',
        :'virtual_account_number' => :'virtualAccountNumber'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'additional_info' => :'Hash<String, String>',
        :'amount' => :'Float',
        :'bank_reference_number' => :'String',
        :'bank_source' => :'String',
        :'country' => :'String',
        :'currency' => :'String',
        :'icc_expiry' => :'String',
        :'instruction_type' => :'String',
        :'narrative' => :'String',
        :'remitter_account_number' => :'String',
        :'remitter_bank_code' => :'String',
        :'remitter_bank_name' => :'String',
        :'remitter_name' => :'String',
        :'remitter_name_local_language' => :'String',
        :'transaction_id' => :'String',
        :'transaction_source' => :'String',
        :'type' => :'String',
        :'virtual_account_number' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NiumClient::InwardPaymentManualRequestDTO` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NiumClient::InwardPaymentManualRequestDTO`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'additional_info')
        if (value = attributes[:'additional_info']).is_a?(Hash)
          self.additional_info = value
        end
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'bank_reference_number')
        self.bank_reference_number = attributes[:'bank_reference_number']
      end

      if attributes.key?(:'bank_source')
        self.bank_source = attributes[:'bank_source']
      end

      if attributes.key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'icc_expiry')
        self.icc_expiry = attributes[:'icc_expiry']
      end

      if attributes.key?(:'instruction_type')
        self.instruction_type = attributes[:'instruction_type']
      end

      if attributes.key?(:'narrative')
        self.narrative = attributes[:'narrative']
      end

      if attributes.key?(:'remitter_account_number')
        self.remitter_account_number = attributes[:'remitter_account_number']
      end

      if attributes.key?(:'remitter_bank_code')
        self.remitter_bank_code = attributes[:'remitter_bank_code']
      end

      if attributes.key?(:'remitter_bank_name')
        self.remitter_bank_name = attributes[:'remitter_bank_name']
      end

      if attributes.key?(:'remitter_name')
        self.remitter_name = attributes[:'remitter_name']
      end

      if attributes.key?(:'remitter_name_local_language')
        self.remitter_name_local_language = attributes[:'remitter_name_local_language']
      end

      if attributes.key?(:'transaction_id')
        self.transaction_id = attributes[:'transaction_id']
      end

      if attributes.key?(:'transaction_source')
        self.transaction_source = attributes[:'transaction_source']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'virtual_account_number')
        self.virtual_account_number = attributes[:'virtual_account_number']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      bank_source_validator = EnumAttributeValidator.new('String', ["DBS_HK", "DBS_SG", "JPM_SG", "JPM_AU", "JPM_UK", "MONOOVA_AU", "BOL_LT", "CB_GB", "CFSB_US", "BARCLAYS", "CITI_SG", "CITI_MX", "CFSB_USINTL", "GMO_JP", "NETBANK_PH", "GOCARDLESS", "DIRECTFAST_SG", "BANKINGCIRCLE_PL"])
      return false unless bank_source_validator.valid?(@bank_source)
      currency_validator = EnumAttributeValidator.new('String', ["SGD", "AUD", "EUR", "HKD", "USD", "GBP", "AED", "CAD", "CHF", "CZK", "DKK", "HUF", "ILS", "MXN", "NOK", "NZD", "PLN", "RON", "RUB", "SEK", "ZAR", "CNY", "JPY", "THB", "TRY", "PHP"])
      return false unless currency_validator.valid?(@currency)
      instruction_type_validator = EnumAttributeValidator.new('String', ["INQUIRY", "PROCESS"])
      return false unless instruction_type_validator.valid?(@instruction_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bank_source Object to be assigned
    def bank_source=(bank_source)
      validator = EnumAttributeValidator.new('String', ["DBS_HK", "DBS_SG", "JPM_SG", "JPM_AU", "JPM_UK", "MONOOVA_AU", "BOL_LT", "CB_GB", "CFSB_US", "BARCLAYS", "CITI_SG", "CITI_MX", "CFSB_USINTL", "GMO_JP", "NETBANK_PH", "GOCARDLESS", "DIRECTFAST_SG", "BANKINGCIRCLE_PL"])
      unless validator.valid?(bank_source)
        fail ArgumentError, "invalid value for \"bank_source\", must be one of #{validator.allowable_values}."
      end
      @bank_source = bank_source
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(currency)
      validator = EnumAttributeValidator.new('String', ["SGD", "AUD", "EUR", "HKD", "USD", "GBP", "AED", "CAD", "CHF", "CZK", "DKK", "HUF", "ILS", "MXN", "NOK", "NZD", "PLN", "RON", "RUB", "SEK", "ZAR", "CNY", "JPY", "THB", "TRY", "PHP"])
      unless validator.valid?(currency)
        fail ArgumentError, "invalid value for \"currency\", must be one of #{validator.allowable_values}."
      end
      @currency = currency
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] instruction_type Object to be assigned
    def instruction_type=(instruction_type)
      validator = EnumAttributeValidator.new('String', ["INQUIRY", "PROCESS"])
      unless validator.valid?(instruction_type)
        fail ArgumentError, "invalid value for \"instruction_type\", must be one of #{validator.allowable_values}."
      end
      @instruction_type = instruction_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          additional_info == o.additional_info &&
          amount == o.amount &&
          bank_reference_number == o.bank_reference_number &&
          bank_source == o.bank_source &&
          country == o.country &&
          currency == o.currency &&
          icc_expiry == o.icc_expiry &&
          instruction_type == o.instruction_type &&
          narrative == o.narrative &&
          remitter_account_number == o.remitter_account_number &&
          remitter_bank_code == o.remitter_bank_code &&
          remitter_bank_name == o.remitter_bank_name &&
          remitter_name == o.remitter_name &&
          remitter_name_local_language == o.remitter_name_local_language &&
          transaction_id == o.transaction_id &&
          transaction_source == o.transaction_source &&
          type == o.type &&
          virtual_account_number == o.virtual_account_number
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [additional_info, amount, bank_reference_number, bank_source, country, currency, icc_expiry, instruction_type, narrative, remitter_account_number, remitter_bank_code, remitter_bank_name, remitter_name, remitter_name_local_language, transaction_id, transaction_source, type, virtual_account_number].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NiumClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
