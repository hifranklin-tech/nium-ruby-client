=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'date'
require 'time'

module NiumClient
  class AccountValidationRequestDTO
    # This field accepts an account number which is to be verified.
    attr_accessor :account_number

    # This field accepts the type of account.
    attr_accessor :bank_account_type

    # This field accepts the bank code of a beneficiary, for example, bank code for Pakistan will be BHK. Note: This field is mandatory when the destination country is Pakistan (PK).
    attr_accessor :bank_code

    attr_accessor :beneficiary

    # This field accepts the 2-letter [ISO-2 country code](https://docs.nium.com/apis/docs/currency-and-country-codes) of the destination country.
    attr_accessor :destination_country

    # This field accepts the 3-letter ISO-3 currency code of the bank account.
    attr_accessor :destination_currency

    # This field can accept the different modes of payout.
    attr_accessor :payout_method

    # This field indicates the proxy type sent in the payment request.  For SGD-PayNow: The proxy type can be MOBILE, UEN , or NRIC For INR-UPI: The proxy type should be VPA  For MYR-DuitNow: The proxy type can be NRIC, PASSPORT, CORPORATE_REGISTRATION_NUMBER, MOBILE, or ARMY_ID Note : This field is mandatory when the payoutMethod type is PROXY.
    attr_accessor :proxy_type

    # This field indicates the proxy value such as VPA, UEN, or mobile number etc. Note: This field is mandatory when the payoutMethod type is PROXY The mobile number should include country code.
    attr_accessor :proxy_value

    attr_accessor :routing_info

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'account_number' => :'accountNumber',
        :'bank_account_type' => :'bankAccountType',
        :'bank_code' => :'bankCode',
        :'beneficiary' => :'beneficiary',
        :'destination_country' => :'destinationCountry',
        :'destination_currency' => :'destinationCurrency',
        :'payout_method' => :'payoutMethod',
        :'proxy_type' => :'proxyType',
        :'proxy_value' => :'proxyValue',
        :'routing_info' => :'routingInfo'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'account_number' => :'String',
        :'bank_account_type' => :'String',
        :'bank_code' => :'String',
        :'beneficiary' => :'BeneficiaryAccountDetailsDTO',
        :'destination_country' => :'String',
        :'destination_currency' => :'String',
        :'payout_method' => :'String',
        :'proxy_type' => :'String',
        :'proxy_value' => :'String',
        :'routing_info' => :'Array<BankRoutingInfo>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NiumClient::AccountValidationRequestDTO` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NiumClient::AccountValidationRequestDTO`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'account_number')
        self.account_number = attributes[:'account_number']
      end

      if attributes.key?(:'bank_account_type')
        self.bank_account_type = attributes[:'bank_account_type']
      else
        self.bank_account_type = nil
      end

      if attributes.key?(:'bank_code')
        self.bank_code = attributes[:'bank_code']
      end

      if attributes.key?(:'beneficiary')
        self.beneficiary = attributes[:'beneficiary']
      end

      if attributes.key?(:'destination_country')
        self.destination_country = attributes[:'destination_country']
      end

      if attributes.key?(:'destination_currency')
        self.destination_currency = attributes[:'destination_currency']
      else
        self.destination_currency = nil
      end

      if attributes.key?(:'payout_method')
        self.payout_method = attributes[:'payout_method']
      else
        self.payout_method = nil
      end

      if attributes.key?(:'proxy_type')
        self.proxy_type = attributes[:'proxy_type']
      end

      if attributes.key?(:'proxy_value')
        self.proxy_value = attributes[:'proxy_value']
      end

      if attributes.key?(:'routing_info')
        if (value = attributes[:'routing_info']).is_a?(Array)
          self.routing_info = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @bank_account_type.nil?
        invalid_properties.push('invalid value for "bank_account_type", bank_account_type cannot be nil.')
      end

      if @destination_currency.nil?
        invalid_properties.push('invalid value for "destination_currency", destination_currency cannot be nil.')
      end

      if @payout_method.nil?
        invalid_properties.push('invalid value for "payout_method", payout_method cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @bank_account_type.nil?
      bank_account_type_validator = EnumAttributeValidator.new('String', ["CHECKING", "SAVING", "MAESTRA", "CURRENT"])
      return false unless bank_account_type_validator.valid?(@bank_account_type)
      return false if @destination_currency.nil?
      return false if @payout_method.nil?
      payout_method_validator = EnumAttributeValidator.new('String', ["CARD", "WALLET", "CASH", "SWIFT", "LOCAL", "PROXY", "FEDWIRE"])
      return false unless payout_method_validator.valid?(@payout_method)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bank_account_type Object to be assigned
    def bank_account_type=(bank_account_type)
      validator = EnumAttributeValidator.new('String', ["CHECKING", "SAVING", "MAESTRA", "CURRENT"])
      unless validator.valid?(bank_account_type)
        fail ArgumentError, "invalid value for \"bank_account_type\", must be one of #{validator.allowable_values}."
      end
      @bank_account_type = bank_account_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payout_method Object to be assigned
    def payout_method=(payout_method)
      validator = EnumAttributeValidator.new('String', ["CARD", "WALLET", "CASH", "SWIFT", "LOCAL", "PROXY", "FEDWIRE"])
      unless validator.valid?(payout_method)
        fail ArgumentError, "invalid value for \"payout_method\", must be one of #{validator.allowable_values}."
      end
      @payout_method = payout_method
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          account_number == o.account_number &&
          bank_account_type == o.bank_account_type &&
          bank_code == o.bank_code &&
          beneficiary == o.beneficiary &&
          destination_country == o.destination_country &&
          destination_currency == o.destination_currency &&
          payout_method == o.payout_method &&
          proxy_type == o.proxy_type &&
          proxy_value == o.proxy_value &&
          routing_info == o.routing_info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [account_number, bank_account_type, bank_code, beneficiary, destination_country, destination_currency, payout_method, proxy_type, proxy_value, routing_info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NiumClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
