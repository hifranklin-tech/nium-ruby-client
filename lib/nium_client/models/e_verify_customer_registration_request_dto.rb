=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'date'
require 'time'

module NiumClient
  class EVerifyCustomerRegistrationRequestDTO
    # This field accepts the line 1 of customer’s billing address. Maximum character limit: 40
    attr_accessor :billing_address1

    # This field accepts the line 2 of customer’s billing address. Maximum character limit: 40
    attr_accessor :billing_address2

    # This field accepts the city of customer’s billing address. Maximum character limit: 20
    attr_accessor :billing_city

    # This field accepts the 2-letter [ISO Alpha-2 country code](doc:currency-and-country-codes) denoting the country of customer’s billing address.
    attr_accessor :billing_country

    # This field accepts the state of customer’s billing address. Maximum character limit: 30
    attr_accessor :billing_state

    # This field accepts the zipcode of customer’s billing address. Maximum character limit: 10
    attr_accessor :billing_zip_code

    # This field accepts the 2-letter [ISO Alpha-2 country code](doc:currency-and-country-codes) denoting the country prefix code to the customer’s mobile number.
    attr_accessor :country_code

    # This field accepts the country IP for the device by the customer for initiating the request.
    attr_accessor :country_ip

    # This field accepts the 2-letter [ISO country code](doc:currency-and-country-codes) denoting the customer’s country of birth. Note: This field is mandatory for EU and UK.
    attr_accessor :country_of_birth

    # This field accepts previously generated unique customer identifier of customer.
    attr_accessor :customer_hash_id

    # This field accepts the date of birth of the customer in YYYY-MM-DD format. Minimum customer age should be 18 years. Discuss with your NIUM account manager for any special use-cases.
    attr_accessor :date_of_birth

    # This field accepts the OS of the device used by the customer for initiating the request.
    attr_accessor :device_info

    # This field accepts the unique email address of the customer. Maximum character limit: 60
    attr_accessor :email

    # This field accepts the estimated monthly funding amount expected in the wallet. This field is required when estimatedMonthlyFundingCurrency field is provided in the request. The possible values are: • <1000 • 1000-5000 • 5001-10000 • 10001-20000 • >20000 Note: This field is mandatory for EU and UK.
    attr_accessor :estimated_monthly_funding

    # This field accepts the 3-letter [ISO-4217 currency code](doc:currency-and-country-codes) in which estimated monthly funding is expected in the wallet, for example, SGD. Note: This field is mandatory for EU and UK.
    attr_accessor :estimated_monthly_funding_currency

    # This is an array of 2-letter [ISO Alpha-2 country code](doc:currency-and-country-codes) to allow the client to capture the expected countries to send/receive international payments from. This field is required when internationalPaymentsSupported field is true, for example, [“FR”, “DE”]. Note: This field is mandatory for EU and UK.
    attr_accessor :expected_countries_to_send_receive_from

    # This field accepts the first name of the customer. Maximum character limit: 40
    attr_accessor :first_name

    # This field accepts the gender of the customer.
    attr_accessor :gender

    # **Conditional** This field accepts the customer’s intended use of account.  Note: This field is mandatory for EU and UK.
    attr_accessor :intended_use_of_account

    # This field specifies if the customer will be doing International send/receive payments. The default value will be false. Note: This field is mandatory for EU and UK.
    attr_accessor :international_payments_supported

    # This field accepts the IP address of the device used by the customer for initiating the request.
    attr_accessor :ip_address

    # This field accepts the last name of the customer. Maximum character limit: 40
    attr_accessor :last_name

    # This field accepts the middle name of the customer. Maximum character limit: 40
    attr_accessor :middle_name

    # This field accepts the mobile number of the customer without the country prefix code. Maximum character limit: 20
    attr_accessor :mobile

    # This field accepts the 2-letter [ISO Alpha-2 country code](doc:currency-and-country-codes) denoting the customer’s citizenship.
    attr_accessor :nationality

    # This field accepts the customer's name in native language. Maximum character limit: 40
    attr_accessor :native_language_name

    # This field specifies if the customer is a Politically Exposed Person (PEP) or not. Note: This field is mandatory for EU and UK.
    attr_accessor :pep

    # This field accepts the common name or preferred name of the customer. It is also acceptable to pass the first name in this field. Maximum character limit: 40
    attr_accessor :preferred_name

    # This field accepts the fee segment associated with a client. Maximum character limit: 64
    attr_accessor :segment

    # This field accepts the session ID for the session of the customer for initiating the request.
    attr_accessor :session_id

    # This is an array of tax details provided for compliance onboarding for EU customers. Note: This field is mandatory for EU and UK.
    attr_accessor :tax_details

    attr_accessor :upgrade_request

    # This field specifies if the electronic verification consent to process customer data for compliance or not.
    attr_accessor :verification_consent

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'billing_address1' => :'billingAddress1',
        :'billing_address2' => :'billingAddress2',
        :'billing_city' => :'billingCity',
        :'billing_country' => :'billingCountry',
        :'billing_state' => :'billingState',
        :'billing_zip_code' => :'billingZipCode',
        :'country_code' => :'countryCode',
        :'country_ip' => :'countryIP',
        :'country_of_birth' => :'countryOfBirth',
        :'customer_hash_id' => :'customerHashId',
        :'date_of_birth' => :'dateOfBirth',
        :'device_info' => :'deviceInfo',
        :'email' => :'email',
        :'estimated_monthly_funding' => :'estimatedMonthlyFunding',
        :'estimated_monthly_funding_currency' => :'estimatedMonthlyFundingCurrency',
        :'expected_countries_to_send_receive_from' => :'expectedCountriesToSendReceiveFrom',
        :'first_name' => :'firstName',
        :'gender' => :'gender',
        :'intended_use_of_account' => :'intendedUseOfAccount',
        :'international_payments_supported' => :'internationalPaymentsSupported',
        :'ip_address' => :'ipAddress',
        :'last_name' => :'lastName',
        :'middle_name' => :'middleName',
        :'mobile' => :'mobile',
        :'nationality' => :'nationality',
        :'native_language_name' => :'nativeLanguageName',
        :'pep' => :'pep',
        :'preferred_name' => :'preferredName',
        :'segment' => :'segment',
        :'session_id' => :'sessionId',
        :'tax_details' => :'taxDetails',
        :'upgrade_request' => :'upgradeRequest',
        :'verification_consent' => :'verificationConsent'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'billing_address1' => :'String',
        :'billing_address2' => :'String',
        :'billing_city' => :'String',
        :'billing_country' => :'String',
        :'billing_state' => :'String',
        :'billing_zip_code' => :'String',
        :'country_code' => :'String',
        :'country_ip' => :'String',
        :'country_of_birth' => :'String',
        :'customer_hash_id' => :'String',
        :'date_of_birth' => :'String',
        :'device_info' => :'String',
        :'email' => :'String',
        :'estimated_monthly_funding' => :'String',
        :'estimated_monthly_funding_currency' => :'String',
        :'expected_countries_to_send_receive_from' => :'Array<String>',
        :'first_name' => :'String',
        :'gender' => :'String',
        :'intended_use_of_account' => :'String',
        :'international_payments_supported' => :'Boolean',
        :'ip_address' => :'String',
        :'last_name' => :'String',
        :'middle_name' => :'String',
        :'mobile' => :'String',
        :'nationality' => :'String',
        :'native_language_name' => :'String',
        :'pep' => :'Boolean',
        :'preferred_name' => :'String',
        :'segment' => :'String',
        :'session_id' => :'String',
        :'tax_details' => :'Array<CustomerTaxDetailDTO>',
        :'upgrade_request' => :'Boolean',
        :'verification_consent' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NiumClient::EVerifyCustomerRegistrationRequestDTO` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NiumClient::EVerifyCustomerRegistrationRequestDTO`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'billing_address1')
        self.billing_address1 = attributes[:'billing_address1']
      else
        self.billing_address1 = nil
      end

      if attributes.key?(:'billing_address2')
        self.billing_address2 = attributes[:'billing_address2']
      end

      if attributes.key?(:'billing_city')
        self.billing_city = attributes[:'billing_city']
      else
        self.billing_city = nil
      end

      if attributes.key?(:'billing_country')
        self.billing_country = attributes[:'billing_country']
      else
        self.billing_country = nil
      end

      if attributes.key?(:'billing_state')
        self.billing_state = attributes[:'billing_state']
      end

      if attributes.key?(:'billing_zip_code')
        self.billing_zip_code = attributes[:'billing_zip_code']
      else
        self.billing_zip_code = nil
      end

      if attributes.key?(:'country_code')
        self.country_code = attributes[:'country_code']
      else
        self.country_code = nil
      end

      if attributes.key?(:'country_ip')
        self.country_ip = attributes[:'country_ip']
      end

      if attributes.key?(:'country_of_birth')
        self.country_of_birth = attributes[:'country_of_birth']
      end

      if attributes.key?(:'customer_hash_id')
        self.customer_hash_id = attributes[:'customer_hash_id']
      else
        self.customer_hash_id = nil
      end

      if attributes.key?(:'date_of_birth')
        self.date_of_birth = attributes[:'date_of_birth']
      else
        self.date_of_birth = nil
      end

      if attributes.key?(:'device_info')
        self.device_info = attributes[:'device_info']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      else
        self.email = nil
      end

      if attributes.key?(:'estimated_monthly_funding')
        self.estimated_monthly_funding = attributes[:'estimated_monthly_funding']
      end

      if attributes.key?(:'estimated_monthly_funding_currency')
        self.estimated_monthly_funding_currency = attributes[:'estimated_monthly_funding_currency']
      end

      if attributes.key?(:'expected_countries_to_send_receive_from')
        if (value = attributes[:'expected_countries_to_send_receive_from']).is_a?(Array)
          self.expected_countries_to_send_receive_from = value
        end
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      else
        self.first_name = nil
      end

      if attributes.key?(:'gender')
        self.gender = attributes[:'gender']
      end

      if attributes.key?(:'intended_use_of_account')
        self.intended_use_of_account = attributes[:'intended_use_of_account']
      end

      if attributes.key?(:'international_payments_supported')
        self.international_payments_supported = attributes[:'international_payments_supported']
      end

      if attributes.key?(:'ip_address')
        self.ip_address = attributes[:'ip_address']
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      else
        self.last_name = nil
      end

      if attributes.key?(:'middle_name')
        self.middle_name = attributes[:'middle_name']
      end

      if attributes.key?(:'mobile')
        self.mobile = attributes[:'mobile']
      else
        self.mobile = nil
      end

      if attributes.key?(:'nationality')
        self.nationality = attributes[:'nationality']
      else
        self.nationality = nil
      end

      if attributes.key?(:'native_language_name')
        self.native_language_name = attributes[:'native_language_name']
      end

      if attributes.key?(:'pep')
        self.pep = attributes[:'pep']
      end

      if attributes.key?(:'preferred_name')
        self.preferred_name = attributes[:'preferred_name']
      end

      if attributes.key?(:'segment')
        self.segment = attributes[:'segment']
      end

      if attributes.key?(:'session_id')
        self.session_id = attributes[:'session_id']
      end

      if attributes.key?(:'tax_details')
        if (value = attributes[:'tax_details']).is_a?(Array)
          self.tax_details = value
        end
      end

      if attributes.key?(:'upgrade_request')
        self.upgrade_request = attributes[:'upgrade_request']
      end

      if attributes.key?(:'verification_consent')
        self.verification_consent = attributes[:'verification_consent']
      else
        self.verification_consent = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @billing_address1.nil?
        invalid_properties.push('invalid value for "billing_address1", billing_address1 cannot be nil.')
      end

      if @billing_city.nil?
        invalid_properties.push('invalid value for "billing_city", billing_city cannot be nil.')
      end

      if @billing_country.nil?
        invalid_properties.push('invalid value for "billing_country", billing_country cannot be nil.')
      end

      if @billing_zip_code.nil?
        invalid_properties.push('invalid value for "billing_zip_code", billing_zip_code cannot be nil.')
      end

      if @country_code.nil?
        invalid_properties.push('invalid value for "country_code", country_code cannot be nil.')
      end

      if @customer_hash_id.nil?
        invalid_properties.push('invalid value for "customer_hash_id", customer_hash_id cannot be nil.')
      end

      if @date_of_birth.nil?
        invalid_properties.push('invalid value for "date_of_birth", date_of_birth cannot be nil.')
      end

      if @email.nil?
        invalid_properties.push('invalid value for "email", email cannot be nil.')
      end

      if @first_name.nil?
        invalid_properties.push('invalid value for "first_name", first_name cannot be nil.')
      end

      if @last_name.nil?
        invalid_properties.push('invalid value for "last_name", last_name cannot be nil.')
      end

      if @mobile.nil?
        invalid_properties.push('invalid value for "mobile", mobile cannot be nil.')
      end

      if @nationality.nil?
        invalid_properties.push('invalid value for "nationality", nationality cannot be nil.')
      end

      if @verification_consent.nil?
        invalid_properties.push('invalid value for "verification_consent", verification_consent cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @billing_address1.nil?
      return false if @billing_city.nil?
      return false if @billing_country.nil?
      return false if @billing_zip_code.nil?
      return false if @country_code.nil?
      return false if @customer_hash_id.nil?
      return false if @date_of_birth.nil?
      return false if @email.nil?
      return false if @first_name.nil?
      return false if @last_name.nil?
      return false if @mobile.nil?
      return false if @nationality.nil?
      return false if @verification_consent.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          billing_address1 == o.billing_address1 &&
          billing_address2 == o.billing_address2 &&
          billing_city == o.billing_city &&
          billing_country == o.billing_country &&
          billing_state == o.billing_state &&
          billing_zip_code == o.billing_zip_code &&
          country_code == o.country_code &&
          country_ip == o.country_ip &&
          country_of_birth == o.country_of_birth &&
          customer_hash_id == o.customer_hash_id &&
          date_of_birth == o.date_of_birth &&
          device_info == o.device_info &&
          email == o.email &&
          estimated_monthly_funding == o.estimated_monthly_funding &&
          estimated_monthly_funding_currency == o.estimated_monthly_funding_currency &&
          expected_countries_to_send_receive_from == o.expected_countries_to_send_receive_from &&
          first_name == o.first_name &&
          gender == o.gender &&
          intended_use_of_account == o.intended_use_of_account &&
          international_payments_supported == o.international_payments_supported &&
          ip_address == o.ip_address &&
          last_name == o.last_name &&
          middle_name == o.middle_name &&
          mobile == o.mobile &&
          nationality == o.nationality &&
          native_language_name == o.native_language_name &&
          pep == o.pep &&
          preferred_name == o.preferred_name &&
          segment == o.segment &&
          session_id == o.session_id &&
          tax_details == o.tax_details &&
          upgrade_request == o.upgrade_request &&
          verification_consent == o.verification_consent
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [billing_address1, billing_address2, billing_city, billing_country, billing_state, billing_zip_code, country_code, country_ip, country_of_birth, customer_hash_id, date_of_birth, device_info, email, estimated_monthly_funding, estimated_monthly_funding_currency, expected_countries_to_send_receive_from, first_name, gender, intended_use_of_account, international_payments_supported, ip_address, last_name, middle_name, mobile, nationality, native_language_name, pep, preferred_name, segment, session_id, tax_details, upgrade_request, verification_consent].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NiumClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
