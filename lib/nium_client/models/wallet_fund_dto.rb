=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'date'
require 'time'

module NiumClient
  class WalletFundDTO
    # This field is the amount in destination currency which is to be transferred. If the amount is provided, it will take precedence over sourceAmount field.
    attr_accessor :amount

    # The country IP for the device by the customer for initiating the request.
    attr_accessor :country_ip_address

    attr_accessor :currency_map

    # This field contains the 3-letter [ISO-4217 currency code](doc:currency-and-country-codes) for the destination amount.
    attr_accessor :destination_currency_code

    # Device key
    attr_accessor :device_key

    # The value for funding channels can be prefund, bank_transfer, cards, or direct_debit. Fund wallet using prefund mode is possible as cross-currency. Fund wallet using bank_transfer mode is only possible from SGD to SGD and not cross-currency. direct_debit is only applicable for USA
    attr_accessor :funding_channel

    # This is base64-encoded expiry date in MMYY format. This is required in case of new card addition.
    attr_accessor :funding_instrument_expiry

    # Name of the card holder as printed on the card. Maximum length of this field is 26 characters. This is required in case of new card.
    attr_accessor :funding_instrument_holder_name

    # This field is the unique 36-character funding instrument identifier. The id is a card hash when fundingChannel is cards and applicable only for existing card and not needed for a new card. The id is a bank account identifier when the funding channel is direct debit.
    attr_accessor :funding_instrument_id

    # This is 16-digit Base64-encoded card number. This is required in case of new card addition.
    attr_accessor :funding_instrument_number

    # This is base64-encoded 3-digit CVV number. This is required in case of both new and existing card.
    attr_accessor :funding_instrument_security_number

    attr_accessor :invoice_details

    # The IP address of the device used by the customer for initiating the request.
    attr_accessor :ip_address

    # This is the name of the pocket defined under base currency.
    attr_accessor :pocket_name

    # Save funding instrument for future purpose
    attr_accessor :save

    # The session Id for the session of the customer for initiating the request.
    attr_accessor :session_id

    # This field is the amount in source currency that is to be transferred. If amount field is provided, it will take precedence over sourceAmount
    attr_accessor :source_amount

    # This field contains the 3-letter [ISO-4217 currency code](doc:currency-and-country-codes) for the source amount.
    attr_accessor :source_currency_code

    # This field allows clients to pass a narrative that they want to be displayed in the payerâ€™s account statement when they are pulling funds using Direct Debit. The field value will be truncated at 10 chars for UK and US, and 140 chars for EU.
    attr_accessor :statement_narrative

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'amount' => :'amount',
        :'country_ip_address' => :'countryIpAddress',
        :'currency_map' => :'currencyMap',
        :'destination_currency_code' => :'destinationCurrencyCode',
        :'device_key' => :'deviceKey',
        :'funding_channel' => :'fundingChannel',
        :'funding_instrument_expiry' => :'fundingInstrumentExpiry',
        :'funding_instrument_holder_name' => :'fundingInstrumentHolderName',
        :'funding_instrument_id' => :'fundingInstrumentId',
        :'funding_instrument_number' => :'fundingInstrumentNumber',
        :'funding_instrument_security_number' => :'fundingInstrumentSecurityNumber',
        :'invoice_details' => :'invoiceDetails',
        :'ip_address' => :'ipAddress',
        :'pocket_name' => :'pocketName',
        :'save' => :'save',
        :'session_id' => :'sessionId',
        :'source_amount' => :'sourceAmount',
        :'source_currency_code' => :'sourceCurrencyCode',
        :'statement_narrative' => :'statementNarrative'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'amount' => :'Float',
        :'country_ip_address' => :'String',
        :'currency_map' => :'Hash<String, Float>',
        :'destination_currency_code' => :'String',
        :'device_key' => :'String',
        :'funding_channel' => :'String',
        :'funding_instrument_expiry' => :'String',
        :'funding_instrument_holder_name' => :'String',
        :'funding_instrument_id' => :'String',
        :'funding_instrument_number' => :'String',
        :'funding_instrument_security_number' => :'String',
        :'invoice_details' => :'InvoiceDetails',
        :'ip_address' => :'String',
        :'pocket_name' => :'String',
        :'save' => :'Boolean',
        :'session_id' => :'String',
        :'source_amount' => :'Float',
        :'source_currency_code' => :'String',
        :'statement_narrative' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NiumClient::WalletFundDTO` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NiumClient::WalletFundDTO`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'country_ip_address')
        self.country_ip_address = attributes[:'country_ip_address']
      end

      if attributes.key?(:'currency_map')
        if (value = attributes[:'currency_map']).is_a?(Hash)
          self.currency_map = value
        end
      end

      if attributes.key?(:'destination_currency_code')
        self.destination_currency_code = attributes[:'destination_currency_code']
      else
        self.destination_currency_code = nil
      end

      if attributes.key?(:'device_key')
        self.device_key = attributes[:'device_key']
      end

      if attributes.key?(:'funding_channel')
        self.funding_channel = attributes[:'funding_channel']
      else
        self.funding_channel = nil
      end

      if attributes.key?(:'funding_instrument_expiry')
        self.funding_instrument_expiry = attributes[:'funding_instrument_expiry']
      end

      if attributes.key?(:'funding_instrument_holder_name')
        self.funding_instrument_holder_name = attributes[:'funding_instrument_holder_name']
      end

      if attributes.key?(:'funding_instrument_id')
        self.funding_instrument_id = attributes[:'funding_instrument_id']
      end

      if attributes.key?(:'funding_instrument_number')
        self.funding_instrument_number = attributes[:'funding_instrument_number']
      end

      if attributes.key?(:'funding_instrument_security_number')
        self.funding_instrument_security_number = attributes[:'funding_instrument_security_number']
      end

      if attributes.key?(:'invoice_details')
        self.invoice_details = attributes[:'invoice_details']
      end

      if attributes.key?(:'ip_address')
        self.ip_address = attributes[:'ip_address']
      end

      if attributes.key?(:'pocket_name')
        self.pocket_name = attributes[:'pocket_name']
      end

      if attributes.key?(:'save')
        self.save = attributes[:'save']
      end

      if attributes.key?(:'session_id')
        self.session_id = attributes[:'session_id']
      end

      if attributes.key?(:'source_amount')
        self.source_amount = attributes[:'source_amount']
      end

      if attributes.key?(:'source_currency_code')
        self.source_currency_code = attributes[:'source_currency_code']
      else
        self.source_currency_code = nil
      end

      if attributes.key?(:'statement_narrative')
        self.statement_narrative = attributes[:'statement_narrative']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @destination_currency_code.nil?
        invalid_properties.push('invalid value for "destination_currency_code", destination_currency_code cannot be nil.')
      end

      if @funding_channel.nil?
        invalid_properties.push('invalid value for "funding_channel", funding_channel cannot be nil.')
      end

      if @source_currency_code.nil?
        invalid_properties.push('invalid value for "source_currency_code", source_currency_code cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @destination_currency_code.nil?
      return false if @funding_channel.nil?
      funding_channel_validator = EnumAttributeValidator.new('String', ["PREFUND", "BANK_TRANSFER", "CARD", "DIRECT_DEBIT", "FASTER_DIRECT_DEBIT"])
      return false unless funding_channel_validator.valid?(@funding_channel)
      return false if @source_currency_code.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] funding_channel Object to be assigned
    def funding_channel=(funding_channel)
      validator = EnumAttributeValidator.new('String', ["PREFUND", "BANK_TRANSFER", "CARD", "DIRECT_DEBIT", "FASTER_DIRECT_DEBIT"])
      unless validator.valid?(funding_channel)
        fail ArgumentError, "invalid value for \"funding_channel\", must be one of #{validator.allowable_values}."
      end
      @funding_channel = funding_channel
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          amount == o.amount &&
          country_ip_address == o.country_ip_address &&
          currency_map == o.currency_map &&
          destination_currency_code == o.destination_currency_code &&
          device_key == o.device_key &&
          funding_channel == o.funding_channel &&
          funding_instrument_expiry == o.funding_instrument_expiry &&
          funding_instrument_holder_name == o.funding_instrument_holder_name &&
          funding_instrument_id == o.funding_instrument_id &&
          funding_instrument_number == o.funding_instrument_number &&
          funding_instrument_security_number == o.funding_instrument_security_number &&
          invoice_details == o.invoice_details &&
          ip_address == o.ip_address &&
          pocket_name == o.pocket_name &&
          save == o.save &&
          session_id == o.session_id &&
          source_amount == o.source_amount &&
          source_currency_code == o.source_currency_code &&
          statement_narrative == o.statement_narrative
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [amount, country_ip_address, currency_map, destination_currency_code, device_key, funding_channel, funding_instrument_expiry, funding_instrument_holder_name, funding_instrument_id, funding_instrument_number, funding_instrument_security_number, invoice_details, ip_address, pocket_name, save, session_id, source_amount, source_currency_code, statement_narrative].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NiumClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
