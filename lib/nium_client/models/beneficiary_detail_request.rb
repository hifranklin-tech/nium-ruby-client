=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'date'
require 'time'

module NiumClient
  class BeneficiaryDetailRequest
    # This field accepts the bank account type of the beneficiary. The account_type can be either Individual or Company.
    attr_accessor :account_type

    # This field accepts an address of the beneficiary.
    attr_accessor :address

    # This field accepts the boolean value for the autosweepPayoutAccount.
    attr_accessor :autosweep_payout_account

    # This field accepts the contact name of the beneficiary.
    attr_accessor :beneficiary_contact_name

    # This field accepts the date of birth of the beneficiary in the format YYYY-MM-DD, for example, 2023-07-08
    attr_accessor :beneficiary_dob

    # This field accepts the entity type of the beneficiary.
    attr_accessor :beneficiary_entity_type

    # This field accepts the date of establishment of the beneficiary in the format YYYY-MM-DD, for example, 2023-07-08
    attr_accessor :beneficiary_establishment_date

    # This field accepts the city of the beneficiary. Maximum character limit: 50.
    attr_accessor :city

    # This field accepts the ISO-2 country code for the mobile number of beneficiary.
    attr_accessor :contact_country_code

    # This field accepts the mobile number of the beneficiary--digits only--without the country code.
    attr_accessor :contact_number

    # This field accepts the [ISO-2 country code](doc:currency-and-country-codes) for the mobile number of beneficiary.
    attr_accessor :country_code

    # This field accepts the boolean value for the defaultAutosweepPayoutAccount.
    attr_accessor :default_autosweep_payout_account

    # This field accepts an email of the beneficiary.
    attr_accessor :email

    # This field accepts the name of the beneficiary.The beneficiary_group_name is required.Name can contain alphabets, numbers, and special characters that is (. , () ' / -). Maximum character limit: 150.
    attr_accessor :name

    # This field accepts the postal code of the beneficiary.
    attr_accessor :postcode

    # This field accepts the relationship of the beneficiary with the remitter.
    attr_accessor :relationship

    # This field accepts the state of the beneficiary. Maximum character limit: 50.
    attr_accessor :state

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'account_type' => :'account_type',
        :'address' => :'address',
        :'autosweep_payout_account' => :'autosweep_payout_account',
        :'beneficiary_contact_name' => :'beneficiary_contact_name',
        :'beneficiary_dob' => :'beneficiary_dob',
        :'beneficiary_entity_type' => :'beneficiary_entity_type',
        :'beneficiary_establishment_date' => :'beneficiary_establishment_date',
        :'city' => :'city',
        :'contact_country_code' => :'contact_country_code',
        :'contact_number' => :'contact_number',
        :'country_code' => :'country_code',
        :'default_autosweep_payout_account' => :'default_autosweep_payout_account',
        :'email' => :'email',
        :'name' => :'name',
        :'postcode' => :'postcode',
        :'relationship' => :'relationship',
        :'state' => :'state'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'account_type' => :'String',
        :'address' => :'String',
        :'autosweep_payout_account' => :'Boolean',
        :'beneficiary_contact_name' => :'String',
        :'beneficiary_dob' => :'String',
        :'beneficiary_entity_type' => :'String',
        :'beneficiary_establishment_date' => :'String',
        :'city' => :'String',
        :'contact_country_code' => :'String',
        :'contact_number' => :'String',
        :'country_code' => :'String',
        :'default_autosweep_payout_account' => :'Boolean',
        :'email' => :'String',
        :'name' => :'String',
        :'postcode' => :'String',
        :'relationship' => :'String',
        :'state' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NiumClient::BeneficiaryDetailRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NiumClient::BeneficiaryDetailRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'account_type')
        self.account_type = attributes[:'account_type']
      else
        self.account_type = nil
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'autosweep_payout_account')
        self.autosweep_payout_account = attributes[:'autosweep_payout_account']
      end

      if attributes.key?(:'beneficiary_contact_name')
        self.beneficiary_contact_name = attributes[:'beneficiary_contact_name']
      end

      if attributes.key?(:'beneficiary_dob')
        self.beneficiary_dob = attributes[:'beneficiary_dob']
      end

      if attributes.key?(:'beneficiary_entity_type')
        self.beneficiary_entity_type = attributes[:'beneficiary_entity_type']
      end

      if attributes.key?(:'beneficiary_establishment_date')
        self.beneficiary_establishment_date = attributes[:'beneficiary_establishment_date']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'contact_country_code')
        self.contact_country_code = attributes[:'contact_country_code']
      end

      if attributes.key?(:'contact_number')
        self.contact_number = attributes[:'contact_number']
      end

      if attributes.key?(:'country_code')
        self.country_code = attributes[:'country_code']
      else
        self.country_code = nil
      end

      if attributes.key?(:'default_autosweep_payout_account')
        self.default_autosweep_payout_account = attributes[:'default_autosweep_payout_account']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'postcode')
        self.postcode = attributes[:'postcode']
      end

      if attributes.key?(:'relationship')
        self.relationship = attributes[:'relationship']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @account_type.nil?
        invalid_properties.push('invalid value for "account_type", account_type cannot be nil.')
      end

      if @country_code.nil?
        invalid_properties.push('invalid value for "country_code", country_code cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @account_type.nil?
      return false if @country_code.nil?
      return false if @name.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          account_type == o.account_type &&
          address == o.address &&
          autosweep_payout_account == o.autosweep_payout_account &&
          beneficiary_contact_name == o.beneficiary_contact_name &&
          beneficiary_dob == o.beneficiary_dob &&
          beneficiary_entity_type == o.beneficiary_entity_type &&
          beneficiary_establishment_date == o.beneficiary_establishment_date &&
          city == o.city &&
          contact_country_code == o.contact_country_code &&
          contact_number == o.contact_number &&
          country_code == o.country_code &&
          default_autosweep_payout_account == o.default_autosweep_payout_account &&
          email == o.email &&
          name == o.name &&
          postcode == o.postcode &&
          relationship == o.relationship &&
          state == o.state
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [account_type, address, autosweep_payout_account, beneficiary_contact_name, beneficiary_dob, beneficiary_entity_type, beneficiary_establishment_date, city, contact_country_code, contact_number, country_code, default_autosweep_payout_account, email, name, postcode, relationship, state].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NiumClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
