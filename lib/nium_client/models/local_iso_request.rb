=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'date'
require 'time'

module NiumClient
  class LocalIsoRequest
    # This field contains the 15 character acceptor id
    attr_accessor :acceptor_id42

    # This field contains the acceptor name and location
    attr_accessor :acceptor_name_location43

    # This field contains the 8 character acceptor terminal id
    attr_accessor :acceptor_terminal_id41

    # This field contains the 3 character ai country code
    attr_accessor :ai_country_code19

    # This field contains the ai identity code
    attr_accessor :ai_identity_code32

    # This field contains the 6 character authorization code
    attr_accessor :authorization_code38

    # This field contains the 12 character billing amount
    attr_accessor :billing_amount6

    # This field contains the billing amount fee30
    attr_accessor :billing_amount_fee30

    # This field contains the billing amount fee8
    attr_accessor :billing_amount_fee8

    # This field contains the billing conversion rate10
    attr_accessor :billing_conversion_rate10

    # This field contains the 3 character billing currency code
    attr_accessor :billing_currency_code51

    # This field contains the capture date
    attr_accessor :capture_date_yymm17

    # This field contains the card sequence number
    attr_accessor :card_sequence_number23

    # This field contains the conversion date
    attr_accessor :conversion_date_yymm16

    # This field contains the expiry date
    attr_accessor :expiry_date_yymm14

    # This field contains the 3 character fi country code
    attr_accessor :fi_country_code21

    # This field contains the fi identity code
    attr_accessor :fi_identity_code33

    # This field contains the local date13
    attr_accessor :local_date13

    # This field contains the local time12
    attr_accessor :local_time12

    # This field contains the 4 character merchant type
    attr_accessor :merchant_type18

    # This field contains the 4 character message type
    attr_accessor :message_type0

    # This field contains the mid62
    attr_accessor :mid62

    # This field contains the misc data
    attr_accessor :misc_data58

    # This field contains the network international id
    attr_accessor :network_international_id24

    # This field contains the original data element
    attr_accessor :original_data_element90

    # This field contains the 16 character pan2
    attr_accessor :pan2

    # This field contains the 2 character pos condition code
    attr_accessor :pos_condition_code25

    # This field contains the pos entry capability code
    attr_accessor :pos_entry_capability_code60

    # This field contains the 4 character pos entry mode
    attr_accessor :pos_entry_mode22

    # This field contains the pos pin capture code
    attr_accessor :pos_pin_capture_code26

    # This field contains the 6 character processing code
    attr_accessor :processing_code3

    # This field contains the replacement amount
    attr_accessor :replacement_amount95

    # This field contains the 2 character response code
    attr_accessor :response_code39

    # This field contains the rrn
    attr_accessor :rrn

    # This field contains the settlement amount
    attr_accessor :settlement_amount5

    # This field contains the settlement amount fee
    attr_accessor :settlement_amount_fee29

    # This field contains the settlement conversion rate9
    attr_accessor :settlement_conversion_rate9

    # This field contains the settlement currency code
    attr_accessor :settlement_currency_code50

    # This field contains the settlement date
    attr_accessor :settlement_date_yymm15

    # This field contains the settlement processing amount fee
    attr_accessor :settlement_processing_amount_fee31

    # This field contains the stan
    attr_accessor :stan

    # This field contains the trace identifier
    attr_accessor :trace_identifier115

    # This field contains the track 2 Data
    attr_accessor :track2_data35

    # This field contains the 12 character transaction amount
    attr_accessor :transaction_amount4

    # This field contains the transaction amount fee
    attr_accessor :transaction_amount_fee28

    # This field contains the 3 character transaction currency code
    attr_accessor :transaction_currency_code49

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'acceptor_id42' => :'acceptorId42',
        :'acceptor_name_location43' => :'acceptorNameLocation43',
        :'acceptor_terminal_id41' => :'acceptorTerminalId41',
        :'ai_country_code19' => :'aiCountryCode19',
        :'ai_identity_code32' => :'aiIdentityCode32',
        :'authorization_code38' => :'authorizationCode38',
        :'billing_amount6' => :'billingAmount6',
        :'billing_amount_fee30' => :'billingAmountFee30',
        :'billing_amount_fee8' => :'billingAmountFee8',
        :'billing_conversion_rate10' => :'billingConversionRate10',
        :'billing_currency_code51' => :'billingCurrencyCode51',
        :'capture_date_yymm17' => :'captureDateYYMM17',
        :'card_sequence_number23' => :'cardSequenceNumber23',
        :'conversion_date_yymm16' => :'conversionDateYYMM16',
        :'expiry_date_yymm14' => :'expiryDateYYMM14',
        :'fi_country_code21' => :'fiCountryCode21',
        :'fi_identity_code33' => :'fiIdentityCode33',
        :'local_date13' => :'localDate13',
        :'local_time12' => :'localTime12',
        :'merchant_type18' => :'merchantType18',
        :'message_type0' => :'messageType0',
        :'mid62' => :'mid62',
        :'misc_data58' => :'miscData58',
        :'network_international_id24' => :'networkInternationalId24',
        :'original_data_element90' => :'originalDataElement90',
        :'pan2' => :'pan2',
        :'pos_condition_code25' => :'posConditionCode25',
        :'pos_entry_capability_code60' => :'posEntryCapabilityCode60',
        :'pos_entry_mode22' => :'posEntryMode22',
        :'pos_pin_capture_code26' => :'posPinCaptureCode26',
        :'processing_code3' => :'processingCode3',
        :'replacement_amount95' => :'replacementAmount95',
        :'response_code39' => :'responseCode39',
        :'rrn' => :'rrn',
        :'settlement_amount5' => :'settlementAmount5',
        :'settlement_amount_fee29' => :'settlementAmountFee29',
        :'settlement_conversion_rate9' => :'settlementConversionRate9',
        :'settlement_currency_code50' => :'settlementCurrencyCode50',
        :'settlement_date_yymm15' => :'settlementDateYYMM15',
        :'settlement_processing_amount_fee31' => :'settlementProcessingAmountFee31',
        :'stan' => :'stan',
        :'trace_identifier115' => :'traceIdentifier115',
        :'track2_data35' => :'track2Data35',
        :'transaction_amount4' => :'transactionAmount4',
        :'transaction_amount_fee28' => :'transactionAmountFee28',
        :'transaction_currency_code49' => :'transactionCurrencyCode49'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'acceptor_id42' => :'String',
        :'acceptor_name_location43' => :'String',
        :'acceptor_terminal_id41' => :'String',
        :'ai_country_code19' => :'String',
        :'ai_identity_code32' => :'String',
        :'authorization_code38' => :'String',
        :'billing_amount6' => :'String',
        :'billing_amount_fee30' => :'String',
        :'billing_amount_fee8' => :'String',
        :'billing_conversion_rate10' => :'String',
        :'billing_currency_code51' => :'String',
        :'capture_date_yymm17' => :'String',
        :'card_sequence_number23' => :'String',
        :'conversion_date_yymm16' => :'String',
        :'expiry_date_yymm14' => :'String',
        :'fi_country_code21' => :'String',
        :'fi_identity_code33' => :'String',
        :'local_date13' => :'String',
        :'local_time12' => :'String',
        :'merchant_type18' => :'String',
        :'message_type0' => :'String',
        :'mid62' => :'String',
        :'misc_data58' => :'String',
        :'network_international_id24' => :'String',
        :'original_data_element90' => :'String',
        :'pan2' => :'String',
        :'pos_condition_code25' => :'String',
        :'pos_entry_capability_code60' => :'String',
        :'pos_entry_mode22' => :'String',
        :'pos_pin_capture_code26' => :'String',
        :'processing_code3' => :'String',
        :'replacement_amount95' => :'String',
        :'response_code39' => :'String',
        :'rrn' => :'String',
        :'settlement_amount5' => :'String',
        :'settlement_amount_fee29' => :'String',
        :'settlement_conversion_rate9' => :'String',
        :'settlement_currency_code50' => :'String',
        :'settlement_date_yymm15' => :'String',
        :'settlement_processing_amount_fee31' => :'String',
        :'stan' => :'String',
        :'trace_identifier115' => :'String',
        :'track2_data35' => :'String',
        :'transaction_amount4' => :'String',
        :'transaction_amount_fee28' => :'String',
        :'transaction_currency_code49' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NiumClient::LocalIsoRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NiumClient::LocalIsoRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'acceptor_id42')
        self.acceptor_id42 = attributes[:'acceptor_id42']
      end

      if attributes.key?(:'acceptor_name_location43')
        self.acceptor_name_location43 = attributes[:'acceptor_name_location43']
      end

      if attributes.key?(:'acceptor_terminal_id41')
        self.acceptor_terminal_id41 = attributes[:'acceptor_terminal_id41']
      end

      if attributes.key?(:'ai_country_code19')
        self.ai_country_code19 = attributes[:'ai_country_code19']
      end

      if attributes.key?(:'ai_identity_code32')
        self.ai_identity_code32 = attributes[:'ai_identity_code32']
      end

      if attributes.key?(:'authorization_code38')
        self.authorization_code38 = attributes[:'authorization_code38']
      end

      if attributes.key?(:'billing_amount6')
        self.billing_amount6 = attributes[:'billing_amount6']
      end

      if attributes.key?(:'billing_amount_fee30')
        self.billing_amount_fee30 = attributes[:'billing_amount_fee30']
      end

      if attributes.key?(:'billing_amount_fee8')
        self.billing_amount_fee8 = attributes[:'billing_amount_fee8']
      end

      if attributes.key?(:'billing_conversion_rate10')
        self.billing_conversion_rate10 = attributes[:'billing_conversion_rate10']
      end

      if attributes.key?(:'billing_currency_code51')
        self.billing_currency_code51 = attributes[:'billing_currency_code51']
      end

      if attributes.key?(:'capture_date_yymm17')
        self.capture_date_yymm17 = attributes[:'capture_date_yymm17']
      end

      if attributes.key?(:'card_sequence_number23')
        self.card_sequence_number23 = attributes[:'card_sequence_number23']
      end

      if attributes.key?(:'conversion_date_yymm16')
        self.conversion_date_yymm16 = attributes[:'conversion_date_yymm16']
      end

      if attributes.key?(:'expiry_date_yymm14')
        self.expiry_date_yymm14 = attributes[:'expiry_date_yymm14']
      end

      if attributes.key?(:'fi_country_code21')
        self.fi_country_code21 = attributes[:'fi_country_code21']
      end

      if attributes.key?(:'fi_identity_code33')
        self.fi_identity_code33 = attributes[:'fi_identity_code33']
      end

      if attributes.key?(:'local_date13')
        self.local_date13 = attributes[:'local_date13']
      end

      if attributes.key?(:'local_time12')
        self.local_time12 = attributes[:'local_time12']
      end

      if attributes.key?(:'merchant_type18')
        self.merchant_type18 = attributes[:'merchant_type18']
      end

      if attributes.key?(:'message_type0')
        self.message_type0 = attributes[:'message_type0']
      end

      if attributes.key?(:'mid62')
        self.mid62 = attributes[:'mid62']
      end

      if attributes.key?(:'misc_data58')
        self.misc_data58 = attributes[:'misc_data58']
      end

      if attributes.key?(:'network_international_id24')
        self.network_international_id24 = attributes[:'network_international_id24']
      end

      if attributes.key?(:'original_data_element90')
        self.original_data_element90 = attributes[:'original_data_element90']
      end

      if attributes.key?(:'pan2')
        self.pan2 = attributes[:'pan2']
      end

      if attributes.key?(:'pos_condition_code25')
        self.pos_condition_code25 = attributes[:'pos_condition_code25']
      end

      if attributes.key?(:'pos_entry_capability_code60')
        self.pos_entry_capability_code60 = attributes[:'pos_entry_capability_code60']
      end

      if attributes.key?(:'pos_entry_mode22')
        self.pos_entry_mode22 = attributes[:'pos_entry_mode22']
      end

      if attributes.key?(:'pos_pin_capture_code26')
        self.pos_pin_capture_code26 = attributes[:'pos_pin_capture_code26']
      end

      if attributes.key?(:'processing_code3')
        self.processing_code3 = attributes[:'processing_code3']
      end

      if attributes.key?(:'replacement_amount95')
        self.replacement_amount95 = attributes[:'replacement_amount95']
      end

      if attributes.key?(:'response_code39')
        self.response_code39 = attributes[:'response_code39']
      end

      if attributes.key?(:'rrn')
        self.rrn = attributes[:'rrn']
      end

      if attributes.key?(:'settlement_amount5')
        self.settlement_amount5 = attributes[:'settlement_amount5']
      end

      if attributes.key?(:'settlement_amount_fee29')
        self.settlement_amount_fee29 = attributes[:'settlement_amount_fee29']
      end

      if attributes.key?(:'settlement_conversion_rate9')
        self.settlement_conversion_rate9 = attributes[:'settlement_conversion_rate9']
      end

      if attributes.key?(:'settlement_currency_code50')
        self.settlement_currency_code50 = attributes[:'settlement_currency_code50']
      end

      if attributes.key?(:'settlement_date_yymm15')
        self.settlement_date_yymm15 = attributes[:'settlement_date_yymm15']
      end

      if attributes.key?(:'settlement_processing_amount_fee31')
        self.settlement_processing_amount_fee31 = attributes[:'settlement_processing_amount_fee31']
      end

      if attributes.key?(:'stan')
        self.stan = attributes[:'stan']
      end

      if attributes.key?(:'trace_identifier115')
        self.trace_identifier115 = attributes[:'trace_identifier115']
      end

      if attributes.key?(:'track2_data35')
        self.track2_data35 = attributes[:'track2_data35']
      end

      if attributes.key?(:'transaction_amount4')
        self.transaction_amount4 = attributes[:'transaction_amount4']
      end

      if attributes.key?(:'transaction_amount_fee28')
        self.transaction_amount_fee28 = attributes[:'transaction_amount_fee28']
      end

      if attributes.key?(:'transaction_currency_code49')
        self.transaction_currency_code49 = attributes[:'transaction_currency_code49']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          acceptor_id42 == o.acceptor_id42 &&
          acceptor_name_location43 == o.acceptor_name_location43 &&
          acceptor_terminal_id41 == o.acceptor_terminal_id41 &&
          ai_country_code19 == o.ai_country_code19 &&
          ai_identity_code32 == o.ai_identity_code32 &&
          authorization_code38 == o.authorization_code38 &&
          billing_amount6 == o.billing_amount6 &&
          billing_amount_fee30 == o.billing_amount_fee30 &&
          billing_amount_fee8 == o.billing_amount_fee8 &&
          billing_conversion_rate10 == o.billing_conversion_rate10 &&
          billing_currency_code51 == o.billing_currency_code51 &&
          capture_date_yymm17 == o.capture_date_yymm17 &&
          card_sequence_number23 == o.card_sequence_number23 &&
          conversion_date_yymm16 == o.conversion_date_yymm16 &&
          expiry_date_yymm14 == o.expiry_date_yymm14 &&
          fi_country_code21 == o.fi_country_code21 &&
          fi_identity_code33 == o.fi_identity_code33 &&
          local_date13 == o.local_date13 &&
          local_time12 == o.local_time12 &&
          merchant_type18 == o.merchant_type18 &&
          message_type0 == o.message_type0 &&
          mid62 == o.mid62 &&
          misc_data58 == o.misc_data58 &&
          network_international_id24 == o.network_international_id24 &&
          original_data_element90 == o.original_data_element90 &&
          pan2 == o.pan2 &&
          pos_condition_code25 == o.pos_condition_code25 &&
          pos_entry_capability_code60 == o.pos_entry_capability_code60 &&
          pos_entry_mode22 == o.pos_entry_mode22 &&
          pos_pin_capture_code26 == o.pos_pin_capture_code26 &&
          processing_code3 == o.processing_code3 &&
          replacement_amount95 == o.replacement_amount95 &&
          response_code39 == o.response_code39 &&
          rrn == o.rrn &&
          settlement_amount5 == o.settlement_amount5 &&
          settlement_amount_fee29 == o.settlement_amount_fee29 &&
          settlement_conversion_rate9 == o.settlement_conversion_rate9 &&
          settlement_currency_code50 == o.settlement_currency_code50 &&
          settlement_date_yymm15 == o.settlement_date_yymm15 &&
          settlement_processing_amount_fee31 == o.settlement_processing_amount_fee31 &&
          stan == o.stan &&
          trace_identifier115 == o.trace_identifier115 &&
          track2_data35 == o.track2_data35 &&
          transaction_amount4 == o.transaction_amount4 &&
          transaction_amount_fee28 == o.transaction_amount_fee28 &&
          transaction_currency_code49 == o.transaction_currency_code49
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [acceptor_id42, acceptor_name_location43, acceptor_terminal_id41, ai_country_code19, ai_identity_code32, authorization_code38, billing_amount6, billing_amount_fee30, billing_amount_fee8, billing_conversion_rate10, billing_currency_code51, capture_date_yymm17, card_sequence_number23, conversion_date_yymm16, expiry_date_yymm14, fi_country_code21, fi_identity_code33, local_date13, local_time12, merchant_type18, message_type0, mid62, misc_data58, network_international_id24, original_data_element90, pan2, pos_condition_code25, pos_entry_capability_code60, pos_entry_mode22, pos_pin_capture_code26, processing_code3, replacement_amount95, response_code39, rrn, settlement_amount5, settlement_amount_fee29, settlement_conversion_rate9, settlement_currency_code50, settlement_date_yymm15, settlement_processing_amount_fee31, stan, trace_identifier115, track2_data35, transaction_amount4, transaction_amount_fee28, transaction_currency_code49].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NiumClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
