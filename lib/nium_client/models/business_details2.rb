=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'date'
require 'time'

module NiumClient
  # This object accepts the business information of the corporate entity.
  class BusinessDetails2
    # This object accepts additional information about the business.
    attr_accessor :additional_info

    attr_accessor :addresses

    attr_accessor :applicant_details

    attr_accessor :association_details

    attr_accessor :business_in_other_countries

    # This field accepts the registered business name of the corporate entity.
    attr_accessor :business_name

    # This field accepts the business registration number of the corporate entity.
    attr_accessor :business_registration_number

    # This field accepts the legal entity type of the business.
    attr_accessor :business_type

    attr_accessor :description

    attr_accessor :document_details

    attr_accessor :legal_details

    attr_accessor :onboarding_details

    attr_accessor :partnership_details

    attr_accessor :purpose_code

    # This field accepts the reference Id of the business information for which the RFI is raised.
    attr_accessor :reference_id

    attr_accessor :regulatory_details

    attr_accessor :revenue_info

    # This field accepts the settlor name.
    attr_accessor :settlor_name

    # This array accepts the stakeholders for the new corporate entity to be onboarded. For every stakeholder object, you need to send either the `stakeholderDetails` or the `businessPartner` objects.
    attr_accessor :stakeholders

    attr_accessor :tax_details

    attr_accessor :ticker

    # This field accepts the Trading Name also known as Doing Business As(DBA) name.
    attr_accessor :trade_name

    # This field accepts the full business name of the trustee in case the entity type is a trust.
    attr_accessor :trustee_name

    attr_accessor :website

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'additional_info' => :'additionalInfo',
        :'addresses' => :'addresses',
        :'applicant_details' => :'applicantDetails',
        :'association_details' => :'associationDetails',
        :'business_in_other_countries' => :'businessInOtherCountries',
        :'business_name' => :'businessName',
        :'business_registration_number' => :'businessRegistrationNumber',
        :'business_type' => :'businessType',
        :'description' => :'description',
        :'document_details' => :'documentDetails',
        :'legal_details' => :'legalDetails',
        :'onboarding_details' => :'onboardingDetails',
        :'partnership_details' => :'partnershipDetails',
        :'purpose_code' => :'purposeCode',
        :'reference_id' => :'referenceId',
        :'regulatory_details' => :'regulatoryDetails',
        :'revenue_info' => :'revenueInfo',
        :'settlor_name' => :'settlorName',
        :'stakeholders' => :'stakeholders',
        :'tax_details' => :'taxDetails',
        :'ticker' => :'ticker',
        :'trade_name' => :'tradeName',
        :'trustee_name' => :'trusteeName',
        :'website' => :'website'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'additional_info' => :'Hash<String, String>',
        :'addresses' => :'Addresses',
        :'applicant_details' => :'ApplicantDetails2',
        :'association_details' => :'ProductAssociationDetails',
        :'business_in_other_countries' => :'Array<Object>',
        :'business_name' => :'String',
        :'business_registration_number' => :'String',
        :'business_type' => :'String',
        :'description' => :'String',
        :'document_details' => :'ProductDocumentDetail',
        :'legal_details' => :'LegalDetails',
        :'onboarding_details' => :'OnboardingDetails',
        :'partnership_details' => :'ProductPartnershipDetails',
        :'purpose_code' => :'String',
        :'reference_id' => :'String',
        :'regulatory_details' => :'ProductRegulatoryDetails',
        :'revenue_info' => :'RevenueInfo',
        :'settlor_name' => :'String',
        :'stakeholders' => :'Array<Stakeholders2>',
        :'tax_details' => :'Array<ProductTaxDetails>',
        :'ticker' => :'String',
        :'trade_name' => :'String',
        :'trustee_name' => :'String',
        :'website' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NiumClient::BusinessDetails2` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NiumClient::BusinessDetails2`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'additional_info')
        if (value = attributes[:'additional_info']).is_a?(Hash)
          self.additional_info = value
        end
      end

      if attributes.key?(:'addresses')
        self.addresses = attributes[:'addresses']
      end

      if attributes.key?(:'applicant_details')
        self.applicant_details = attributes[:'applicant_details']
      end

      if attributes.key?(:'association_details')
        self.association_details = attributes[:'association_details']
      end

      if attributes.key?(:'business_in_other_countries')
        if (value = attributes[:'business_in_other_countries']).is_a?(Array)
          self.business_in_other_countries = value
        end
      end

      if attributes.key?(:'business_name')
        self.business_name = attributes[:'business_name']
      end

      if attributes.key?(:'business_registration_number')
        self.business_registration_number = attributes[:'business_registration_number']
      end

      if attributes.key?(:'business_type')
        self.business_type = attributes[:'business_type']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'document_details')
        self.document_details = attributes[:'document_details']
      end

      if attributes.key?(:'legal_details')
        self.legal_details = attributes[:'legal_details']
      end

      if attributes.key?(:'onboarding_details')
        self.onboarding_details = attributes[:'onboarding_details']
      end

      if attributes.key?(:'partnership_details')
        self.partnership_details = attributes[:'partnership_details']
      end

      if attributes.key?(:'purpose_code')
        self.purpose_code = attributes[:'purpose_code']
      end

      if attributes.key?(:'reference_id')
        self.reference_id = attributes[:'reference_id']
      end

      if attributes.key?(:'regulatory_details')
        self.regulatory_details = attributes[:'regulatory_details']
      end

      if attributes.key?(:'revenue_info')
        self.revenue_info = attributes[:'revenue_info']
      end

      if attributes.key?(:'settlor_name')
        self.settlor_name = attributes[:'settlor_name']
      end

      if attributes.key?(:'stakeholders')
        if (value = attributes[:'stakeholders']).is_a?(Array)
          self.stakeholders = value
        end
      end

      if attributes.key?(:'tax_details')
        if (value = attributes[:'tax_details']).is_a?(Array)
          self.tax_details = value
        end
      end

      if attributes.key?(:'ticker')
        self.ticker = attributes[:'ticker']
      end

      if attributes.key?(:'trade_name')
        self.trade_name = attributes[:'trade_name']
      end

      if attributes.key?(:'trustee_name')
        self.trustee_name = attributes[:'trustee_name']
      end

      if attributes.key?(:'website')
        self.website = attributes[:'website']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          additional_info == o.additional_info &&
          addresses == o.addresses &&
          applicant_details == o.applicant_details &&
          association_details == o.association_details &&
          business_in_other_countries == o.business_in_other_countries &&
          business_name == o.business_name &&
          business_registration_number == o.business_registration_number &&
          business_type == o.business_type &&
          description == o.description &&
          document_details == o.document_details &&
          legal_details == o.legal_details &&
          onboarding_details == o.onboarding_details &&
          partnership_details == o.partnership_details &&
          purpose_code == o.purpose_code &&
          reference_id == o.reference_id &&
          regulatory_details == o.regulatory_details &&
          revenue_info == o.revenue_info &&
          settlor_name == o.settlor_name &&
          stakeholders == o.stakeholders &&
          tax_details == o.tax_details &&
          ticker == o.ticker &&
          trade_name == o.trade_name &&
          trustee_name == o.trustee_name &&
          website == o.website
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [additional_info, addresses, applicant_details, association_details, business_in_other_countries, business_name, business_registration_number, business_type, description, document_details, legal_details, onboarding_details, partnership_details, purpose_code, reference_id, regulatory_details, revenue_info, settlor_name, stakeholders, tax_details, ticker, trade_name, trustee_name, website].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NiumClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
