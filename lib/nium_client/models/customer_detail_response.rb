=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'date'
require 'time'

module NiumClient
  class CustomerDetailResponse
    # This object contains the user defined key-value pairs provided by the client.
    attr_accessor :tags

    # This field contains the line 1 of customer’s [INDIVIDUAL] or applicant’s [CORPORATE] billing address, which is used for KYC.
    attr_accessor :billing_address1

    # This field contains the line 2 of customer’s [INDIVIDUAL] or applicant’s [CORPORATE] billing address, if provided during customer onboarding. Otherwise, it contains null.
    attr_accessor :billing_address2

    # This field contains the city of customer’s [INDIVIDUAL] or applicant’s [CORPORATE] billing address.
    attr_accessor :billing_city

    # This field contains the 2-letter [ISO Alpha-2 country code](doc:currency-and-country-codes) of customer’s [INDIVIDUAL] or applicant’s [CORPORATE] billing address, if provided during customer onboarding. Otherwise, it contains null.
    attr_accessor :billing_country

    # This field contains the landmark for customer’s [INDIVIDUAL] or applicant’s [CORPORATE] billing address, if provided during customer onboarding. Otherwise, it contains null.
    attr_accessor :billing_landmark

    # This field contains the state of customer’s [INDIVIDUAL] or applicant’s [CORPORATE] billing address, if provided during customer onboarding. Otherwise, it contains null.
    attr_accessor :billing_state

    # This field contains the zip code of customer’s [INDIVIDUAL] or applicant’s [CORPORATE] billing address.
    attr_accessor :billing_zip_code

    # This field contains the comment entered while blocking the customer, if applicable. Otherwise, it contains null.
    attr_accessor :block_comment

    # This field contains the reason for blocking the customer, if applicable. Otherwise, it contains null.
    attr_accessor :block_reason

    # This field contains the details of the entity updating a customer block/unblock, if applicable. Otherwise, it contains null. The possible values are CLIENT or NIUM.
    attr_accessor :block_updated_by

    attr_accessor :business_details

    attr_accessor :business_partner

    # This field contains the compliance level for the customer. The possible values for customer type INDIVIDUAL are: SCREENING_KYC, SCREENING, SCREENING_KYB. The possible values for customer type CORPORATE is SCREENING_KYB.
    attr_accessor :compliance_level

    # This field contains the compliance remarks from Compliance officer, if applicable.
    attr_accessor :compliance_remarks

    # This field contains the overall compliance status of the customer.
    attr_accessor :compliance_status

    # This field contains the 2-letter [ISO-2 country code](doc:currency-and-country-codes) for identifying the country prefix to the customer’s mobile number.
    attr_accessor :country_code

    # This field contains the 2-letter [ISO Alpha-2 country code](doc:currency-and-country-codes) denoting the customer’s country of birth.
    attr_accessor :country_of_birth

    # This field contains the timestamp of customer creation in the format YYY-MM-DD hh:mm:ss, for example, 2021-07-29 06:11:43.
    attr_accessor :created_at

    # This field contains the unique customer identifier generated at the time of customer creation.
    attr_accessor :customer_hash_id

    # This field contains an internal NIUM customer identifier. This field shall be deprecated in future.
    attr_accessor :customer_id

    # This field contains the customer type which is either <B>INDIVIDUAL</B> or <B>CORPORATE</B> and this depends on customer onboarding flows.
    attr_accessor :customer_type

    # This field contains the date of birth of the customer [INDIVIDUAL] or applicant [CORPORATE] in YYYY-MM-DD format.
    attr_accessor :date_of_birth

    # This field contains the line 1 of customer [INDIVIDUAL] or applicant [CORPORATE] delivery address. It is used for card delivery.
    attr_accessor :delivery_address1

    # This field contains the line 2 of customer’s [INDIVIDUAL] or applicant’s [CORPORATE] delivery address, if provided during customer onboarding. It is used for card delivery. Otherwise, it contains null.
    attr_accessor :delivery_address2

    # This field contains the city of customer’s [INDIVIDUAL] or applicant’s [CORPORATE] delivery address.
    attr_accessor :delivery_city

    # This field contains the 2-letter [ISO Alpha-2 country code](doc:currency-and-country-codes) of customer’s [INDIVIDUAL] or applicant’s [CORPORATE] delivery address, if provided during customer onboarding. Otherwise, it contains null.
    attr_accessor :delivery_country

    # This field contains the landmark for customer’s [INDIVIDUAL] or applicant’s [CORPORATE] delivery address, if provided during customer onboarding. Otherwise, it contains null.
    attr_accessor :delivery_landmark

    # This field contains the state of customer’s [INDIVIDUAL] or applicant’s [CORPORATE] delivery address, if provided during customer onboarding. Otherwise, it contains null.
    attr_accessor :delivery_state

    # This field contains the zip code of customer’s [INDIVIDUAL] or applicant’s [CORPORATE] delivery address.
    attr_accessor :delivery_zip_code

    # This field contains the designation of an employee, if provided during customer onboarding. Otherwise, it contains null.
    attr_accessor :designation

    # This field contains the unique email address of the customer.
    attr_accessor :email

    # This field contains the employee ID of an employee, if provided during customer onboarding. Otherwise, it contains null.
    attr_accessor :employee_id

    # This field contains the estimated monthly funding amount expected in the wallet. This field is required when estimatedMonthlyFundingCurrency field is provided in the request.
    attr_accessor :estimated_monthly_funding

    # This field contains the 3-letter [ISO-4217 currency code](doc:currency-and-country-codes) in which estimated monthly funding is expected in the wallet, for example, SGD.
    attr_accessor :estimated_monthly_funding_currency

    # This is an array of 2-letter [ISO Alpha-2 country code](doc:currency-and-country-codes) to allow the client to capture the expected countries to send/receive international payments from. This field is required when internationalPaymentsSupported field is true, for example, [“FR”, “DE”].
    attr_accessor :expected_countries_to_send_receive_from

    # This field contains the first name of the customer [INDIVIDUAL] or applicant [CORPORATE].
    attr_accessor :first_name

    # This field contains the gender of the customer [INDIVIDUAL] or applicant [CORPORATE], if provided during customer onboarding. The possible values are - Male, Female, or Others. Otherwise, it contains null.
    attr_accessor :gender

    # This array contains objects consisting of type and value of each uploaded document.
    attr_accessor :identification_data

    # This array contains the list of identification used during KYC. Otherwise, it contains null.
    attr_accessor :identification_types

    # This flag contains the customer’s intended use of account.
    attr_accessor :intended_use_of_account

    # This field indicates if the customer will be doing International send/receive payments. The default value will be false.
    attr_accessor :international_payments_supported

    # This field contains the kyc mode  The possible values for customer type INDIVIDUAL are: E_KYC, MANUAL_KYC, SCREENING, EVERIFY_KYC, or NONE.  The possible values for customer type CORPORATE are: KYB or NONE.
    attr_accessor :kyc_mode

    # This field contains the last name of the customer [INDIVIDUAL] or applicant [CORPORATE].
    attr_accessor :last_name

    # This field contains the middle name of the customer [INDIVIDUAL] or applicant [CORPORATE], if provided. Otherwise, it contains null.
    attr_accessor :middle_name

    # This field contains the mobile number of the customer--digits only--without the country code.
    attr_accessor :mobile

    # This field contains the 2-letter [ISO Alpha-2 country code](doc:currency-and-country-codes) denoting the customer [INDIVIDUAL] or applicant [CORPORATE] citizenship.
    attr_accessor :nationality

    # This field contains the name of the customer in native language, if provided during customer onboarding. Otherwise, it contains null
    attr_accessor :native_language_name

    # This field contains the unique payment Ids assigned to the customer.
    attr_accessor :payment_ids

    # This flag indicates if a customer is a Politically Exposed Person (PEP) or not.
    attr_accessor :pep

    # This field contains the preferred name of the customer[INDIVIDUAL] or business name [CORPORATE].
    attr_accessor :preferred_name

    # This array contains the applicant's professional details information
    attr_accessor :professional_details

    # This field contains the  applicant's reference id
    attr_accessor :reference_id

    # This field contains the regulatory region of the customer.
    attr_accessor :regulatory_region

    # This field contains any system-generated compliance comments, if applicable.
    attr_accessor :remarks

    # This array contains the details of RFI, if raised. Otherwise, it contains null.
    attr_accessor :rfi_details

    attr_accessor :risk_assessment_info

    # This field contains the fee segment applicable to the customer. Otherwise, it contains null.
    attr_accessor :segment

    # This is an array object may contain the stakeholder details in certain client onboarding flows. It is null for individual customer onboarding flows.
    attr_accessor :stakeholder_details

    # This field contains the overall KYC status of the customer
    attr_accessor :status

    # This array contains tax details provided during compliance onboarding for EU customers. Otherwise, it contains null.
    attr_accessor :tax_details

    # This flag denotes that the customer has accepted the Terms and Conditions.
    attr_accessor :terms_and_condition_acceptance_flag

    # This name that the customer has accepted the Terms and Conditions.
    attr_accessor :terms_and_condition_name

    # This version that the customer has accepted the Terms and Conditions.
    attr_accessor :terms_and_condition_version_id

    # This field contains the timestamp of last customer updation in the format YYY-MM-DD hh:mm:ss, for example, 2021-07-29 06:11:43.
    attr_accessor :updated_at

    # This flag contain the customer consent to proceed in case e-Document verification flow is initiated.
    attr_accessor :verification_consent

    # This field contains the unique wallet identifier generated simultaneously with customer creation.
    attr_accessor :wallet_hash_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'tags' => :'tags',
        :'billing_address1' => :'billingAddress1',
        :'billing_address2' => :'billingAddress2',
        :'billing_city' => :'billingCity',
        :'billing_country' => :'billingCountry',
        :'billing_landmark' => :'billingLandmark',
        :'billing_state' => :'billingState',
        :'billing_zip_code' => :'billingZipCode',
        :'block_comment' => :'blockComment',
        :'block_reason' => :'blockReason',
        :'block_updated_by' => :'blockUpdatedBy',
        :'business_details' => :'businessDetails',
        :'business_partner' => :'businessPartner',
        :'compliance_level' => :'complianceLevel',
        :'compliance_remarks' => :'complianceRemarks',
        :'compliance_status' => :'complianceStatus',
        :'country_code' => :'countryCode',
        :'country_of_birth' => :'countryOfBirth',
        :'created_at' => :'createdAt',
        :'customer_hash_id' => :'customerHashId',
        :'customer_id' => :'customerId',
        :'customer_type' => :'customerType',
        :'date_of_birth' => :'dateOfBirth',
        :'delivery_address1' => :'deliveryAddress1',
        :'delivery_address2' => :'deliveryAddress2',
        :'delivery_city' => :'deliveryCity',
        :'delivery_country' => :'deliveryCountry',
        :'delivery_landmark' => :'deliveryLandmark',
        :'delivery_state' => :'deliveryState',
        :'delivery_zip_code' => :'deliveryZipCode',
        :'designation' => :'designation',
        :'email' => :'email',
        :'employee_id' => :'employeeId',
        :'estimated_monthly_funding' => :'estimatedMonthlyFunding',
        :'estimated_monthly_funding_currency' => :'estimatedMonthlyFundingCurrency',
        :'expected_countries_to_send_receive_from' => :'expectedCountriesToSendReceiveFrom',
        :'first_name' => :'firstName',
        :'gender' => :'gender',
        :'identification_data' => :'identificationData',
        :'identification_types' => :'identificationTypes',
        :'intended_use_of_account' => :'intendedUseOfAccount',
        :'international_payments_supported' => :'internationalPaymentsSupported',
        :'kyc_mode' => :'kycMode',
        :'last_name' => :'lastName',
        :'middle_name' => :'middleName',
        :'mobile' => :'mobile',
        :'nationality' => :'nationality',
        :'native_language_name' => :'nativeLanguageName',
        :'payment_ids' => :'paymentIds',
        :'pep' => :'pep',
        :'preferred_name' => :'preferredName',
        :'professional_details' => :'professionalDetails',
        :'reference_id' => :'referenceId',
        :'regulatory_region' => :'regulatoryRegion',
        :'remarks' => :'remarks',
        :'rfi_details' => :'rfiDetails',
        :'risk_assessment_info' => :'riskAssessmentInfo',
        :'segment' => :'segment',
        :'stakeholder_details' => :'stakeholderDetails',
        :'status' => :'status',
        :'tax_details' => :'taxDetails',
        :'terms_and_condition_acceptance_flag' => :'termsAndConditionAcceptanceFlag',
        :'terms_and_condition_name' => :'termsAndConditionName',
        :'terms_and_condition_version_id' => :'termsAndConditionVersionId',
        :'updated_at' => :'updatedAt',
        :'verification_consent' => :'verificationConsent',
        :'wallet_hash_id' => :'walletHashId'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'tags' => :'Hash<String, String>',
        :'billing_address1' => :'String',
        :'billing_address2' => :'String',
        :'billing_city' => :'String',
        :'billing_country' => :'String',
        :'billing_landmark' => :'String',
        :'billing_state' => :'String',
        :'billing_zip_code' => :'String',
        :'block_comment' => :'String',
        :'block_reason' => :'String',
        :'block_updated_by' => :'String',
        :'business_details' => :'BusinessDetailsResponseDTO',
        :'business_partner' => :'Array<BusinessPartnerDetailsResponseDTO>',
        :'compliance_level' => :'String',
        :'compliance_remarks' => :'String',
        :'compliance_status' => :'String',
        :'country_code' => :'String',
        :'country_of_birth' => :'String',
        :'created_at' => :'Time',
        :'customer_hash_id' => :'String',
        :'customer_id' => :'Integer',
        :'customer_type' => :'String',
        :'date_of_birth' => :'String',
        :'delivery_address1' => :'String',
        :'delivery_address2' => :'String',
        :'delivery_city' => :'String',
        :'delivery_country' => :'String',
        :'delivery_landmark' => :'String',
        :'delivery_state' => :'String',
        :'delivery_zip_code' => :'String',
        :'designation' => :'String',
        :'email' => :'String',
        :'employee_id' => :'String',
        :'estimated_monthly_funding' => :'String',
        :'estimated_monthly_funding_currency' => :'String',
        :'expected_countries_to_send_receive_from' => :'Array<String>',
        :'first_name' => :'String',
        :'gender' => :'String',
        :'identification_data' => :'Array<Hash>',
        :'identification_types' => :'Array<String>',
        :'intended_use_of_account' => :'String',
        :'international_payments_supported' => :'Boolean',
        :'kyc_mode' => :'String',
        :'last_name' => :'String',
        :'middle_name' => :'String',
        :'mobile' => :'String',
        :'nationality' => :'String',
        :'native_language_name' => :'String',
        :'payment_ids' => :'Array<PaymentIdDTO>',
        :'pep' => :'Boolean',
        :'preferred_name' => :'String',
        :'professional_details' => :'Array<ProfessionalDetails>',
        :'reference_id' => :'String',
        :'regulatory_region' => :'String',
        :'remarks' => :'String',
        :'rfi_details' => :'Array<CustomerRfiDetailsResponse>',
        :'risk_assessment_info' => :'RiskAssessmentInfoResponseDTO',
        :'segment' => :'String',
        :'stakeholder_details' => :'Array<StakeholderDetailsResponseDTO>',
        :'status' => :'String',
        :'tax_details' => :'Array<CustomerTaxDetailDTO>',
        :'terms_and_condition_acceptance_flag' => :'Boolean',
        :'terms_and_condition_name' => :'String',
        :'terms_and_condition_version_id' => :'String',
        :'updated_at' => :'Time',
        :'verification_consent' => :'Boolean',
        :'wallet_hash_id' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NiumClient::CustomerDetailResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NiumClient::CustomerDetailResponse`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Hash)
          self.tags = value
        end
      end

      if attributes.key?(:'billing_address1')
        self.billing_address1 = attributes[:'billing_address1']
      end

      if attributes.key?(:'billing_address2')
        self.billing_address2 = attributes[:'billing_address2']
      end

      if attributes.key?(:'billing_city')
        self.billing_city = attributes[:'billing_city']
      end

      if attributes.key?(:'billing_country')
        self.billing_country = attributes[:'billing_country']
      end

      if attributes.key?(:'billing_landmark')
        self.billing_landmark = attributes[:'billing_landmark']
      end

      if attributes.key?(:'billing_state')
        self.billing_state = attributes[:'billing_state']
      end

      if attributes.key?(:'billing_zip_code')
        self.billing_zip_code = attributes[:'billing_zip_code']
      end

      if attributes.key?(:'block_comment')
        self.block_comment = attributes[:'block_comment']
      end

      if attributes.key?(:'block_reason')
        self.block_reason = attributes[:'block_reason']
      end

      if attributes.key?(:'block_updated_by')
        self.block_updated_by = attributes[:'block_updated_by']
      end

      if attributes.key?(:'business_details')
        self.business_details = attributes[:'business_details']
      end

      if attributes.key?(:'business_partner')
        if (value = attributes[:'business_partner']).is_a?(Array)
          self.business_partner = value
        end
      end

      if attributes.key?(:'compliance_level')
        self.compliance_level = attributes[:'compliance_level']
      end

      if attributes.key?(:'compliance_remarks')
        self.compliance_remarks = attributes[:'compliance_remarks']
      end

      if attributes.key?(:'compliance_status')
        self.compliance_status = attributes[:'compliance_status']
      end

      if attributes.key?(:'country_code')
        self.country_code = attributes[:'country_code']
      end

      if attributes.key?(:'country_of_birth')
        self.country_of_birth = attributes[:'country_of_birth']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'customer_hash_id')
        self.customer_hash_id = attributes[:'customer_hash_id']
      end

      if attributes.key?(:'customer_id')
        self.customer_id = attributes[:'customer_id']
      end

      if attributes.key?(:'customer_type')
        self.customer_type = attributes[:'customer_type']
      end

      if attributes.key?(:'date_of_birth')
        self.date_of_birth = attributes[:'date_of_birth']
      end

      if attributes.key?(:'delivery_address1')
        self.delivery_address1 = attributes[:'delivery_address1']
      end

      if attributes.key?(:'delivery_address2')
        self.delivery_address2 = attributes[:'delivery_address2']
      end

      if attributes.key?(:'delivery_city')
        self.delivery_city = attributes[:'delivery_city']
      end

      if attributes.key?(:'delivery_country')
        self.delivery_country = attributes[:'delivery_country']
      end

      if attributes.key?(:'delivery_landmark')
        self.delivery_landmark = attributes[:'delivery_landmark']
      end

      if attributes.key?(:'delivery_state')
        self.delivery_state = attributes[:'delivery_state']
      end

      if attributes.key?(:'delivery_zip_code')
        self.delivery_zip_code = attributes[:'delivery_zip_code']
      end

      if attributes.key?(:'designation')
        self.designation = attributes[:'designation']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'employee_id')
        self.employee_id = attributes[:'employee_id']
      end

      if attributes.key?(:'estimated_monthly_funding')
        self.estimated_monthly_funding = attributes[:'estimated_monthly_funding']
      end

      if attributes.key?(:'estimated_monthly_funding_currency')
        self.estimated_monthly_funding_currency = attributes[:'estimated_monthly_funding_currency']
      end

      if attributes.key?(:'expected_countries_to_send_receive_from')
        if (value = attributes[:'expected_countries_to_send_receive_from']).is_a?(Array)
          self.expected_countries_to_send_receive_from = value
        end
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.key?(:'gender')
        self.gender = attributes[:'gender']
      end

      if attributes.key?(:'identification_data')
        if (value = attributes[:'identification_data']).is_a?(Array)
          self.identification_data = value
        end
      end

      if attributes.key?(:'identification_types')
        if (value = attributes[:'identification_types']).is_a?(Array)
          self.identification_types = value
        end
      end

      if attributes.key?(:'intended_use_of_account')
        self.intended_use_of_account = attributes[:'intended_use_of_account']
      end

      if attributes.key?(:'international_payments_supported')
        self.international_payments_supported = attributes[:'international_payments_supported']
      end

      if attributes.key?(:'kyc_mode')
        self.kyc_mode = attributes[:'kyc_mode']
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.key?(:'middle_name')
        self.middle_name = attributes[:'middle_name']
      end

      if attributes.key?(:'mobile')
        self.mobile = attributes[:'mobile']
      end

      if attributes.key?(:'nationality')
        self.nationality = attributes[:'nationality']
      end

      if attributes.key?(:'native_language_name')
        self.native_language_name = attributes[:'native_language_name']
      end

      if attributes.key?(:'payment_ids')
        if (value = attributes[:'payment_ids']).is_a?(Array)
          self.payment_ids = value
        end
      end

      if attributes.key?(:'pep')
        self.pep = attributes[:'pep']
      end

      if attributes.key?(:'preferred_name')
        self.preferred_name = attributes[:'preferred_name']
      end

      if attributes.key?(:'professional_details')
        if (value = attributes[:'professional_details']).is_a?(Array)
          self.professional_details = value
        end
      end

      if attributes.key?(:'reference_id')
        self.reference_id = attributes[:'reference_id']
      end

      if attributes.key?(:'regulatory_region')
        self.regulatory_region = attributes[:'regulatory_region']
      end

      if attributes.key?(:'remarks')
        self.remarks = attributes[:'remarks']
      end

      if attributes.key?(:'rfi_details')
        if (value = attributes[:'rfi_details']).is_a?(Array)
          self.rfi_details = value
        end
      end

      if attributes.key?(:'risk_assessment_info')
        self.risk_assessment_info = attributes[:'risk_assessment_info']
      end

      if attributes.key?(:'segment')
        self.segment = attributes[:'segment']
      end

      if attributes.key?(:'stakeholder_details')
        if (value = attributes[:'stakeholder_details']).is_a?(Array)
          self.stakeholder_details = value
        end
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'tax_details')
        if (value = attributes[:'tax_details']).is_a?(Array)
          self.tax_details = value
        end
      end

      if attributes.key?(:'terms_and_condition_acceptance_flag')
        self.terms_and_condition_acceptance_flag = attributes[:'terms_and_condition_acceptance_flag']
      end

      if attributes.key?(:'terms_and_condition_name')
        self.terms_and_condition_name = attributes[:'terms_and_condition_name']
      end

      if attributes.key?(:'terms_and_condition_version_id')
        self.terms_and_condition_version_id = attributes[:'terms_and_condition_version_id']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'verification_consent')
        self.verification_consent = attributes[:'verification_consent']
      end

      if attributes.key?(:'wallet_hash_id')
        self.wallet_hash_id = attributes[:'wallet_hash_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      block_reason_validator = EnumAttributeValidator.new('String', ["CUSTOMER_REQUEST", "CLIENT_REQUEST", "DECEASED", "ACCOUNT_CLOSURE", "SUSPICIOUS_ACTIVITY", "FRAUDULENT_ACTIVITY", "POTENTIAL_SANCTION", "SANCTIONED_CUSTOMER"])
      return false unless block_reason_validator.valid?(@block_reason)
      block_updated_by_validator = EnumAttributeValidator.new('String', ["NIUM", "CLIENT"])
      return false unless block_updated_by_validator.valid?(@block_updated_by)
      compliance_status_validator = EnumAttributeValidator.new('String', ["INITIATED", "IN_PROGRESS", "ACTION_REQUIRED", "RFI_REQUESTED", "COMPLETED", "REJECT", "ERROR", "EXPIRED", "CLOSED"])
      return false unless compliance_status_validator.valid?(@compliance_status)
      customer_type_validator = EnumAttributeValidator.new('String', ["INDIVIDUAL", "CORPORATE"])
      return false unless customer_type_validator.valid?(@customer_type)
      estimated_monthly_funding_validator = EnumAttributeValidator.new('String', ["<1000", "1000-5000", "5001-10000", "10001-20000", ">20000"])
      return false unless estimated_monthly_funding_validator.valid?(@estimated_monthly_funding)
      regulatory_region_validator = EnumAttributeValidator.new('String', ["SG", "EU", "AU", "HK", "UK"])
      return false unless regulatory_region_validator.valid?(@regulatory_region)
      status_validator = EnumAttributeValidator.new('String', ["Pending", "Clear", "Failed", "Suspended", "Blocked"])
      return false unless status_validator.valid?(@status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] block_reason Object to be assigned
    def block_reason=(block_reason)
      validator = EnumAttributeValidator.new('String', ["CUSTOMER_REQUEST", "CLIENT_REQUEST", "DECEASED", "ACCOUNT_CLOSURE", "SUSPICIOUS_ACTIVITY", "FRAUDULENT_ACTIVITY", "POTENTIAL_SANCTION", "SANCTIONED_CUSTOMER"])
      unless validator.valid?(block_reason)
        fail ArgumentError, "invalid value for \"block_reason\", must be one of #{validator.allowable_values}."
      end
      @block_reason = block_reason
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] block_updated_by Object to be assigned
    def block_updated_by=(block_updated_by)
      validator = EnumAttributeValidator.new('String', ["NIUM", "CLIENT"])
      unless validator.valid?(block_updated_by)
        fail ArgumentError, "invalid value for \"block_updated_by\", must be one of #{validator.allowable_values}."
      end
      @block_updated_by = block_updated_by
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] compliance_status Object to be assigned
    def compliance_status=(compliance_status)
      validator = EnumAttributeValidator.new('String', ["INITIATED", "IN_PROGRESS", "ACTION_REQUIRED", "RFI_REQUESTED", "COMPLETED", "REJECT", "ERROR", "EXPIRED", "CLOSED"])
      unless validator.valid?(compliance_status)
        fail ArgumentError, "invalid value for \"compliance_status\", must be one of #{validator.allowable_values}."
      end
      @compliance_status = compliance_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_type Object to be assigned
    def customer_type=(customer_type)
      validator = EnumAttributeValidator.new('String', ["INDIVIDUAL", "CORPORATE"])
      unless validator.valid?(customer_type)
        fail ArgumentError, "invalid value for \"customer_type\", must be one of #{validator.allowable_values}."
      end
      @customer_type = customer_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] estimated_monthly_funding Object to be assigned
    def estimated_monthly_funding=(estimated_monthly_funding)
      validator = EnumAttributeValidator.new('String', ["<1000", "1000-5000", "5001-10000", "10001-20000", ">20000"])
      unless validator.valid?(estimated_monthly_funding)
        fail ArgumentError, "invalid value for \"estimated_monthly_funding\", must be one of #{validator.allowable_values}."
      end
      @estimated_monthly_funding = estimated_monthly_funding
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] regulatory_region Object to be assigned
    def regulatory_region=(regulatory_region)
      validator = EnumAttributeValidator.new('String', ["SG", "EU", "AU", "HK", "UK"])
      unless validator.valid?(regulatory_region)
        fail ArgumentError, "invalid value for \"regulatory_region\", must be one of #{validator.allowable_values}."
      end
      @regulatory_region = regulatory_region
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["Pending", "Clear", "Failed", "Suspended", "Blocked"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          tags == o.tags &&
          billing_address1 == o.billing_address1 &&
          billing_address2 == o.billing_address2 &&
          billing_city == o.billing_city &&
          billing_country == o.billing_country &&
          billing_landmark == o.billing_landmark &&
          billing_state == o.billing_state &&
          billing_zip_code == o.billing_zip_code &&
          block_comment == o.block_comment &&
          block_reason == o.block_reason &&
          block_updated_by == o.block_updated_by &&
          business_details == o.business_details &&
          business_partner == o.business_partner &&
          compliance_level == o.compliance_level &&
          compliance_remarks == o.compliance_remarks &&
          compliance_status == o.compliance_status &&
          country_code == o.country_code &&
          country_of_birth == o.country_of_birth &&
          created_at == o.created_at &&
          customer_hash_id == o.customer_hash_id &&
          customer_id == o.customer_id &&
          customer_type == o.customer_type &&
          date_of_birth == o.date_of_birth &&
          delivery_address1 == o.delivery_address1 &&
          delivery_address2 == o.delivery_address2 &&
          delivery_city == o.delivery_city &&
          delivery_country == o.delivery_country &&
          delivery_landmark == o.delivery_landmark &&
          delivery_state == o.delivery_state &&
          delivery_zip_code == o.delivery_zip_code &&
          designation == o.designation &&
          email == o.email &&
          employee_id == o.employee_id &&
          estimated_monthly_funding == o.estimated_monthly_funding &&
          estimated_monthly_funding_currency == o.estimated_monthly_funding_currency &&
          expected_countries_to_send_receive_from == o.expected_countries_to_send_receive_from &&
          first_name == o.first_name &&
          gender == o.gender &&
          identification_data == o.identification_data &&
          identification_types == o.identification_types &&
          intended_use_of_account == o.intended_use_of_account &&
          international_payments_supported == o.international_payments_supported &&
          kyc_mode == o.kyc_mode &&
          last_name == o.last_name &&
          middle_name == o.middle_name &&
          mobile == o.mobile &&
          nationality == o.nationality &&
          native_language_name == o.native_language_name &&
          payment_ids == o.payment_ids &&
          pep == o.pep &&
          preferred_name == o.preferred_name &&
          professional_details == o.professional_details &&
          reference_id == o.reference_id &&
          regulatory_region == o.regulatory_region &&
          remarks == o.remarks &&
          rfi_details == o.rfi_details &&
          risk_assessment_info == o.risk_assessment_info &&
          segment == o.segment &&
          stakeholder_details == o.stakeholder_details &&
          status == o.status &&
          tax_details == o.tax_details &&
          terms_and_condition_acceptance_flag == o.terms_and_condition_acceptance_flag &&
          terms_and_condition_name == o.terms_and_condition_name &&
          terms_and_condition_version_id == o.terms_and_condition_version_id &&
          updated_at == o.updated_at &&
          verification_consent == o.verification_consent &&
          wallet_hash_id == o.wallet_hash_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [tags, billing_address1, billing_address2, billing_city, billing_country, billing_landmark, billing_state, billing_zip_code, block_comment, block_reason, block_updated_by, business_details, business_partner, compliance_level, compliance_remarks, compliance_status, country_code, country_of_birth, created_at, customer_hash_id, customer_id, customer_type, date_of_birth, delivery_address1, delivery_address2, delivery_city, delivery_country, delivery_landmark, delivery_state, delivery_zip_code, designation, email, employee_id, estimated_monthly_funding, estimated_monthly_funding_currency, expected_countries_to_send_receive_from, first_name, gender, identification_data, identification_types, intended_use_of_account, international_payments_supported, kyc_mode, last_name, middle_name, mobile, nationality, native_language_name, payment_ids, pep, preferred_name, professional_details, reference_id, regulatory_region, remarks, rfi_details, risk_assessment_info, segment, stakeholder_details, status, tax_details, terms_and_condition_acceptance_flag, terms_and_condition_name, terms_and_condition_version_id, updated_at, verification_consent, wallet_hash_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NiumClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
