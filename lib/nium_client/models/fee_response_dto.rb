=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'date'
require 'time'

module NiumClient
  class FeeResponseDTO
    # This field contains the 3-letter [ISO-4217 authorization currency code](doc:currency-and-country-codes).
    attr_accessor :auth_currency

    # This field contains the 3-letter [ISO-4217 fee currency code](doc:currency-and-country-codes).
    attr_accessor :fee_currency

    # This field contains the name of the fee or markup.
    attr_accessor :fee_name

    # This field contains the actual value of the fee. It can be an amount or percentage.
    attr_accessor :fee_value

    # This field determines if the fee is a fixed amount or a percentage. It is true for a fixed amount and false for a percentage.
    attr_accessor :fixed

    # This field contains the starting point of the slab of transaction amount on which the fee is applicable.
    attr_accessor :slab_from

    # This field contains the ending point of the slab of transaction amount on which the fee is applicable.
    attr_accessor :slab_to

    # This field contains the fee status and the possible values are: Active Inactive 
    attr_accessor :status

    # This field contains the value of the threshold fee. It can be fixed or percentage.
    attr_accessor :threshold_fee_value

    # This field contains the 3-letter [ISO-4217 transaction currency code](doc:currency-and-country-codes).
    attr_accessor :transaction_currency

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'auth_currency' => :'authCurrency',
        :'fee_currency' => :'feeCurrency',
        :'fee_name' => :'feeName',
        :'fee_value' => :'feeValue',
        :'fixed' => :'fixed',
        :'slab_from' => :'slabFrom',
        :'slab_to' => :'slabTo',
        :'status' => :'status',
        :'threshold_fee_value' => :'thresholdFeeValue',
        :'transaction_currency' => :'transactionCurrency'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'auth_currency' => :'String',
        :'fee_currency' => :'String',
        :'fee_name' => :'String',
        :'fee_value' => :'Float',
        :'fixed' => :'Boolean',
        :'slab_from' => :'Float',
        :'slab_to' => :'Float',
        :'status' => :'String',
        :'threshold_fee_value' => :'Float',
        :'transaction_currency' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NiumClient::FeeResponseDTO` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NiumClient::FeeResponseDTO`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'auth_currency')
        self.auth_currency = attributes[:'auth_currency']
      end

      if attributes.key?(:'fee_currency')
        self.fee_currency = attributes[:'fee_currency']
      end

      if attributes.key?(:'fee_name')
        self.fee_name = attributes[:'fee_name']
      end

      if attributes.key?(:'fee_value')
        self.fee_value = attributes[:'fee_value']
      end

      if attributes.key?(:'fixed')
        self.fixed = attributes[:'fixed']
      end

      if attributes.key?(:'slab_from')
        self.slab_from = attributes[:'slab_from']
      end

      if attributes.key?(:'slab_to')
        self.slab_to = attributes[:'slab_to']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'threshold_fee_value')
        self.threshold_fee_value = attributes[:'threshold_fee_value']
      end

      if attributes.key?(:'transaction_currency')
        self.transaction_currency = attributes[:'transaction_currency']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      fee_name_validator = EnumAttributeValidator.new('String', ["ATM_FEE", "ECOM_FEE", "VIR_CARD_FEE", "PLASTIC_FEE", "ADDON_CARD_FEE", "REPLACEMENT_FEE", "WALLET_REFUND_FEE", "REMIT_BANK_FEE", "REMIT_BANK_FEE_SWIFT_BEN", "REMIT_BANK_FEE_SWIFT_OUR", "REMIT_BANK_FEE_SWIFT", "REMIT_CASH_FEE", "REMIT_WALLET_FEE", "REMIT_CARD_FEE", "REMIT_PROXY_FEE", "REMIT_BANK_FEE_FEDWIRE", "TRANSACTION_MARKUP", "FX_MARKUP", "FX_MARKUP_AUTO_SWEEP", "FX_MARKUP_AUTO_SWEEP_EOD", "FX_MARKUP_AUTO_SWEEP_RECEIVE", "FX_MARKUP_LOCKANDHOLD_1", "INTERNATIONAL_ATM_FEE", "ATM_DECLINE_FEE", "NON_ATM_DECLINE_FEE", "ACCOUNT_OPENING_FEE", "ACCOUNT_MAINTENANCE_FEE", "ACCOUNT_INACTIVE_FEE", "P2P_FEE", "WALLET_CREDIT_THIRD_PARTY_FEE", "WALLET_CREDIT_OFFLINE_FEE", "WALLET_CREDIT_CARD_FEE", "WALLET_CREDIT_DIRECT_DEBIT_FEE", "AUTO_SWEEP_FEE_EOD", "AUTO_SWEEP_FEE_RECEIVE", "FX_MARKUP_SETTLE_2DAYS", "FX_MARKUP_SETTLE_NEXTDAY", "FX_MARKUP_SETTLE_ENDOFDAY", "FX_MARKUP_SETTLE_IMMEDIATE", "FX_MARKUP_LOCK_5MINS", "FX_MARKUP_LOCK_15MINS", "FX_MARKUP_LOCK_1HOUR", "FX_MARKUP_LOCK_4HOURS", "FX_MARKUP_LOCK_8HOURS", "FX_MARKUP_LOCK_24HOURS", "FX_MARKUP_CANCELLATION", "FX_MARKUP_REVERSAL", "DOMESTIC_LINKED_CARD_FEE"])
      return false unless fee_name_validator.valid?(@fee_name)
      status_validator = EnumAttributeValidator.new('String', ["ACTIVE", "INACTIVE", "BLOCKED", "SUSPENDED", "UPLOADED", "APPROVED", "REJECTED", "FAILED", "SUCCESS", "FAILURE", "PARTIALLY SUCCESS", "SYNC", "NOT SYNC", "PENDING", "REQUIRES_ACTION", "CLEAR", "DECLINED", "ACCOUNT_BLOCKED", "AMOUNT_BLOCKED"])
      return false unless status_validator.valid?(@status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fee_name Object to be assigned
    def fee_name=(fee_name)
      validator = EnumAttributeValidator.new('String', ["ATM_FEE", "ECOM_FEE", "VIR_CARD_FEE", "PLASTIC_FEE", "ADDON_CARD_FEE", "REPLACEMENT_FEE", "WALLET_REFUND_FEE", "REMIT_BANK_FEE", "REMIT_BANK_FEE_SWIFT_BEN", "REMIT_BANK_FEE_SWIFT_OUR", "REMIT_BANK_FEE_SWIFT", "REMIT_CASH_FEE", "REMIT_WALLET_FEE", "REMIT_CARD_FEE", "REMIT_PROXY_FEE", "REMIT_BANK_FEE_FEDWIRE", "TRANSACTION_MARKUP", "FX_MARKUP", "FX_MARKUP_AUTO_SWEEP", "FX_MARKUP_AUTO_SWEEP_EOD", "FX_MARKUP_AUTO_SWEEP_RECEIVE", "FX_MARKUP_LOCKANDHOLD_1", "INTERNATIONAL_ATM_FEE", "ATM_DECLINE_FEE", "NON_ATM_DECLINE_FEE", "ACCOUNT_OPENING_FEE", "ACCOUNT_MAINTENANCE_FEE", "ACCOUNT_INACTIVE_FEE", "P2P_FEE", "WALLET_CREDIT_THIRD_PARTY_FEE", "WALLET_CREDIT_OFFLINE_FEE", "WALLET_CREDIT_CARD_FEE", "WALLET_CREDIT_DIRECT_DEBIT_FEE", "AUTO_SWEEP_FEE_EOD", "AUTO_SWEEP_FEE_RECEIVE", "FX_MARKUP_SETTLE_2DAYS", "FX_MARKUP_SETTLE_NEXTDAY", "FX_MARKUP_SETTLE_ENDOFDAY", "FX_MARKUP_SETTLE_IMMEDIATE", "FX_MARKUP_LOCK_5MINS", "FX_MARKUP_LOCK_15MINS", "FX_MARKUP_LOCK_1HOUR", "FX_MARKUP_LOCK_4HOURS", "FX_MARKUP_LOCK_8HOURS", "FX_MARKUP_LOCK_24HOURS", "FX_MARKUP_CANCELLATION", "FX_MARKUP_REVERSAL", "DOMESTIC_LINKED_CARD_FEE"])
      unless validator.valid?(fee_name)
        fail ArgumentError, "invalid value for \"fee_name\", must be one of #{validator.allowable_values}."
      end
      @fee_name = fee_name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["ACTIVE", "INACTIVE", "BLOCKED", "SUSPENDED", "UPLOADED", "APPROVED", "REJECTED", "FAILED", "SUCCESS", "FAILURE", "PARTIALLY SUCCESS", "SYNC", "NOT SYNC", "PENDING", "REQUIRES_ACTION", "CLEAR", "DECLINED", "ACCOUNT_BLOCKED", "AMOUNT_BLOCKED"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          auth_currency == o.auth_currency &&
          fee_currency == o.fee_currency &&
          fee_name == o.fee_name &&
          fee_value == o.fee_value &&
          fixed == o.fixed &&
          slab_from == o.slab_from &&
          slab_to == o.slab_to &&
          status == o.status &&
          threshold_fee_value == o.threshold_fee_value &&
          transaction_currency == o.transaction_currency
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [auth_currency, fee_currency, fee_name, fee_value, fixed, slab_from, slab_to, status, threshold_fee_value, transaction_currency].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NiumClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
