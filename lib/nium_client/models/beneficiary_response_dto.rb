=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'date'
require 'time'

module NiumClient
  class BeneficiaryResponseDTO
    # This field contains the boolean value for the autosweepPayoutAccount.
    attr_accessor :autosweep_payout_account

    # This field contains an account number as a payout detail.
    attr_accessor :beneficiary_account_number

    # This field contains the bank account type of the beneficiary. The account type can be either Individual or Corporate.
    attr_accessor :beneficiary_account_type

    # This field contains an address of the beneficiary.
    attr_accessor :beneficiary_address

    # This field contains one of following four bank account types given at the time of beneficiary creation: • Current • Saving • Maestra • Checking
    attr_accessor :beneficiary_bank_account_type

    # This field contains the bank code of the payout.
    attr_accessor :beneficiary_bank_code

    # This field contains the beneficiary bank name.
    attr_accessor :beneficiary_bank_name

    # This field contains the beneficiary’s card expiry date.
    attr_accessor :beneficiary_card_expiry_date

    # This field contains the beneficiary’s card issuer name.
    attr_accessor :beneficiary_card_issuer_name

    attr_accessor :beneficiary_card_meta_data

    # This field contains the 16-digit masked card number of beneficiary in the format XXXX XXXX XXXX 8351.
    attr_accessor :beneficiary_card_number_mask

    # This field contains the system generated token number to identify the card stored at NIUM's platform.
    attr_accessor :beneficiary_card_token

    # This field contains the beneficiary card type, for example, VISA, geoswift.
    attr_accessor :beneficiary_card_type

    # This field contains the city of the beneficiary.
    attr_accessor :beneficiary_city

    # This field contains the mobile country code of the beneficiary.
    attr_accessor :beneficiary_contact_country_code

    # This field contains the name of the contact person of the business, applicable when beneficiary is a business.
    attr_accessor :beneficiary_contact_name

    # This field contains the mobile number of the beneficiary--digits only--without the country code.
    attr_accessor :beneficiary_contact_number

    # This field contains  the 2-letter [ISO-2 country code](doc:currency-and-country-codes) for the mobile number of beneficiary.
    attr_accessor :beneficiary_country_code

    # This field contains the date and time of beneficiary creation.
    attr_accessor :beneficiary_created_at

    attr_accessor :beneficiary_dob

    # This field contains an email of the beneficiary.
    attr_accessor :beneficiary_email

    # This field contains the entity type of the business, when the beneficiary is a business. Refer to the ENUM value list for allowed values. The value GO indicates a majority owned subsidiary of state-owned company.
    attr_accessor :beneficiary_entity_type

    attr_accessor :beneficiary_establishment_date

    # This field contains the unique beneficiary hash ID.
    attr_accessor :beneficiary_hash_id

    # This field contains the type of identification document name for a beneficiary.
    attr_accessor :beneficiary_identification_type

    # This field contains an identification document number for the beneficiary.
    attr_accessor :beneficiary_identification_value

    # This field contains the name of the beneficiary.
    attr_accessor :beneficiary_name

    # This field contains the postal code of the beneficiary.
    attr_accessor :beneficiary_postcode

    # This field contains the state of the beneficiary.
    attr_accessor :beneficiary_state

    # This field contains the date and time of beneficiary updation.
    attr_accessor :beneficiary_updated_at

    # This field contains the boolean value for the defaultAutosweepPayoutAccount.
    attr_accessor :default_autosweep_payout_account

    # This field contains the 2-letter [ISO-2 country code](doc:currency-and-country-codes) for the payout bank.
    attr_accessor :destination_country

    # This field contains the 3-letter [ISO-4217 destination currency code](doc:currency-and-country-codes) of the payout as per the destination country from supported corridors.
    attr_accessor :destination_currency

    # This field contains the date and time of payout creation.
    attr_accessor :payout_created_at

    # This field contains the unique payout hash ID.
    attr_accessor :payout_hash_id

    # This field contains the payout method for the remittance payout.
    attr_accessor :payout_method

    # This field contains the time at which payout was updated.
    attr_accessor :payout_updated_at

    # This field contains the proxy type sent in the payment request. • For SGD-PayNow: The proxy type can be MOBILE, UEN, NRIC, or VPA. • For INR-UPI: The proxy type should be VPA. • For BRL-PIX: The proxy type can be MOBILE, ID, EMAIL, or RANDOM_KEY. • For AUD-PayID: The proxy type can be MOBILE, EMAIL, ABN, or ORGANISATION_ID( only domestic payouts are allowed). • For MYR-DuitNow: The proxy type can be NRIC, PASSPORT, CORPORATE_REGISTRATION_NUMBER, MOBILE, or ARMY_ID.
    attr_accessor :proxy_type

    # This field contains the proxy value such as VPA, UEN, or mobile number etc.
    attr_accessor :proxy_value

    # This field contains the relationship of the beneficiary with the remitter.
    attr_accessor :remitter_beneficiary_relationship

    # This field contains the routing code type 1, for example, SWIFT for all countries, IFSC for India, SORT CODE for UK, ACH CODE for USA, BRANCH CODE for Brazil and Bangladesh, BSB CODE for Australia, BANK CODE for HongKong.
    attr_accessor :routing_code_type1

    # This field contains the routing code type 2, for example, SWIFT for all countries, IFSC for India, SORT CODE for UK, ACH CODE for USA, BRANCH CODE for Brazil and Bangladesh, BSB CODE for Australia, BANK CODE for HongKong.
    attr_accessor :routing_code_type2

    # This field contains the routing code value 1, for example, ADCBINBB or ADCBINBB123 for SWIFT, SBIN0000058 for IFSC, 100000 for SORT CODE, 111000025 for ACH CODE, 012515 for BSB CODE, 151 for BANK CODE.
    attr_accessor :routing_code_value1

    # This field contains the routing code value 2, for example, ADCBINBB or ADCBINBB123 for SWIFT, SBIN0000058 for IFSC, 100000 for SORT CODE, 111000025 for ACH CODE, 012515 for BSB CODE, 151 for BANK CODE.
    attr_accessor :routing_code_value2

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'autosweep_payout_account' => :'autosweepPayoutAccount',
        :'beneficiary_account_number' => :'beneficiaryAccountNumber',
        :'beneficiary_account_type' => :'beneficiaryAccountType',
        :'beneficiary_address' => :'beneficiaryAddress',
        :'beneficiary_bank_account_type' => :'beneficiaryBankAccountType',
        :'beneficiary_bank_code' => :'beneficiaryBankCode',
        :'beneficiary_bank_name' => :'beneficiaryBankName',
        :'beneficiary_card_expiry_date' => :'beneficiaryCardExpiryDate',
        :'beneficiary_card_issuer_name' => :'beneficiaryCardIssuerName',
        :'beneficiary_card_meta_data' => :'beneficiaryCardMetaData',
        :'beneficiary_card_number_mask' => :'beneficiaryCardNumberMask',
        :'beneficiary_card_token' => :'beneficiaryCardToken',
        :'beneficiary_card_type' => :'beneficiaryCardType',
        :'beneficiary_city' => :'beneficiaryCity',
        :'beneficiary_contact_country_code' => :'beneficiaryContactCountryCode',
        :'beneficiary_contact_name' => :'beneficiaryContactName',
        :'beneficiary_contact_number' => :'beneficiaryContactNumber',
        :'beneficiary_country_code' => :'beneficiaryCountryCode',
        :'beneficiary_created_at' => :'beneficiaryCreatedAt',
        :'beneficiary_dob' => :'beneficiaryDob',
        :'beneficiary_email' => :'beneficiaryEmail',
        :'beneficiary_entity_type' => :'beneficiaryEntityType',
        :'beneficiary_establishment_date' => :'beneficiaryEstablishmentDate',
        :'beneficiary_hash_id' => :'beneficiaryHashId',
        :'beneficiary_identification_type' => :'beneficiaryIdentificationType',
        :'beneficiary_identification_value' => :'beneficiaryIdentificationValue',
        :'beneficiary_name' => :'beneficiaryName',
        :'beneficiary_postcode' => :'beneficiaryPostcode',
        :'beneficiary_state' => :'beneficiaryState',
        :'beneficiary_updated_at' => :'beneficiaryUpdatedAt',
        :'default_autosweep_payout_account' => :'defaultAutosweepPayoutAccount',
        :'destination_country' => :'destinationCountry',
        :'destination_currency' => :'destinationCurrency',
        :'payout_created_at' => :'payoutCreatedAt',
        :'payout_hash_id' => :'payoutHashId',
        :'payout_method' => :'payoutMethod',
        :'payout_updated_at' => :'payoutUpdatedAt',
        :'proxy_type' => :'proxyType',
        :'proxy_value' => :'proxyValue',
        :'remitter_beneficiary_relationship' => :'remitterBeneficiaryRelationship',
        :'routing_code_type1' => :'routingCodeType1',
        :'routing_code_type2' => :'routingCodeType2',
        :'routing_code_value1' => :'routingCodeValue1',
        :'routing_code_value2' => :'routingCodeValue2'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'autosweep_payout_account' => :'Boolean',
        :'beneficiary_account_number' => :'String',
        :'beneficiary_account_type' => :'String',
        :'beneficiary_address' => :'String',
        :'beneficiary_bank_account_type' => :'String',
        :'beneficiary_bank_code' => :'String',
        :'beneficiary_bank_name' => :'String',
        :'beneficiary_card_expiry_date' => :'String',
        :'beneficiary_card_issuer_name' => :'String',
        :'beneficiary_card_meta_data' => :'CardMetaDataResponseDTO',
        :'beneficiary_card_number_mask' => :'String',
        :'beneficiary_card_token' => :'String',
        :'beneficiary_card_type' => :'String',
        :'beneficiary_city' => :'String',
        :'beneficiary_contact_country_code' => :'String',
        :'beneficiary_contact_name' => :'String',
        :'beneficiary_contact_number' => :'String',
        :'beneficiary_country_code' => :'String',
        :'beneficiary_created_at' => :'String',
        :'beneficiary_dob' => :'String',
        :'beneficiary_email' => :'String',
        :'beneficiary_entity_type' => :'String',
        :'beneficiary_establishment_date' => :'String',
        :'beneficiary_hash_id' => :'String',
        :'beneficiary_identification_type' => :'String',
        :'beneficiary_identification_value' => :'String',
        :'beneficiary_name' => :'String',
        :'beneficiary_postcode' => :'String',
        :'beneficiary_state' => :'String',
        :'beneficiary_updated_at' => :'String',
        :'default_autosweep_payout_account' => :'Boolean',
        :'destination_country' => :'String',
        :'destination_currency' => :'String',
        :'payout_created_at' => :'String',
        :'payout_hash_id' => :'String',
        :'payout_method' => :'String',
        :'payout_updated_at' => :'String',
        :'proxy_type' => :'String',
        :'proxy_value' => :'String',
        :'remitter_beneficiary_relationship' => :'String',
        :'routing_code_type1' => :'String',
        :'routing_code_type2' => :'String',
        :'routing_code_value1' => :'String',
        :'routing_code_value2' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NiumClient::BeneficiaryResponseDTO` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NiumClient::BeneficiaryResponseDTO`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'autosweep_payout_account')
        self.autosweep_payout_account = attributes[:'autosweep_payout_account']
      end

      if attributes.key?(:'beneficiary_account_number')
        self.beneficiary_account_number = attributes[:'beneficiary_account_number']
      end

      if attributes.key?(:'beneficiary_account_type')
        self.beneficiary_account_type = attributes[:'beneficiary_account_type']
      end

      if attributes.key?(:'beneficiary_address')
        self.beneficiary_address = attributes[:'beneficiary_address']
      end

      if attributes.key?(:'beneficiary_bank_account_type')
        self.beneficiary_bank_account_type = attributes[:'beneficiary_bank_account_type']
      end

      if attributes.key?(:'beneficiary_bank_code')
        self.beneficiary_bank_code = attributes[:'beneficiary_bank_code']
      end

      if attributes.key?(:'beneficiary_bank_name')
        self.beneficiary_bank_name = attributes[:'beneficiary_bank_name']
      end

      if attributes.key?(:'beneficiary_card_expiry_date')
        self.beneficiary_card_expiry_date = attributes[:'beneficiary_card_expiry_date']
      end

      if attributes.key?(:'beneficiary_card_issuer_name')
        self.beneficiary_card_issuer_name = attributes[:'beneficiary_card_issuer_name']
      end

      if attributes.key?(:'beneficiary_card_meta_data')
        self.beneficiary_card_meta_data = attributes[:'beneficiary_card_meta_data']
      end

      if attributes.key?(:'beneficiary_card_number_mask')
        self.beneficiary_card_number_mask = attributes[:'beneficiary_card_number_mask']
      end

      if attributes.key?(:'beneficiary_card_token')
        self.beneficiary_card_token = attributes[:'beneficiary_card_token']
      end

      if attributes.key?(:'beneficiary_card_type')
        self.beneficiary_card_type = attributes[:'beneficiary_card_type']
      end

      if attributes.key?(:'beneficiary_city')
        self.beneficiary_city = attributes[:'beneficiary_city']
      end

      if attributes.key?(:'beneficiary_contact_country_code')
        self.beneficiary_contact_country_code = attributes[:'beneficiary_contact_country_code']
      end

      if attributes.key?(:'beneficiary_contact_name')
        self.beneficiary_contact_name = attributes[:'beneficiary_contact_name']
      end

      if attributes.key?(:'beneficiary_contact_number')
        self.beneficiary_contact_number = attributes[:'beneficiary_contact_number']
      end

      if attributes.key?(:'beneficiary_country_code')
        self.beneficiary_country_code = attributes[:'beneficiary_country_code']
      end

      if attributes.key?(:'beneficiary_created_at')
        self.beneficiary_created_at = attributes[:'beneficiary_created_at']
      end

      if attributes.key?(:'beneficiary_dob')
        self.beneficiary_dob = attributes[:'beneficiary_dob']
      end

      if attributes.key?(:'beneficiary_email')
        self.beneficiary_email = attributes[:'beneficiary_email']
      end

      if attributes.key?(:'beneficiary_entity_type')
        self.beneficiary_entity_type = attributes[:'beneficiary_entity_type']
      end

      if attributes.key?(:'beneficiary_establishment_date')
        self.beneficiary_establishment_date = attributes[:'beneficiary_establishment_date']
      end

      if attributes.key?(:'beneficiary_hash_id')
        self.beneficiary_hash_id = attributes[:'beneficiary_hash_id']
      end

      if attributes.key?(:'beneficiary_identification_type')
        self.beneficiary_identification_type = attributes[:'beneficiary_identification_type']
      end

      if attributes.key?(:'beneficiary_identification_value')
        self.beneficiary_identification_value = attributes[:'beneficiary_identification_value']
      end

      if attributes.key?(:'beneficiary_name')
        self.beneficiary_name = attributes[:'beneficiary_name']
      end

      if attributes.key?(:'beneficiary_postcode')
        self.beneficiary_postcode = attributes[:'beneficiary_postcode']
      end

      if attributes.key?(:'beneficiary_state')
        self.beneficiary_state = attributes[:'beneficiary_state']
      end

      if attributes.key?(:'beneficiary_updated_at')
        self.beneficiary_updated_at = attributes[:'beneficiary_updated_at']
      end

      if attributes.key?(:'default_autosweep_payout_account')
        self.default_autosweep_payout_account = attributes[:'default_autosweep_payout_account']
      end

      if attributes.key?(:'destination_country')
        self.destination_country = attributes[:'destination_country']
      end

      if attributes.key?(:'destination_currency')
        self.destination_currency = attributes[:'destination_currency']
      end

      if attributes.key?(:'payout_created_at')
        self.payout_created_at = attributes[:'payout_created_at']
      end

      if attributes.key?(:'payout_hash_id')
        self.payout_hash_id = attributes[:'payout_hash_id']
      end

      if attributes.key?(:'payout_method')
        self.payout_method = attributes[:'payout_method']
      end

      if attributes.key?(:'payout_updated_at')
        self.payout_updated_at = attributes[:'payout_updated_at']
      end

      if attributes.key?(:'proxy_type')
        self.proxy_type = attributes[:'proxy_type']
      end

      if attributes.key?(:'proxy_value')
        self.proxy_value = attributes[:'proxy_value']
      end

      if attributes.key?(:'remitter_beneficiary_relationship')
        self.remitter_beneficiary_relationship = attributes[:'remitter_beneficiary_relationship']
      end

      if attributes.key?(:'routing_code_type1')
        self.routing_code_type1 = attributes[:'routing_code_type1']
      end

      if attributes.key?(:'routing_code_type2')
        self.routing_code_type2 = attributes[:'routing_code_type2']
      end

      if attributes.key?(:'routing_code_value1')
        self.routing_code_value1 = attributes[:'routing_code_value1']
      end

      if attributes.key?(:'routing_code_value2')
        self.routing_code_value2 = attributes[:'routing_code_value2']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      beneficiary_bank_account_type_validator = EnumAttributeValidator.new('String', ["Current", "Saving", "Maestra", "Checking"])
      return false unless beneficiary_bank_account_type_validator.valid?(@beneficiary_bank_account_type)
      payout_method_validator = EnumAttributeValidator.new('String', ["LOCAL", "SWIFT", "WALLET"])
      return false unless payout_method_validator.valid?(@payout_method)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] beneficiary_bank_account_type Object to be assigned
    def beneficiary_bank_account_type=(beneficiary_bank_account_type)
      validator = EnumAttributeValidator.new('String', ["Current", "Saving", "Maestra", "Checking"])
      unless validator.valid?(beneficiary_bank_account_type)
        fail ArgumentError, "invalid value for \"beneficiary_bank_account_type\", must be one of #{validator.allowable_values}."
      end
      @beneficiary_bank_account_type = beneficiary_bank_account_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payout_method Object to be assigned
    def payout_method=(payout_method)
      validator = EnumAttributeValidator.new('String', ["LOCAL", "SWIFT", "WALLET"])
      unless validator.valid?(payout_method)
        fail ArgumentError, "invalid value for \"payout_method\", must be one of #{validator.allowable_values}."
      end
      @payout_method = payout_method
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          autosweep_payout_account == o.autosweep_payout_account &&
          beneficiary_account_number == o.beneficiary_account_number &&
          beneficiary_account_type == o.beneficiary_account_type &&
          beneficiary_address == o.beneficiary_address &&
          beneficiary_bank_account_type == o.beneficiary_bank_account_type &&
          beneficiary_bank_code == o.beneficiary_bank_code &&
          beneficiary_bank_name == o.beneficiary_bank_name &&
          beneficiary_card_expiry_date == o.beneficiary_card_expiry_date &&
          beneficiary_card_issuer_name == o.beneficiary_card_issuer_name &&
          beneficiary_card_meta_data == o.beneficiary_card_meta_data &&
          beneficiary_card_number_mask == o.beneficiary_card_number_mask &&
          beneficiary_card_token == o.beneficiary_card_token &&
          beneficiary_card_type == o.beneficiary_card_type &&
          beneficiary_city == o.beneficiary_city &&
          beneficiary_contact_country_code == o.beneficiary_contact_country_code &&
          beneficiary_contact_name == o.beneficiary_contact_name &&
          beneficiary_contact_number == o.beneficiary_contact_number &&
          beneficiary_country_code == o.beneficiary_country_code &&
          beneficiary_created_at == o.beneficiary_created_at &&
          beneficiary_dob == o.beneficiary_dob &&
          beneficiary_email == o.beneficiary_email &&
          beneficiary_entity_type == o.beneficiary_entity_type &&
          beneficiary_establishment_date == o.beneficiary_establishment_date &&
          beneficiary_hash_id == o.beneficiary_hash_id &&
          beneficiary_identification_type == o.beneficiary_identification_type &&
          beneficiary_identification_value == o.beneficiary_identification_value &&
          beneficiary_name == o.beneficiary_name &&
          beneficiary_postcode == o.beneficiary_postcode &&
          beneficiary_state == o.beneficiary_state &&
          beneficiary_updated_at == o.beneficiary_updated_at &&
          default_autosweep_payout_account == o.default_autosweep_payout_account &&
          destination_country == o.destination_country &&
          destination_currency == o.destination_currency &&
          payout_created_at == o.payout_created_at &&
          payout_hash_id == o.payout_hash_id &&
          payout_method == o.payout_method &&
          payout_updated_at == o.payout_updated_at &&
          proxy_type == o.proxy_type &&
          proxy_value == o.proxy_value &&
          remitter_beneficiary_relationship == o.remitter_beneficiary_relationship &&
          routing_code_type1 == o.routing_code_type1 &&
          routing_code_type2 == o.routing_code_type2 &&
          routing_code_value1 == o.routing_code_value1 &&
          routing_code_value2 == o.routing_code_value2
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [autosweep_payout_account, beneficiary_account_number, beneficiary_account_type, beneficiary_address, beneficiary_bank_account_type, beneficiary_bank_code, beneficiary_bank_name, beneficiary_card_expiry_date, beneficiary_card_issuer_name, beneficiary_card_meta_data, beneficiary_card_number_mask, beneficiary_card_token, beneficiary_card_type, beneficiary_city, beneficiary_contact_country_code, beneficiary_contact_name, beneficiary_contact_number, beneficiary_country_code, beneficiary_created_at, beneficiary_dob, beneficiary_email, beneficiary_entity_type, beneficiary_establishment_date, beneficiary_hash_id, beneficiary_identification_type, beneficiary_identification_value, beneficiary_name, beneficiary_postcode, beneficiary_state, beneficiary_updated_at, default_autosweep_payout_account, destination_country, destination_currency, payout_created_at, payout_hash_id, payout_method, payout_updated_at, proxy_type, proxy_value, remitter_beneficiary_relationship, routing_code_type1, routing_code_type2, routing_code_value1, routing_code_value2].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NiumClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
