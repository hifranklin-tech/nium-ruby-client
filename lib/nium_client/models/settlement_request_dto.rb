=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'date'
require 'time'

module NiumClient
  class SettlementRequestDTO
    # This field contains the 6 digit authorization code
    attr_accessor :authorization_code

    # This field contains the billing amount
    attr_accessor :billing_amount

    # This field contains the 3-letter ISO3 billing currency code
    attr_accessor :billing_currency

    # This field contains the unique card identifier
    attr_accessor :card_hash_id

    # This field contains the complete 16 digit card number
    attr_accessor :card_number

    # This field contains the unique client identifier
    attr_accessor :client_hash_id

    # This field contains the unique client ID
    attr_accessor :client_id

    # This field contains the unique customer identifier 
    attr_accessor :customer_hash_id

    # This field contains the exchange rate from the source currency to the destination currency
    attr_accessor :exchange_rate

    attr_accessor :labels

    # This field accepts the pre-defined logo Id
    attr_accessor :logo_id

    # This field accepts the pre-defined logo Identifier
    attr_accessor :logo_identifier

    # This field contains the 16-digit masked card number
    attr_accessor :mask_card_number

    # This field contains the 4-digit mcc code
    attr_accessor :merchant_category_code

    # This field contains the merchant country code
    attr_accessor :merchant_country_code

    # This field contains the unique merchant identifier
    attr_accessor :merchant_id

    # This field contains the full merchant name and location data
    attr_accessor :merchant_name_location

    # This field contains the authorization code of the original transaction
    attr_accessor :original_authorization_code

    # This field contains the pos entry code that identifies the actual method used to capture the account number, expiration date, and the PIN
    attr_accessor :pos_entry_mode

    # This field contains the settlement date
    attr_accessor :settlement_date

    # This field contains the settlement id
    attr_accessor :settlement_id

    # This field is optional & accepts the sub-bin
    attr_accessor :sub_bin

    # This field contains the token number
    attr_accessor :token_number

    # This field contains the token requester id
    attr_accessor :token_requester_id

    # This field contains the transaction amount.
    attr_accessor :transaction_amount

    # This field contains the 3-letter ISO3 transaction currency code.
    attr_accessor :transaction_currency

    # This field contains the type of transaction, it can be C or D
    attr_accessor :transaction_type

    # This field contains the Unique ID provided for transaction by VISA
    attr_accessor :visa_transaction_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'authorization_code' => :'authorizationCode',
        :'billing_amount' => :'billingAmount',
        :'billing_currency' => :'billingCurrency',
        :'card_hash_id' => :'cardHashId',
        :'card_number' => :'cardNumber',
        :'client_hash_id' => :'clientHashId',
        :'client_id' => :'clientId',
        :'customer_hash_id' => :'customerHashId',
        :'exchange_rate' => :'exchangeRate',
        :'labels' => :'labels',
        :'logo_id' => :'logoId',
        :'logo_identifier' => :'logoIdentifier',
        :'mask_card_number' => :'maskCardNumber',
        :'merchant_category_code' => :'merchantCategoryCode',
        :'merchant_country_code' => :'merchantCountryCode',
        :'merchant_id' => :'merchantId',
        :'merchant_name_location' => :'merchantNameLocation',
        :'original_authorization_code' => :'originalAuthorizationCode',
        :'pos_entry_mode' => :'posEntryMode',
        :'settlement_date' => :'settlementDate',
        :'settlement_id' => :'settlementId',
        :'sub_bin' => :'subBin',
        :'token_number' => :'tokenNumber',
        :'token_requester_id' => :'tokenRequesterId',
        :'transaction_amount' => :'transactionAmount',
        :'transaction_currency' => :'transactionCurrency',
        :'transaction_type' => :'transactionType',
        :'visa_transaction_id' => :'visaTransactionId'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'authorization_code' => :'String',
        :'billing_amount' => :'Float',
        :'billing_currency' => :'String',
        :'card_hash_id' => :'String',
        :'card_number' => :'String',
        :'client_hash_id' => :'String',
        :'client_id' => :'Integer',
        :'customer_hash_id' => :'String',
        :'exchange_rate' => :'String',
        :'labels' => :'Labels',
        :'logo_id' => :'String',
        :'logo_identifier' => :'String',
        :'mask_card_number' => :'String',
        :'merchant_category_code' => :'String',
        :'merchant_country_code' => :'String',
        :'merchant_id' => :'String',
        :'merchant_name_location' => :'String',
        :'original_authorization_code' => :'String',
        :'pos_entry_mode' => :'String',
        :'settlement_date' => :'String',
        :'settlement_id' => :'Integer',
        :'sub_bin' => :'String',
        :'token_number' => :'String',
        :'token_requester_id' => :'String',
        :'transaction_amount' => :'Float',
        :'transaction_currency' => :'String',
        :'transaction_type' => :'String',
        :'visa_transaction_id' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NiumClient::SettlementRequestDTO` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NiumClient::SettlementRequestDTO`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'authorization_code')
        self.authorization_code = attributes[:'authorization_code']
      end

      if attributes.key?(:'billing_amount')
        self.billing_amount = attributes[:'billing_amount']
      end

      if attributes.key?(:'billing_currency')
        self.billing_currency = attributes[:'billing_currency']
      end

      if attributes.key?(:'card_hash_id')
        self.card_hash_id = attributes[:'card_hash_id']
      end

      if attributes.key?(:'card_number')
        self.card_number = attributes[:'card_number']
      end

      if attributes.key?(:'client_hash_id')
        self.client_hash_id = attributes[:'client_hash_id']
      end

      if attributes.key?(:'client_id')
        self.client_id = attributes[:'client_id']
      end

      if attributes.key?(:'customer_hash_id')
        self.customer_hash_id = attributes[:'customer_hash_id']
      end

      if attributes.key?(:'exchange_rate')
        self.exchange_rate = attributes[:'exchange_rate']
      end

      if attributes.key?(:'labels')
        self.labels = attributes[:'labels']
      end

      if attributes.key?(:'logo_id')
        self.logo_id = attributes[:'logo_id']
      end

      if attributes.key?(:'logo_identifier')
        self.logo_identifier = attributes[:'logo_identifier']
      end

      if attributes.key?(:'mask_card_number')
        self.mask_card_number = attributes[:'mask_card_number']
      end

      if attributes.key?(:'merchant_category_code')
        self.merchant_category_code = attributes[:'merchant_category_code']
      end

      if attributes.key?(:'merchant_country_code')
        self.merchant_country_code = attributes[:'merchant_country_code']
      end

      if attributes.key?(:'merchant_id')
        self.merchant_id = attributes[:'merchant_id']
      end

      if attributes.key?(:'merchant_name_location')
        self.merchant_name_location = attributes[:'merchant_name_location']
      end

      if attributes.key?(:'original_authorization_code')
        self.original_authorization_code = attributes[:'original_authorization_code']
      end

      if attributes.key?(:'pos_entry_mode')
        self.pos_entry_mode = attributes[:'pos_entry_mode']
      end

      if attributes.key?(:'settlement_date')
        self.settlement_date = attributes[:'settlement_date']
      end

      if attributes.key?(:'settlement_id')
        self.settlement_id = attributes[:'settlement_id']
      end

      if attributes.key?(:'sub_bin')
        self.sub_bin = attributes[:'sub_bin']
      end

      if attributes.key?(:'token_number')
        self.token_number = attributes[:'token_number']
      end

      if attributes.key?(:'token_requester_id')
        self.token_requester_id = attributes[:'token_requester_id']
      end

      if attributes.key?(:'transaction_amount')
        self.transaction_amount = attributes[:'transaction_amount']
      end

      if attributes.key?(:'transaction_currency')
        self.transaction_currency = attributes[:'transaction_currency']
      end

      if attributes.key?(:'transaction_type')
        self.transaction_type = attributes[:'transaction_type']
      end

      if attributes.key?(:'visa_transaction_id')
        self.visa_transaction_id = attributes[:'visa_transaction_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          authorization_code == o.authorization_code &&
          billing_amount == o.billing_amount &&
          billing_currency == o.billing_currency &&
          card_hash_id == o.card_hash_id &&
          card_number == o.card_number &&
          client_hash_id == o.client_hash_id &&
          client_id == o.client_id &&
          customer_hash_id == o.customer_hash_id &&
          exchange_rate == o.exchange_rate &&
          labels == o.labels &&
          logo_id == o.logo_id &&
          logo_identifier == o.logo_identifier &&
          mask_card_number == o.mask_card_number &&
          merchant_category_code == o.merchant_category_code &&
          merchant_country_code == o.merchant_country_code &&
          merchant_id == o.merchant_id &&
          merchant_name_location == o.merchant_name_location &&
          original_authorization_code == o.original_authorization_code &&
          pos_entry_mode == o.pos_entry_mode &&
          settlement_date == o.settlement_date &&
          settlement_id == o.settlement_id &&
          sub_bin == o.sub_bin &&
          token_number == o.token_number &&
          token_requester_id == o.token_requester_id &&
          transaction_amount == o.transaction_amount &&
          transaction_currency == o.transaction_currency &&
          transaction_type == o.transaction_type &&
          visa_transaction_id == o.visa_transaction_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [authorization_code, billing_amount, billing_currency, card_hash_id, card_number, client_hash_id, client_id, customer_hash_id, exchange_rate, labels, logo_id, logo_identifier, mask_card_number, merchant_category_code, merchant_country_code, merchant_id, merchant_name_location, original_authorization_code, pos_entry_mode, settlement_date, settlement_id, sub_bin, token_number, token_requester_id, transaction_amount, transaction_currency, transaction_type, visa_transaction_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NiumClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
