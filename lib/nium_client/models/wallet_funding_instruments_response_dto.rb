=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'date'
require 'time'

module NiumClient
  class WalletFundingInstrumentsResponseDTO
    # This field contains the name of the bank which has issued the account linked to this funding instrument.
    attr_accessor :bank_name

    # This field contains the name of the bank which has issued the funding instrument.
    attr_accessor :card_bank_name

    # This field contains the card network details. We currently support Visa and MasterCard. It can contain one of the following - visa OR mastercard.
    attr_accessor :card_network

    # This field contains the type of funding card. It can contain one of the following - credit OR debit.
    attr_accessor :card_type

    # This field contains the unique 36-character client identifier generated and shared before API handshake.
    attr_accessor :client_hash_id

    # This field contains the Country.
    attr_accessor :country

    # This field contains the timestamp of adding funding instrument in YYYY-MM-DD hh:mm:ss format.
    attr_accessor :created_at

    # This field contains the currency.
    attr_accessor :currency

    # This field contains the unique 36-character customer identifier generated and shared before API handshake.
    attr_accessor :customer_hash_id

    # This field contains the funding channel of the funding instrument.
    attr_accessor :funding_channel

    # This field contains the unique 36-character funding instrument identifier.
    attr_accessor :funding_instrument_id

    # This field contains the 16-digit masked card number in format 1234-56xx-xxxx-3456.
    attr_accessor :mask_card_number

    # This field contains the masked account number in the format where only last 4 digits are visible.
    attr_accessor :masked_account_number

    # This field contains the routing type.
    attr_accessor :routing_type

    # This field contains the routing value.
    attr_accessor :routing_value

    # This flag indicates whether the funding instrument is saved or not.
    attr_accessor :saved

    # This field contains the status of the funding instrument.
    attr_accessor :status

    # This flag indicates whether 3DS verification is supported on the card.
    attr_accessor :three_d_secure_usage

    # This field contains the timestamp of last update to the funding instrument in YYYY-MM-DD hh:mm:ss format
    attr_accessor :updated_at

    # This field contains the unique 36-character wallet identifier generated and shared before API handshake.
    attr_accessor :wallet_hash_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'bank_name' => :'bankName',
        :'card_bank_name' => :'cardBankName',
        :'card_network' => :'cardNetwork',
        :'card_type' => :'cardType',
        :'client_hash_id' => :'clientHashId',
        :'country' => :'country',
        :'created_at' => :'createdAt',
        :'currency' => :'currency',
        :'customer_hash_id' => :'customerHashId',
        :'funding_channel' => :'fundingChannel',
        :'funding_instrument_id' => :'fundingInstrumentId',
        :'mask_card_number' => :'maskCardNumber',
        :'masked_account_number' => :'maskedAccountNumber',
        :'routing_type' => :'routingType',
        :'routing_value' => :'routingValue',
        :'saved' => :'saved',
        :'status' => :'status',
        :'three_d_secure_usage' => :'threeDSecureUsage',
        :'updated_at' => :'updatedAt',
        :'wallet_hash_id' => :'walletHashId'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'bank_name' => :'String',
        :'card_bank_name' => :'String',
        :'card_network' => :'String',
        :'card_type' => :'String',
        :'client_hash_id' => :'String',
        :'country' => :'String',
        :'created_at' => :'Time',
        :'currency' => :'String',
        :'customer_hash_id' => :'String',
        :'funding_channel' => :'String',
        :'funding_instrument_id' => :'String',
        :'mask_card_number' => :'String',
        :'masked_account_number' => :'String',
        :'routing_type' => :'String',
        :'routing_value' => :'String',
        :'saved' => :'Boolean',
        :'status' => :'String',
        :'three_d_secure_usage' => :'Boolean',
        :'updated_at' => :'Time',
        :'wallet_hash_id' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NiumClient::WalletFundingInstrumentsResponseDTO` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NiumClient::WalletFundingInstrumentsResponseDTO`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'bank_name')
        self.bank_name = attributes[:'bank_name']
      end

      if attributes.key?(:'card_bank_name')
        self.card_bank_name = attributes[:'card_bank_name']
      end

      if attributes.key?(:'card_network')
        self.card_network = attributes[:'card_network']
      end

      if attributes.key?(:'card_type')
        self.card_type = attributes[:'card_type']
      end

      if attributes.key?(:'client_hash_id')
        self.client_hash_id = attributes[:'client_hash_id']
      end

      if attributes.key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'customer_hash_id')
        self.customer_hash_id = attributes[:'customer_hash_id']
      end

      if attributes.key?(:'funding_channel')
        self.funding_channel = attributes[:'funding_channel']
      end

      if attributes.key?(:'funding_instrument_id')
        self.funding_instrument_id = attributes[:'funding_instrument_id']
      end

      if attributes.key?(:'mask_card_number')
        self.mask_card_number = attributes[:'mask_card_number']
      end

      if attributes.key?(:'masked_account_number')
        self.masked_account_number = attributes[:'masked_account_number']
      end

      if attributes.key?(:'routing_type')
        self.routing_type = attributes[:'routing_type']
      end

      if attributes.key?(:'routing_value')
        self.routing_value = attributes[:'routing_value']
      end

      if attributes.key?(:'saved')
        self.saved = attributes[:'saved']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'three_d_secure_usage')
        self.three_d_secure_usage = attributes[:'three_d_secure_usage']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'wallet_hash_id')
        self.wallet_hash_id = attributes[:'wallet_hash_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      funding_channel_validator = EnumAttributeValidator.new('String', ["DIRECT_DEBIT"])
      return false unless funding_channel_validator.valid?(@funding_channel)
      status_validator = EnumAttributeValidator.new('String', ["ACTIVE", "INACTIVE", "BLOCKED", "SUSPENDED", "UPLOADED", "APPROVED", "REJECTED", "FAILED", "SUCCESS", "FAILURE", "PARTIALLY SUCCESS", "SYNC", "NOT SYNC", "PENDING", "REQUIRES_ACTION", "CLEAR", "DECLINED", "ACCOUNT_BLOCKED", "AMOUNT_BLOCKED", "DE_LINKED", "CANCELLED"])
      return false unless status_validator.valid?(@status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] funding_channel Object to be assigned
    def funding_channel=(funding_channel)
      validator = EnumAttributeValidator.new('String', ["DIRECT_DEBIT"])
      unless validator.valid?(funding_channel)
        fail ArgumentError, "invalid value for \"funding_channel\", must be one of #{validator.allowable_values}."
      end
      @funding_channel = funding_channel
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["ACTIVE", "INACTIVE", "BLOCKED", "SUSPENDED", "UPLOADED", "APPROVED", "REJECTED", "FAILED", "SUCCESS", "FAILURE", "PARTIALLY SUCCESS", "SYNC", "NOT SYNC", "PENDING", "REQUIRES_ACTION", "CLEAR", "DECLINED", "ACCOUNT_BLOCKED", "AMOUNT_BLOCKED", "DE_LINKED", "CANCELLED"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          bank_name == o.bank_name &&
          card_bank_name == o.card_bank_name &&
          card_network == o.card_network &&
          card_type == o.card_type &&
          client_hash_id == o.client_hash_id &&
          country == o.country &&
          created_at == o.created_at &&
          currency == o.currency &&
          customer_hash_id == o.customer_hash_id &&
          funding_channel == o.funding_channel &&
          funding_instrument_id == o.funding_instrument_id &&
          mask_card_number == o.mask_card_number &&
          masked_account_number == o.masked_account_number &&
          routing_type == o.routing_type &&
          routing_value == o.routing_value &&
          saved == o.saved &&
          status == o.status &&
          three_d_secure_usage == o.three_d_secure_usage &&
          updated_at == o.updated_at &&
          wallet_hash_id == o.wallet_hash_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [bank_name, card_bank_name, card_network, card_type, client_hash_id, country, created_at, currency, customer_hash_id, funding_channel, funding_instrument_id, mask_card_number, masked_account_number, routing_type, routing_value, saved, status, three_d_secure_usage, updated_at, wallet_hash_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NiumClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
