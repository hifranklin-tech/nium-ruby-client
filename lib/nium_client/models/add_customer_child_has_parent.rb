=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'date'
require 'time'

module NiumClient
  class AddCustomerChildHasParent
    # This object contains the user defined key-value pairs provided by the client. The maximum number of tags allowed is 15
    attr_accessor :tags

    # This array accepts additional information.
    attr_accessor :additional_info

    # This field accepts line 1 of the customer’s billing address. In the case of eKYC[GreenId], this field is used to verify the address with the document chosen. Maximum character limit: 40 The format for GreenId is: StreetNumber | StreetName | Suburb.
    attr_accessor :billing_address1

    # This field accepts the line 2 of customer's billing address. Maximum character limit: 40
    attr_accessor :billing_address2

    # This field accepts the city of customer’s billing address. Maximum character limit: 20
    attr_accessor :billing_city

    # This field accepts the 2-letter [ISO Alpha-2 country code](doc:currency-and-country-codes) denoting the country of customer's billing address.
    attr_accessor :billing_country

    # This field accepts the landmark for customer’s billing address. Maximum character limit: 40
    attr_accessor :billing_landmark

    # This field accepts the state of customer's billing address. Maximum character limit: 30
    attr_accessor :billing_state

    # This field accepts the zipcode of customer’s billing address. Maximum character limit: 10
    attr_accessor :billing_zip_code

    # This field accepts the compliance level for the customer. It is useful when the client has multiple compliance setup. For example, customer may be onboarded with SCREENING and upgrade to SCREENING_KYC later.
    attr_accessor :compliance_level

    # This field accepts the line 1 of customer's correspondence address. Maximum character limit: 40
    attr_accessor :correspondence_address1

    # This field accepts the line 2 of customer's correspondence address. Maximum character limit: 40
    attr_accessor :correspondence_address2

    # This field accepts the city of customer's correspondence address. Maximum character limit: 20
    attr_accessor :correspondence_city

    # This field accepts the 2-letter [ISO Alpha-2 country code](doc:currency-and-country-codes) denoting the country of customer's correspondence address.
    attr_accessor :correspondence_country

    # This field accepts the landmark for customer's correspondence address. Maximum character limit: 40
    attr_accessor :correspondence_landmark

    # This field accepts the state of customer's correspondence address. Maximum character limit: 30
    attr_accessor :correspondence_state

    # This field accepts the zipcode of customer's correspondence address. Maximum character limit: 10
    attr_accessor :correspondence_zip_code

    # This field accepts the 2-letter [ISO Alpha-2 country code](doc:currency-and-country-codes) denoting the country prefix code to the customer's mobile number.
    attr_accessor :country_code

    # This field accepts the country IP for the device by the customer for initiating the request.
    attr_accessor :country_ip

    # This field accepts the 2-letter [ISO country code](doc:currency-and-country-codes) denoting the customer’s country of birth. Note: This field is mandatory for EU.
    attr_accessor :country_of_birth

    # This field accepts the previously generated unique customer identifier of customer.
    attr_accessor :customer_hash_id

    # This field accepts the date of birth of the customer in YYYY-MM-DD format. Minimum customer age should be 18 years. Discuss with your NIUM account manager for any special use-cases.
    attr_accessor :date_of_birth

    # This field accepts the line 1 of customer’s delivery address. Maximum character limit: 40
    attr_accessor :delivery_address1

    # This field accepts the line 2 of customer's delivery address. Maximum character limit: 40
    attr_accessor :delivery_address2

    # This field accepts the city of customer's delivery address. Maximum character limit: 20
    attr_accessor :delivery_city

    # This field accepts the 2-letter [ISO Alpha-2 country code](doc:currency-and-country-codes) denoting the country of customer's delivery address.
    attr_accessor :delivery_country

    # This field accepts the landmark for customer's delivery address. Maximum character limit: 40
    attr_accessor :delivery_landmark

    # This field accepts the state of customer's delivery address. Maximum character limit: 30
    attr_accessor :delivery_state

    # This field accepts the zipcode of customer's delivery address. Maximum character limit: 10
    attr_accessor :delivery_zip_code

    # This field accepts the designation of the customer for certain shipping industry use-cases. This field can accept only one of the following values: • CAPTAIN • SEAFARER • SMC • VESSEL
    attr_accessor :designation

    # This field accepts the OS of the device used by the customer for initiating the request.
    attr_accessor :device_info

    # This field accepts the unique email address of the customer. Maximum character limit: 60
    attr_accessor :email

    # This field accepts the employee ID of the customer, if applicable.
    attr_accessor :employee_id

    # This field accepts the estimated monthly funding amount expected in the wallet. This field is required when estimatedMonthlyFundingCurrency field is provided in the request. The possible values are: • MF001: <1000 • MF002: 1000-5000 • MF003: 5001-10000 • MF004: 10001-20000 • MF005: >20000 See [enum value descriptions](doc:unified-add-customer-api#estimatedmonthlyfunding) Note: This field is mandatory for EU and UK.
    attr_accessor :estimated_monthly_funding

    # This field accepts the 3-letter [ISO-4217 currency code](doc:currency-and-country-codes) in which estimated monthly funding is expected in the wallet, for example, SGD. Note: This field is mandatory for EU and UK.
    attr_accessor :estimated_monthly_funding_currency

    # This is an array of 2-letter [ISO Alpha-2 country code](doc:currency-and-country-codes) to allow the client to capture the expected countries to send/receive international payments from. This field is required when internationalPaymentsSupported field is true, for example, [“FR”, “DE”]. Note: This field is mandatory for EU and UK.
    attr_accessor :expected_countries_to_send_receive_from

    # This field accepts the first name of the customer. Maximum character limit: 40
    attr_accessor :first_name

    # This field can accept only one of the following values: • Male • Female • Others
    attr_accessor :gender

    # This is an array of actual Base-64 documents as required. The maximum allowed size of this payload is 10 MB. A separate object is needed for each document image.
    attr_accessor :identification_doc

    # This field accepts the customer’s intended use of account.  See [enum value descriptions](doc:unified-add-customer-api#intendeduseofaccount) for more information.
    attr_accessor :intended_use_of_account

    # This field specifies if the customer will be doing International send/receive payments. The default value will be false. Note: This field is mandatory for EU and UK.
    attr_accessor :international_payments_supported

    # This field accepts the IP address of the device used by the customer for initiating the request.
    attr_accessor :ip_address

    # This flag specifies if the customer has accepted or rejected the Terms and Conditions.
    attr_accessor :is_tnc_accepted

    # This field accepts the last name of the customer. Maximum character limit: 40
    attr_accessor :last_name

    # This field accepts the middle name of the customer. Maximum character limit: 40
    attr_accessor :middle_name

    # This field accepts the mobile number of the customer--digits only--without the country code. Maximum character limit: 20
    attr_accessor :mobile

    # This field accepts the 2-letter [ISO Alpha-2 country code](doc:currency-and-country-codes) denoting the customer's citizenship.
    attr_accessor :nationality

    # This field accepts the customer's name in native language. Maximum character limit: 40
    attr_accessor :native_language_name

    # This field specifies if the customer is a Politically Exposed Person (PEP) or not. Note: This field is mandatory for EU.
    attr_accessor :pep

    # This field accepts the common name or preferred name of the customer. It is also acceptable to pass the first name in this field. Maximum character limit: 20
    attr_accessor :preferred_name

    # This field accepts the fee segment associated with a client. Maximum character limit: 64
    attr_accessor :segment

    # This field accepts the session ID for the session of the customer for initiating the request.
    attr_accessor :session_id

    attr_accessor :tax_details

    # This field specifies if the electronic verification consent to process customer data for compliance is required or not.
    attr_accessor :verification_consent

    # This field can accept only one of the following values: • E_KYC • MANUAL_KYC • SCREENING • E_DOC_VERIFY
    attr_accessor :kyc_mode

    # This field contains the unique identifier of the corporate parent customer to whom the individual customer is tagged.
    attr_accessor :parent_customer_hash_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'tags' => :'tags',
        :'additional_info' => :'additionalInfo',
        :'billing_address1' => :'billingAddress1',
        :'billing_address2' => :'billingAddress2',
        :'billing_city' => :'billingCity',
        :'billing_country' => :'billingCountry',
        :'billing_landmark' => :'billingLandmark',
        :'billing_state' => :'billingState',
        :'billing_zip_code' => :'billingZipCode',
        :'compliance_level' => :'complianceLevel',
        :'correspondence_address1' => :'correspondenceAddress1',
        :'correspondence_address2' => :'correspondenceAddress2',
        :'correspondence_city' => :'correspondenceCity',
        :'correspondence_country' => :'correspondenceCountry',
        :'correspondence_landmark' => :'correspondenceLandmark',
        :'correspondence_state' => :'correspondenceState',
        :'correspondence_zip_code' => :'correspondenceZipCode',
        :'country_code' => :'countryCode',
        :'country_ip' => :'countryIP',
        :'country_of_birth' => :'countryOfBirth',
        :'customer_hash_id' => :'customerHashId',
        :'date_of_birth' => :'dateOfBirth',
        :'delivery_address1' => :'deliveryAddress1',
        :'delivery_address2' => :'deliveryAddress2',
        :'delivery_city' => :'deliveryCity',
        :'delivery_country' => :'deliveryCountry',
        :'delivery_landmark' => :'deliveryLandmark',
        :'delivery_state' => :'deliveryState',
        :'delivery_zip_code' => :'deliveryZipCode',
        :'designation' => :'designation',
        :'device_info' => :'deviceInfo',
        :'email' => :'email',
        :'employee_id' => :'employeeId',
        :'estimated_monthly_funding' => :'estimatedMonthlyFunding',
        :'estimated_monthly_funding_currency' => :'estimatedMonthlyFundingCurrency',
        :'expected_countries_to_send_receive_from' => :'expectedCountriesToSendReceiveFrom',
        :'first_name' => :'firstName',
        :'gender' => :'gender',
        :'identification_doc' => :'identificationDoc',
        :'intended_use_of_account' => :'intendedUseOfAccount',
        :'international_payments_supported' => :'internationalPaymentsSupported',
        :'ip_address' => :'ipAddress',
        :'is_tnc_accepted' => :'isTncAccepted',
        :'last_name' => :'lastName',
        :'middle_name' => :'middleName',
        :'mobile' => :'mobile',
        :'nationality' => :'nationality',
        :'native_language_name' => :'nativeLanguageName',
        :'pep' => :'pep',
        :'preferred_name' => :'preferredName',
        :'segment' => :'segment',
        :'session_id' => :'sessionId',
        :'tax_details' => :'taxDetails',
        :'verification_consent' => :'verificationConsent',
        :'kyc_mode' => :'kycMode',
        :'parent_customer_hash_id' => :'parentCustomerHashId'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'tags' => :'Array<CustomerTagDTO>',
        :'additional_info' => :'Hash<String, String>',
        :'billing_address1' => :'String',
        :'billing_address2' => :'String',
        :'billing_city' => :'String',
        :'billing_country' => :'String',
        :'billing_landmark' => :'String',
        :'billing_state' => :'String',
        :'billing_zip_code' => :'String',
        :'compliance_level' => :'String',
        :'correspondence_address1' => :'String',
        :'correspondence_address2' => :'String',
        :'correspondence_city' => :'String',
        :'correspondence_country' => :'String',
        :'correspondence_landmark' => :'String',
        :'correspondence_state' => :'String',
        :'correspondence_zip_code' => :'String',
        :'country_code' => :'String',
        :'country_ip' => :'String',
        :'country_of_birth' => :'String',
        :'customer_hash_id' => :'String',
        :'date_of_birth' => :'String',
        :'delivery_address1' => :'String',
        :'delivery_address2' => :'String',
        :'delivery_city' => :'String',
        :'delivery_country' => :'String',
        :'delivery_landmark' => :'String',
        :'delivery_state' => :'String',
        :'delivery_zip_code' => :'String',
        :'designation' => :'String',
        :'device_info' => :'String',
        :'email' => :'String',
        :'employee_id' => :'String',
        :'estimated_monthly_funding' => :'String',
        :'estimated_monthly_funding_currency' => :'String',
        :'expected_countries_to_send_receive_from' => :'Array<String>',
        :'first_name' => :'String',
        :'gender' => :'String',
        :'identification_doc' => :'Array<ComplianceIdentificationDocDTO>',
        :'intended_use_of_account' => :'String',
        :'international_payments_supported' => :'Boolean',
        :'ip_address' => :'String',
        :'is_tnc_accepted' => :'Boolean',
        :'last_name' => :'String',
        :'middle_name' => :'String',
        :'mobile' => :'String',
        :'nationality' => :'String',
        :'native_language_name' => :'String',
        :'pep' => :'Boolean',
        :'preferred_name' => :'String',
        :'segment' => :'String',
        :'session_id' => :'String',
        :'tax_details' => :'Array<CustomerTaxDetailDTO>',
        :'verification_consent' => :'Boolean',
        :'kyc_mode' => :'String',
        :'parent_customer_hash_id' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'AddCustomerRequestDTO'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NiumClient::AddCustomerChildHasParent` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NiumClient::AddCustomerChildHasParent`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'additional_info')
        if (value = attributes[:'additional_info']).is_a?(Hash)
          self.additional_info = value
        end
      end

      if attributes.key?(:'billing_address1')
        self.billing_address1 = attributes[:'billing_address1']
      end

      if attributes.key?(:'billing_address2')
        self.billing_address2 = attributes[:'billing_address2']
      end

      if attributes.key?(:'billing_city')
        self.billing_city = attributes[:'billing_city']
      end

      if attributes.key?(:'billing_country')
        self.billing_country = attributes[:'billing_country']
      end

      if attributes.key?(:'billing_landmark')
        self.billing_landmark = attributes[:'billing_landmark']
      end

      if attributes.key?(:'billing_state')
        self.billing_state = attributes[:'billing_state']
      end

      if attributes.key?(:'billing_zip_code')
        self.billing_zip_code = attributes[:'billing_zip_code']
      end

      if attributes.key?(:'compliance_level')
        self.compliance_level = attributes[:'compliance_level']
      end

      if attributes.key?(:'correspondence_address1')
        self.correspondence_address1 = attributes[:'correspondence_address1']
      end

      if attributes.key?(:'correspondence_address2')
        self.correspondence_address2 = attributes[:'correspondence_address2']
      end

      if attributes.key?(:'correspondence_city')
        self.correspondence_city = attributes[:'correspondence_city']
      end

      if attributes.key?(:'correspondence_country')
        self.correspondence_country = attributes[:'correspondence_country']
      end

      if attributes.key?(:'correspondence_landmark')
        self.correspondence_landmark = attributes[:'correspondence_landmark']
      end

      if attributes.key?(:'correspondence_state')
        self.correspondence_state = attributes[:'correspondence_state']
      end

      if attributes.key?(:'correspondence_zip_code')
        self.correspondence_zip_code = attributes[:'correspondence_zip_code']
      end

      if attributes.key?(:'country_code')
        self.country_code = attributes[:'country_code']
      end

      if attributes.key?(:'country_ip')
        self.country_ip = attributes[:'country_ip']
      end

      if attributes.key?(:'country_of_birth')
        self.country_of_birth = attributes[:'country_of_birth']
      end

      if attributes.key?(:'customer_hash_id')
        self.customer_hash_id = attributes[:'customer_hash_id']
      end

      if attributes.key?(:'date_of_birth')
        self.date_of_birth = attributes[:'date_of_birth']
      end

      if attributes.key?(:'delivery_address1')
        self.delivery_address1 = attributes[:'delivery_address1']
      end

      if attributes.key?(:'delivery_address2')
        self.delivery_address2 = attributes[:'delivery_address2']
      end

      if attributes.key?(:'delivery_city')
        self.delivery_city = attributes[:'delivery_city']
      end

      if attributes.key?(:'delivery_country')
        self.delivery_country = attributes[:'delivery_country']
      end

      if attributes.key?(:'delivery_landmark')
        self.delivery_landmark = attributes[:'delivery_landmark']
      end

      if attributes.key?(:'delivery_state')
        self.delivery_state = attributes[:'delivery_state']
      end

      if attributes.key?(:'delivery_zip_code')
        self.delivery_zip_code = attributes[:'delivery_zip_code']
      end

      if attributes.key?(:'designation')
        self.designation = attributes[:'designation']
      end

      if attributes.key?(:'device_info')
        self.device_info = attributes[:'device_info']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'employee_id')
        self.employee_id = attributes[:'employee_id']
      end

      if attributes.key?(:'estimated_monthly_funding')
        self.estimated_monthly_funding = attributes[:'estimated_monthly_funding']
      end

      if attributes.key?(:'estimated_monthly_funding_currency')
        self.estimated_monthly_funding_currency = attributes[:'estimated_monthly_funding_currency']
      end

      if attributes.key?(:'expected_countries_to_send_receive_from')
        if (value = attributes[:'expected_countries_to_send_receive_from']).is_a?(Array)
          self.expected_countries_to_send_receive_from = value
        end
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.key?(:'gender')
        self.gender = attributes[:'gender']
      end

      if attributes.key?(:'identification_doc')
        if (value = attributes[:'identification_doc']).is_a?(Array)
          self.identification_doc = value
        end
      end

      if attributes.key?(:'intended_use_of_account')
        self.intended_use_of_account = attributes[:'intended_use_of_account']
      end

      if attributes.key?(:'international_payments_supported')
        self.international_payments_supported = attributes[:'international_payments_supported']
      end

      if attributes.key?(:'ip_address')
        self.ip_address = attributes[:'ip_address']
      end

      if attributes.key?(:'is_tnc_accepted')
        self.is_tnc_accepted = attributes[:'is_tnc_accepted']
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.key?(:'middle_name')
        self.middle_name = attributes[:'middle_name']
      end

      if attributes.key?(:'mobile')
        self.mobile = attributes[:'mobile']
      end

      if attributes.key?(:'nationality')
        self.nationality = attributes[:'nationality']
      end

      if attributes.key?(:'native_language_name')
        self.native_language_name = attributes[:'native_language_name']
      end

      if attributes.key?(:'pep')
        self.pep = attributes[:'pep']
      end

      if attributes.key?(:'preferred_name')
        self.preferred_name = attributes[:'preferred_name']
      end

      if attributes.key?(:'segment')
        self.segment = attributes[:'segment']
      end

      if attributes.key?(:'session_id')
        self.session_id = attributes[:'session_id']
      end

      if attributes.key?(:'tax_details')
        if (value = attributes[:'tax_details']).is_a?(Array)
          self.tax_details = value
        end
      end

      if attributes.key?(:'verification_consent')
        self.verification_consent = attributes[:'verification_consent']
      end

      if attributes.key?(:'kyc_mode')
        self.kyc_mode = attributes[:'kyc_mode']
      end

      if attributes.key?(:'parent_customer_hash_id')
        self.parent_customer_hash_id = attributes[:'parent_customer_hash_id']
      else
        self.parent_customer_hash_id = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @parent_customer_hash_id.nil?
        invalid_properties.push('invalid value for "parent_customer_hash_id", parent_customer_hash_id cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      compliance_level_validator = EnumAttributeValidator.new('String', ["SCREENING", "SCREENING_KYC"])
      return false unless compliance_level_validator.valid?(@compliance_level)
      estimated_monthly_funding_validator = EnumAttributeValidator.new('String', ["MF001", "MF002", "MF003", "MF004", "MF005"])
      return false unless estimated_monthly_funding_validator.valid?(@estimated_monthly_funding)
      gender_validator = EnumAttributeValidator.new('String', ["Male", "Female", "Others"])
      return false unless gender_validator.valid?(@gender)
      intended_use_of_account_validator = EnumAttributeValidator.new('String', ["IU100", "IU101", "IU102", "IU103", "IU104", "IU105", "IU106", "IU107", "IU108", "IU109"])
      return false unless intended_use_of_account_validator.valid?(@intended_use_of_account)
      kyc_mode_validator = EnumAttributeValidator.new('String', ["E_KYC", "MANUAL_KYC", "SCREENING", "E_DOC_VERIFY"])
      return false unless kyc_mode_validator.valid?(@kyc_mode)
      return false if @parent_customer_hash_id.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] compliance_level Object to be assigned
    def compliance_level=(compliance_level)
      validator = EnumAttributeValidator.new('String', ["SCREENING", "SCREENING_KYC"])
      unless validator.valid?(compliance_level)
        fail ArgumentError, "invalid value for \"compliance_level\", must be one of #{validator.allowable_values}."
      end
      @compliance_level = compliance_level
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] estimated_monthly_funding Object to be assigned
    def estimated_monthly_funding=(estimated_monthly_funding)
      validator = EnumAttributeValidator.new('String', ["MF001", "MF002", "MF003", "MF004", "MF005"])
      unless validator.valid?(estimated_monthly_funding)
        fail ArgumentError, "invalid value for \"estimated_monthly_funding\", must be one of #{validator.allowable_values}."
      end
      @estimated_monthly_funding = estimated_monthly_funding
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gender Object to be assigned
    def gender=(gender)
      validator = EnumAttributeValidator.new('String', ["Male", "Female", "Others"])
      unless validator.valid?(gender)
        fail ArgumentError, "invalid value for \"gender\", must be one of #{validator.allowable_values}."
      end
      @gender = gender
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] intended_use_of_account Object to be assigned
    def intended_use_of_account=(intended_use_of_account)
      validator = EnumAttributeValidator.new('String', ["IU100", "IU101", "IU102", "IU103", "IU104", "IU105", "IU106", "IU107", "IU108", "IU109"])
      unless validator.valid?(intended_use_of_account)
        fail ArgumentError, "invalid value for \"intended_use_of_account\", must be one of #{validator.allowable_values}."
      end
      @intended_use_of_account = intended_use_of_account
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] kyc_mode Object to be assigned
    def kyc_mode=(kyc_mode)
      validator = EnumAttributeValidator.new('String', ["E_KYC", "MANUAL_KYC", "SCREENING", "E_DOC_VERIFY"])
      unless validator.valid?(kyc_mode)
        fail ArgumentError, "invalid value for \"kyc_mode\", must be one of #{validator.allowable_values}."
      end
      @kyc_mode = kyc_mode
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          tags == o.tags &&
          additional_info == o.additional_info &&
          billing_address1 == o.billing_address1 &&
          billing_address2 == o.billing_address2 &&
          billing_city == o.billing_city &&
          billing_country == o.billing_country &&
          billing_landmark == o.billing_landmark &&
          billing_state == o.billing_state &&
          billing_zip_code == o.billing_zip_code &&
          compliance_level == o.compliance_level &&
          correspondence_address1 == o.correspondence_address1 &&
          correspondence_address2 == o.correspondence_address2 &&
          correspondence_city == o.correspondence_city &&
          correspondence_country == o.correspondence_country &&
          correspondence_landmark == o.correspondence_landmark &&
          correspondence_state == o.correspondence_state &&
          correspondence_zip_code == o.correspondence_zip_code &&
          country_code == o.country_code &&
          country_ip == o.country_ip &&
          country_of_birth == o.country_of_birth &&
          customer_hash_id == o.customer_hash_id &&
          date_of_birth == o.date_of_birth &&
          delivery_address1 == o.delivery_address1 &&
          delivery_address2 == o.delivery_address2 &&
          delivery_city == o.delivery_city &&
          delivery_country == o.delivery_country &&
          delivery_landmark == o.delivery_landmark &&
          delivery_state == o.delivery_state &&
          delivery_zip_code == o.delivery_zip_code &&
          designation == o.designation &&
          device_info == o.device_info &&
          email == o.email &&
          employee_id == o.employee_id &&
          estimated_monthly_funding == o.estimated_monthly_funding &&
          estimated_monthly_funding_currency == o.estimated_monthly_funding_currency &&
          expected_countries_to_send_receive_from == o.expected_countries_to_send_receive_from &&
          first_name == o.first_name &&
          gender == o.gender &&
          identification_doc == o.identification_doc &&
          intended_use_of_account == o.intended_use_of_account &&
          international_payments_supported == o.international_payments_supported &&
          ip_address == o.ip_address &&
          is_tnc_accepted == o.is_tnc_accepted &&
          last_name == o.last_name &&
          middle_name == o.middle_name &&
          mobile == o.mobile &&
          nationality == o.nationality &&
          native_language_name == o.native_language_name &&
          pep == o.pep &&
          preferred_name == o.preferred_name &&
          segment == o.segment &&
          session_id == o.session_id &&
          tax_details == o.tax_details &&
          verification_consent == o.verification_consent &&
          kyc_mode == o.kyc_mode &&
          parent_customer_hash_id == o.parent_customer_hash_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [tags, additional_info, billing_address1, billing_address2, billing_city, billing_country, billing_landmark, billing_state, billing_zip_code, compliance_level, correspondence_address1, correspondence_address2, correspondence_city, correspondence_country, correspondence_landmark, correspondence_state, correspondence_zip_code, country_code, country_ip, country_of_birth, customer_hash_id, date_of_birth, delivery_address1, delivery_address2, delivery_city, delivery_country, delivery_landmark, delivery_state, delivery_zip_code, designation, device_info, email, employee_id, estimated_monthly_funding, estimated_monthly_funding_currency, expected_countries_to_send_receive_from, first_name, gender, identification_doc, intended_use_of_account, international_payments_supported, ip_address, is_tnc_accepted, last_name, middle_name, mobile, nationality, native_language_name, pep, preferred_name, segment, session_id, tax_details, verification_consent, kyc_mode, parent_customer_hash_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NiumClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
