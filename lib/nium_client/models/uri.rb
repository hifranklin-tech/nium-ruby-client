=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'date'
require 'time'

module NiumClient
  class URI
    attr_accessor :host

    attr_accessor :absolute

    attr_accessor :authority

    attr_accessor :fragment

    attr_accessor :opaque

    attr_accessor :path

    attr_accessor :port

    attr_accessor :query

    attr_accessor :raw_authority

    attr_accessor :raw_fragment

    attr_accessor :raw_path

    attr_accessor :raw_query

    attr_accessor :raw_scheme_specific_part

    attr_accessor :raw_user_info

    attr_accessor :scheme

    attr_accessor :scheme_specific_part

    attr_accessor :user_info

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'host' => :'host',
        :'absolute' => :'absolute',
        :'authority' => :'authority',
        :'fragment' => :'fragment',
        :'opaque' => :'opaque',
        :'path' => :'path',
        :'port' => :'port',
        :'query' => :'query',
        :'raw_authority' => :'rawAuthority',
        :'raw_fragment' => :'rawFragment',
        :'raw_path' => :'rawPath',
        :'raw_query' => :'rawQuery',
        :'raw_scheme_specific_part' => :'rawSchemeSpecificPart',
        :'raw_user_info' => :'rawUserInfo',
        :'scheme' => :'scheme',
        :'scheme_specific_part' => :'schemeSpecificPart',
        :'user_info' => :'userInfo'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'host' => :'String',
        :'absolute' => :'Boolean',
        :'authority' => :'String',
        :'fragment' => :'String',
        :'opaque' => :'Boolean',
        :'path' => :'String',
        :'port' => :'Integer',
        :'query' => :'String',
        :'raw_authority' => :'String',
        :'raw_fragment' => :'String',
        :'raw_path' => :'String',
        :'raw_query' => :'String',
        :'raw_scheme_specific_part' => :'String',
        :'raw_user_info' => :'String',
        :'scheme' => :'String',
        :'scheme_specific_part' => :'String',
        :'user_info' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NiumClient::URI` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NiumClient::URI`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'host')
        self.host = attributes[:'host']
      end

      if attributes.key?(:'absolute')
        self.absolute = attributes[:'absolute']
      end

      if attributes.key?(:'authority')
        self.authority = attributes[:'authority']
      end

      if attributes.key?(:'fragment')
        self.fragment = attributes[:'fragment']
      end

      if attributes.key?(:'opaque')
        self.opaque = attributes[:'opaque']
      end

      if attributes.key?(:'path')
        self.path = attributes[:'path']
      end

      if attributes.key?(:'port')
        self.port = attributes[:'port']
      end

      if attributes.key?(:'query')
        self.query = attributes[:'query']
      end

      if attributes.key?(:'raw_authority')
        self.raw_authority = attributes[:'raw_authority']
      end

      if attributes.key?(:'raw_fragment')
        self.raw_fragment = attributes[:'raw_fragment']
      end

      if attributes.key?(:'raw_path')
        self.raw_path = attributes[:'raw_path']
      end

      if attributes.key?(:'raw_query')
        self.raw_query = attributes[:'raw_query']
      end

      if attributes.key?(:'raw_scheme_specific_part')
        self.raw_scheme_specific_part = attributes[:'raw_scheme_specific_part']
      end

      if attributes.key?(:'raw_user_info')
        self.raw_user_info = attributes[:'raw_user_info']
      end

      if attributes.key?(:'scheme')
        self.scheme = attributes[:'scheme']
      end

      if attributes.key?(:'scheme_specific_part')
        self.scheme_specific_part = attributes[:'scheme_specific_part']
      end

      if attributes.key?(:'user_info')
        self.user_info = attributes[:'user_info']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          host == o.host &&
          absolute == o.absolute &&
          authority == o.authority &&
          fragment == o.fragment &&
          opaque == o.opaque &&
          path == o.path &&
          port == o.port &&
          query == o.query &&
          raw_authority == o.raw_authority &&
          raw_fragment == o.raw_fragment &&
          raw_path == o.raw_path &&
          raw_query == o.raw_query &&
          raw_scheme_specific_part == o.raw_scheme_specific_part &&
          raw_user_info == o.raw_user_info &&
          scheme == o.scheme &&
          scheme_specific_part == o.scheme_specific_part &&
          user_info == o.user_info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [host, absolute, authority, fragment, opaque, path, port, query, raw_authority, raw_fragment, raw_path, raw_query, raw_scheme_specific_part, raw_user_info, scheme, scheme_specific_part, user_info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NiumClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
