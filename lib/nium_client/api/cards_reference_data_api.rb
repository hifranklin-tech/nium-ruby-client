=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module NiumClient
  class CardsReferenceDataApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Reference Exchange Rate
    # This API allows you to get the reference exchange rate.
    # @param card_scheme [String] This field accepts the card scheme provider name: Visa Mastercard
    # @param client_hash_id [String] Unique customer identifier generated on customer creation.
    # @param from_amount [Float] From Amount also known as transaction amount that will be converted from the fromCurrency and to the toCurrency.
    # @param from_currency [String] This field contains the 3-letter [ISO-4217 currency code](doc:currency-and-country-codes) of the transaction currency. Should be one of the applicable EEA currencies (EUR, BGN, HRK, CZK, DKK, HUF, PLN, RON, SEK, GBP, ISK, CHF and NOK).
    # @param to_currency [String] This field contains the 3-letter [ISO-4217 currency code](doc:currency-and-country-codes) of the cardholder billing currency. Should be one of the applicable EEA currencies (EUR, BGN, HRK, CZK, DKK, HUF, PLN, RON, SEK, GBP, ISK, CHF and NOK)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [ReferenceRateResponseDto]
    def reference_exchange_rate(card_scheme, client_hash_id, from_amount, from_currency, to_currency, opts = {})
      data, _status_code, _headers = reference_exchange_rate_with_http_info(card_scheme, client_hash_id, from_amount, from_currency, to_currency, opts)
      data
    end

    # Reference Exchange Rate
    # This API allows you to get the reference exchange rate.
    # @param card_scheme [String] This field accepts the card scheme provider name: Visa Mastercard
    # @param client_hash_id [String] Unique customer identifier generated on customer creation.
    # @param from_amount [Float] From Amount also known as transaction amount that will be converted from the fromCurrency and to the toCurrency.
    # @param from_currency [String] This field contains the 3-letter [ISO-4217 currency code](doc:currency-and-country-codes) of the transaction currency. Should be one of the applicable EEA currencies (EUR, BGN, HRK, CZK, DKK, HUF, PLN, RON, SEK, GBP, ISK, CHF and NOK).
    # @param to_currency [String] This field contains the 3-letter [ISO-4217 currency code](doc:currency-and-country-codes) of the cardholder billing currency. Should be one of the applicable EEA currencies (EUR, BGN, HRK, CZK, DKK, HUF, PLN, RON, SEK, GBP, ISK, CHF and NOK)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [Array<(ReferenceRateResponseDto, Integer, Hash)>] ReferenceRateResponseDto data, response status code and response headers
    def reference_exchange_rate_with_http_info(card_scheme, client_hash_id, from_amount, from_currency, to_currency, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsReferenceDataApi.reference_exchange_rate ...'
      end
      # verify the required parameter 'card_scheme' is set
      if @api_client.config.client_side_validation && card_scheme.nil?
        fail ArgumentError, "Missing the required parameter 'card_scheme' when calling CardsReferenceDataApi.reference_exchange_rate"
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling CardsReferenceDataApi.reference_exchange_rate"
      end
      # verify the required parameter 'from_amount' is set
      if @api_client.config.client_side_validation && from_amount.nil?
        fail ArgumentError, "Missing the required parameter 'from_amount' when calling CardsReferenceDataApi.reference_exchange_rate"
      end
      # verify the required parameter 'from_currency' is set
      if @api_client.config.client_side_validation && from_currency.nil?
        fail ArgumentError, "Missing the required parameter 'from_currency' when calling CardsReferenceDataApi.reference_exchange_rate"
      end
      # verify the required parameter 'to_currency' is set
      if @api_client.config.client_side_validation && to_currency.nil?
        fail ArgumentError, "Missing the required parameter 'to_currency' when calling CardsReferenceDataApi.reference_exchange_rate"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/referenceRate'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cardScheme'] = card_scheme
      query_params[:'fromAmount'] = from_amount
      query_params[:'fromCurrency'] = from_currency
      query_params[:'toCurrency'] = to_currency

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReferenceRateResponseDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"CardsReferenceDataApi.reference_exchange_rate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsReferenceDataApi#reference_exchange_rate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
