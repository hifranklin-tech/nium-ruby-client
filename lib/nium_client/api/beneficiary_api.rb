=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module NiumClient
  class BeneficiaryApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Account verification (Confirmation of Payee)
    # This API allows you to verify a beneficiary account details. > > ℹ️ INFO   >This API only supports account verification for certain destination corridors. >Refer to the   [Account verification user guide](/apis/docs/account-verification#supported-corridors-for-account-verification) for details.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param account_validation_request_dto [AccountValidationRequestDTO] accountValidationRequestDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [AccountValidationResponseDTO]
    def account_verification(client_hash_id, customer_hash_id, account_validation_request_dto, opts = {})
      data, _status_code, _headers = account_verification_with_http_info(client_hash_id, customer_hash_id, account_validation_request_dto, opts)
      data
    end

    # Account verification (Confirmation of Payee)
    # This API allows you to verify a beneficiary account details. &gt; &gt; ℹ️ INFO   &gt;This API only supports account verification for certain destination corridors. &gt;Refer to the   [Account verification user guide](/apis/docs/account-verification#supported-corridors-for-account-verification) for details.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param account_validation_request_dto [AccountValidationRequestDTO] accountValidationRequestDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [Array<(AccountValidationResponseDTO, Integer, Hash)>] AccountValidationResponseDTO data, response status code and response headers
    def account_verification_with_http_info(client_hash_id, customer_hash_id, account_validation_request_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BeneficiaryApi.account_verification ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling BeneficiaryApi.account_verification"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling BeneficiaryApi.account_verification"
      end
      # verify the required parameter 'account_validation_request_dto' is set
      if @api_client.config.client_side_validation && account_validation_request_dto.nil?
        fail ArgumentError, "Missing the required parameter 'account_validation_request_dto' when calling BeneficiaryApi.account_verification"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/accountVerification'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(account_validation_request_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'AccountValidationResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"BeneficiaryApi.account_verification",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeneficiaryApi#account_verification\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Beneficiary
    # This API allows you to add a beneficiary to transfer funds.  >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Add Beneficiary V2](/apis/reference/addbeneficiaryv2) is the latest version of this API.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param add_beneficiary_request [AddBeneficiaryRequest] addBeneficiaryRequest
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Resource]
    def add_beneficiary(client_hash_id, customer_hash_id, add_beneficiary_request, opts = {})
      data, _status_code, _headers = add_beneficiary_with_http_info(client_hash_id, customer_hash_id, add_beneficiary_request, opts)
      data
    end

    # Add Beneficiary
    # This API allows you to add a beneficiary to transfer funds.  &gt;⚠️ WARNING   &gt;This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Add Beneficiary V2](/apis/reference/addbeneficiaryv2) is the latest version of this API.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param add_beneficiary_request [AddBeneficiaryRequest] addBeneficiaryRequest
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(Resource, Integer, Hash)>] Resource data, response status code and response headers
    def add_beneficiary_with_http_info(client_hash_id, customer_hash_id, add_beneficiary_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BeneficiaryApi.add_beneficiary ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling BeneficiaryApi.add_beneficiary"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling BeneficiaryApi.add_beneficiary"
      end
      # verify the required parameter 'add_beneficiary_request' is set
      if @api_client.config.client_side_validation && add_beneficiary_request.nil?
        fail ArgumentError, "Missing the required parameter 'add_beneficiary_request' when calling BeneficiaryApi.add_beneficiary"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/beneficiaries'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_beneficiary_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Resource'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"BeneficiaryApi.add_beneficiary",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeneficiaryApi#add_beneficiary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Beneficiary V2
    # This API allows you to add a beneficiary to transfer funds.   > ⚠️ IMPORTANT    Some fields are conditional based on corridors. Use the [Beneficiary Validation Schema V2](/apis/reference/beneficiaryvalidationschemav2) with the currency code and payout method to determine if a field is required or not.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param add_beneficiary_request_dto [AddBeneficiaryRequestDTO] addBeneficiaryRequestDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [BeneficiaryResponseDTO]
    def add_beneficiary_v2(client_hash_id, customer_hash_id, add_beneficiary_request_dto, opts = {})
      data, _status_code, _headers = add_beneficiary_v2_with_http_info(client_hash_id, customer_hash_id, add_beneficiary_request_dto, opts)
      data
    end

    # Add Beneficiary V2
    # This API allows you to add a beneficiary to transfer funds.   &gt; ⚠️ IMPORTANT    Some fields are conditional based on corridors. Use the [Beneficiary Validation Schema V2](/apis/reference/beneficiaryvalidationschemav2) with the currency code and payout method to determine if a field is required or not.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param add_beneficiary_request_dto [AddBeneficiaryRequestDTO] addBeneficiaryRequestDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(BeneficiaryResponseDTO, Integer, Hash)>] BeneficiaryResponseDTO data, response status code and response headers
    def add_beneficiary_v2_with_http_info(client_hash_id, customer_hash_id, add_beneficiary_request_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BeneficiaryApi.add_beneficiary_v2 ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling BeneficiaryApi.add_beneficiary_v2"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling BeneficiaryApi.add_beneficiary_v2"
      end
      # verify the required parameter 'add_beneficiary_request_dto' is set
      if @api_client.config.client_side_validation && add_beneficiary_request_dto.nil?
        fail ArgumentError, "Missing the required parameter 'add_beneficiary_request_dto' when calling BeneficiaryApi.add_beneficiary_v2"
      end
      # resource path
      local_var_path = '/api/v2/client/{clientHashId}/customer/{customerHashId}/beneficiaries'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_beneficiary_request_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'BeneficiaryResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"BeneficiaryApi.add_beneficiary_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeneficiaryApi#add_beneficiary_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Beneficiary Details
    # This API allows you to fetch beneficiary details of an individual beneficiary.  >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Beneficiary Details V2](/apis/reference/beneficiarydetailsv2) is the latest version of this API.
    # @param beneficiary_hash_id [String] Unique beneficiary hash ID.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Resource]
    def beneficiary_details(beneficiary_hash_id, client_hash_id, customer_hash_id, opts = {})
      data, _status_code, _headers = beneficiary_details_with_http_info(beneficiary_hash_id, client_hash_id, customer_hash_id, opts)
      data
    end

    # Beneficiary Details
    # This API allows you to fetch beneficiary details of an individual beneficiary.  &gt;⚠️ WARNING   &gt;This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Beneficiary Details V2](/apis/reference/beneficiarydetailsv2) is the latest version of this API.
    # @param beneficiary_hash_id [String] Unique beneficiary hash ID.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(Resource, Integer, Hash)>] Resource data, response status code and response headers
    def beneficiary_details_with_http_info(beneficiary_hash_id, client_hash_id, customer_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BeneficiaryApi.beneficiary_details ...'
      end
      # verify the required parameter 'beneficiary_hash_id' is set
      if @api_client.config.client_side_validation && beneficiary_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'beneficiary_hash_id' when calling BeneficiaryApi.beneficiary_details"
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling BeneficiaryApi.beneficiary_details"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling BeneficiaryApi.beneficiary_details"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/beneficiaries/{beneficiaryHashId}'.sub('{' + 'beneficiaryHashId' + '}', CGI.escape(beneficiary_hash_id.to_s)).sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Resource'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"BeneficiaryApi.beneficiary_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeneficiaryApi#beneficiary_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Beneficiary Details V2
    # This API allows you to fetch beneficiary details of an individual beneficiary.
    # @param beneficiary_hash_id [String] Unique beneficiary hash ID.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [BeneficiaryResponseDTO]
    def beneficiary_details_v2(beneficiary_hash_id, client_hash_id, customer_hash_id, opts = {})
      data, _status_code, _headers = beneficiary_details_v2_with_http_info(beneficiary_hash_id, client_hash_id, customer_hash_id, opts)
      data
    end

    # Beneficiary Details V2
    # This API allows you to fetch beneficiary details of an individual beneficiary.
    # @param beneficiary_hash_id [String] Unique beneficiary hash ID.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(BeneficiaryResponseDTO, Integer, Hash)>] BeneficiaryResponseDTO data, response status code and response headers
    def beneficiary_details_v2_with_http_info(beneficiary_hash_id, client_hash_id, customer_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BeneficiaryApi.beneficiary_details_v2 ...'
      end
      # verify the required parameter 'beneficiary_hash_id' is set
      if @api_client.config.client_side_validation && beneficiary_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'beneficiary_hash_id' when calling BeneficiaryApi.beneficiary_details_v2"
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling BeneficiaryApi.beneficiary_details_v2"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling BeneficiaryApi.beneficiary_details_v2"
      end
      # resource path
      local_var_path = '/api/v2/client/{clientHashId}/customer/{customerHashId}/beneficiaries/{beneficiaryHashId}'.sub('{' + 'beneficiaryHashId' + '}', CGI.escape(beneficiary_hash_id.to_s)).sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BeneficiaryResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"BeneficiaryApi.beneficiary_details_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeneficiaryApi#beneficiary_details_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Beneficiary List
    # This API allows you to fetch beneficiary details.  >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Beneficiary List V2](/apis/reference/beneficiarylistv2) is the latest version of this API.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Hash<String, String>>] :parameters parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Resource]
    def beneficiary_list(client_hash_id, customer_hash_id, opts = {})
      data, _status_code, _headers = beneficiary_list_with_http_info(client_hash_id, customer_hash_id, opts)
      data
    end

    # Beneficiary List
    # This API allows you to fetch beneficiary details.  &gt;⚠️ WARNING   &gt;This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Beneficiary List V2](/apis/reference/beneficiarylistv2) is the latest version of this API.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Hash<String, String>>] :parameters parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(Resource, Integer, Hash)>] Resource data, response status code and response headers
    def beneficiary_list_with_http_info(client_hash_id, customer_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BeneficiaryApi.beneficiary_list ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling BeneficiaryApi.beneficiary_list"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling BeneficiaryApi.beneficiary_list"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/beneficiaries'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'parameters'] = @api_client.build_collection_param(opts[:'parameters'], :multi) if !opts[:'parameters'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Resource'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"BeneficiaryApi.beneficiary_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeneficiaryApi#beneficiary_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Beneficiary List V2
    # This API allows you to fetch beneficiary details.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Hash<String, String>>] :parameters parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<BeneficiaryResponseDTO>]
    def beneficiary_list_v2(client_hash_id, customer_hash_id, opts = {})
      data, _status_code, _headers = beneficiary_list_v2_with_http_info(client_hash_id, customer_hash_id, opts)
      data
    end

    # Beneficiary List V2
    # This API allows you to fetch beneficiary details.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Hash<String, String>>] :parameters parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(Array<BeneficiaryResponseDTO>, Integer, Hash)>] Array<BeneficiaryResponseDTO> data, response status code and response headers
    def beneficiary_list_v2_with_http_info(client_hash_id, customer_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BeneficiaryApi.beneficiary_list_v2 ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling BeneficiaryApi.beneficiary_list_v2"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling BeneficiaryApi.beneficiary_list_v2"
      end
      # resource path
      local_var_path = '/api/v2/client/{clientHashId}/customer/{customerHashId}/beneficiaries'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'parameters'] = @api_client.build_collection_param(opts[:'parameters'], :multi) if !opts[:'parameters'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<BeneficiaryResponseDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"BeneficiaryApi.beneficiary_list_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeneficiaryApi#beneficiary_list_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Beneficiary Validation Schema
    # This API will allow you to fetch the validation schema for beneficiary validation details.  >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Beneficiary Validation Schema V2](/apis/reference/beneficiaryvalidationschemav2) is the latest version of this API.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param currency_code [String] This field accepts the 3-letter [ISO-4217 currency code](doc:currency-and-country-codes).
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :payout_method This field can accept the different modes of payout.This field can accept one of the following values: 1.LOCAL 2.SWIFT 3.WALLET Default value of the parameter is LOCAL.
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Resource]
    def beneficiary_validation_schema(client_hash_id, currency_code, customer_hash_id, opts = {})
      data, _status_code, _headers = beneficiary_validation_schema_with_http_info(client_hash_id, currency_code, customer_hash_id, opts)
      data
    end

    # Beneficiary Validation Schema
    # This API will allow you to fetch the validation schema for beneficiary validation details.  &gt;⚠️ WARNING   &gt;This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Beneficiary Validation Schema V2](/apis/reference/beneficiaryvalidationschemav2) is the latest version of this API.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param currency_code [String] This field accepts the 3-letter [ISO-4217 currency code](doc:currency-and-country-codes).
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :payout_method This field can accept the different modes of payout.This field can accept one of the following values: 1.LOCAL 2.SWIFT 3.WALLET Default value of the parameter is LOCAL.
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(Resource, Integer, Hash)>] Resource data, response status code and response headers
    def beneficiary_validation_schema_with_http_info(client_hash_id, currency_code, customer_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BeneficiaryApi.beneficiary_validation_schema ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling BeneficiaryApi.beneficiary_validation_schema"
      end
      # verify the required parameter 'currency_code' is set
      if @api_client.config.client_side_validation && currency_code.nil?
        fail ArgumentError, "Missing the required parameter 'currency_code' when calling BeneficiaryApi.beneficiary_validation_schema"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling BeneficiaryApi.beneficiary_validation_schema"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/currency/{currencyCode}/validationSchemas'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'currencyCode' + '}', CGI.escape(currency_code.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'payoutMethod'] = opts[:'payout_method'] if !opts[:'payout_method'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Resource'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"BeneficiaryApi.beneficiary_validation_schema",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeneficiaryApi#beneficiary_validation_schema\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Beneficiary Validation Schema V2
    # This API will allow you to fetch the validation schema for beneficiary validation details.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param currency_code [String] This field accepts the 3-letter [ISO-4217 currency code](doc:currency-and-country-codes).
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :payout_method This field can accept the different modes of payout.
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [String]
    def beneficiary_validation_schema_v2(client_hash_id, currency_code, customer_hash_id, opts = {})
      data, _status_code, _headers = beneficiary_validation_schema_v2_with_http_info(client_hash_id, currency_code, customer_hash_id, opts)
      data
    end

    # Beneficiary Validation Schema V2
    # This API will allow you to fetch the validation schema for beneficiary validation details.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param currency_code [String] This field accepts the 3-letter [ISO-4217 currency code](doc:currency-and-country-codes).
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :payout_method This field can accept the different modes of payout.
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def beneficiary_validation_schema_v2_with_http_info(client_hash_id, currency_code, customer_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BeneficiaryApi.beneficiary_validation_schema_v2 ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling BeneficiaryApi.beneficiary_validation_schema_v2"
      end
      # verify the required parameter 'currency_code' is set
      if @api_client.config.client_side_validation && currency_code.nil?
        fail ArgumentError, "Missing the required parameter 'currency_code' when calling BeneficiaryApi.beneficiary_validation_schema_v2"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling BeneficiaryApi.beneficiary_validation_schema_v2"
      end
      # resource path
      local_var_path = '/api/v2/client/{clientHashId}/customer/{customerHashId}/currency/{currencyCode}/validationSchemas'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'currencyCode' + '}', CGI.escape(currency_code.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'payoutMethod'] = opts[:'payout_method'] if !opts[:'payout_method'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"BeneficiaryApi.beneficiary_validation_schema_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeneficiaryApi#beneficiary_validation_schema_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Confirmation of Payee (Previous version)
    # This API allows you to Validate Beneficiary Details.  >ℹ️ INFO   >This API only supports account verification for below destination corridors. >**For LOCAL payment method:** Vietnam (VN), Thailand (TH), India (IN), Pakistan(PK), Malaysia(MY), Indonesia (ID) >**For PROXY payment method:** Singapore (SG), India (IN), Malaysia(MY)
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param beneficiary_validation_request_dto [BeneficiaryValidationRequestDTO] beneficiaryValidationRequestDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [BeneficiaryValidationResponseDTO]
    def confirmationof_payee(client_hash_id, customer_hash_id, beneficiary_validation_request_dto, opts = {})
      data, _status_code, _headers = confirmationof_payee_with_http_info(client_hash_id, customer_hash_id, beneficiary_validation_request_dto, opts)
      data
    end

    # Confirmation of Payee (Previous version)
    # This API allows you to Validate Beneficiary Details.  &gt;ℹ️ INFO   &gt;This API only supports account verification for below destination corridors. &gt;**For LOCAL payment method:** Vietnam (VN), Thailand (TH), India (IN), Pakistan(PK), Malaysia(MY), Indonesia (ID) &gt;**For PROXY payment method:** Singapore (SG), India (IN), Malaysia(MY)
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param beneficiary_validation_request_dto [BeneficiaryValidationRequestDTO] beneficiaryValidationRequestDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(BeneficiaryValidationResponseDTO, Integer, Hash)>] BeneficiaryValidationResponseDTO data, response status code and response headers
    def confirmationof_payee_with_http_info(client_hash_id, customer_hash_id, beneficiary_validation_request_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BeneficiaryApi.confirmationof_payee ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling BeneficiaryApi.confirmationof_payee"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling BeneficiaryApi.confirmationof_payee"
      end
      # verify the required parameter 'beneficiary_validation_request_dto' is set
      if @api_client.config.client_side_validation && beneficiary_validation_request_dto.nil?
        fail ArgumentError, "Missing the required parameter 'beneficiary_validation_request_dto' when calling BeneficiaryApi.confirmationof_payee"
      end
      # resource path
      local_var_path = '/api/v2/client/{clientHashId}/customer/{customerHashId}/beneficiaries/validate'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(beneficiary_validation_request_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'BeneficiaryValidationResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"BeneficiaryApi.confirmationof_payee",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeneficiaryApi#confirmationof_payee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Beneficiary
    # This API allows you to delete a beneficiary.
    # @param beneficiary_hash_id [String] Unique beneficiary hash ID.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Resource]
    def delete_beneficiary(beneficiary_hash_id, client_hash_id, customer_hash_id, opts = {})
      data, _status_code, _headers = delete_beneficiary_with_http_info(beneficiary_hash_id, client_hash_id, customer_hash_id, opts)
      data
    end

    # Delete Beneficiary
    # This API allows you to delete a beneficiary.
    # @param beneficiary_hash_id [String] Unique beneficiary hash ID.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(Resource, Integer, Hash)>] Resource data, response status code and response headers
    def delete_beneficiary_with_http_info(beneficiary_hash_id, client_hash_id, customer_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BeneficiaryApi.delete_beneficiary ...'
      end
      # verify the required parameter 'beneficiary_hash_id' is set
      if @api_client.config.client_side_validation && beneficiary_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'beneficiary_hash_id' when calling BeneficiaryApi.delete_beneficiary"
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling BeneficiaryApi.delete_beneficiary"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling BeneficiaryApi.delete_beneficiary"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/beneficiaries/{beneficiaryHashId}'.sub('{' + 'beneficiaryHashId' + '}', CGI.escape(beneficiary_hash_id.to_s)).sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Resource'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"BeneficiaryApi.delete_beneficiary",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeneficiaryApi#delete_beneficiary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Beneficiary
    # This API allows you to update beneficiary details.
    # @param beneficiary_hash_id [String] Unique beneficiary hash ID.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @option opts [AddBeneficiaryRequest] :add_beneficiary_request Info:  Update Beneficiary API will be restricted when a remittance transaction for the beneficiary is Pending.
    # @return [Resource]
    def update_beneficiary(beneficiary_hash_id, client_hash_id, customer_hash_id, opts = {})
      data, _status_code, _headers = update_beneficiary_with_http_info(beneficiary_hash_id, client_hash_id, customer_hash_id, opts)
      data
    end

    # Update Beneficiary
    # This API allows you to update beneficiary details.
    # @param beneficiary_hash_id [String] Unique beneficiary hash ID.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @option opts [AddBeneficiaryRequest] :add_beneficiary_request Info:  Update Beneficiary API will be restricted when a remittance transaction for the beneficiary is Pending.
    # @return [Array<(Resource, Integer, Hash)>] Resource data, response status code and response headers
    def update_beneficiary_with_http_info(beneficiary_hash_id, client_hash_id, customer_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BeneficiaryApi.update_beneficiary ...'
      end
      # verify the required parameter 'beneficiary_hash_id' is set
      if @api_client.config.client_side_validation && beneficiary_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'beneficiary_hash_id' when calling BeneficiaryApi.update_beneficiary"
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling BeneficiaryApi.update_beneficiary"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling BeneficiaryApi.update_beneficiary"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/beneficiaries/{beneficiaryHashId}'.sub('{' + 'beneficiaryHashId' + '}', CGI.escape(beneficiary_hash_id.to_s)).sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'add_beneficiary_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Resource'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"BeneficiaryApi.update_beneficiary",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeneficiaryApi#update_beneficiary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Beneficiary V2
    # This API allows you to update beneficiary details.
    # @param beneficiary_hash_id [String] Unique beneficiary hash ID.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @option opts [UpdateBeneficiaryRequestDTO] :update_beneficiary_request_dto Info:  Update Beneficiary API will be restricted when a remittance transaction for the beneficiary is Pending.
    # @return [BeneficiaryResponseDTO]
    def update_beneficiary_v2(beneficiary_hash_id, client_hash_id, customer_hash_id, opts = {})
      data, _status_code, _headers = update_beneficiary_v2_with_http_info(beneficiary_hash_id, client_hash_id, customer_hash_id, opts)
      data
    end

    # Update Beneficiary V2
    # This API allows you to update beneficiary details.
    # @param beneficiary_hash_id [String] Unique beneficiary hash ID.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @option opts [UpdateBeneficiaryRequestDTO] :update_beneficiary_request_dto Info:  Update Beneficiary API will be restricted when a remittance transaction for the beneficiary is Pending.
    # @return [Array<(BeneficiaryResponseDTO, Integer, Hash)>] BeneficiaryResponseDTO data, response status code and response headers
    def update_beneficiary_v2_with_http_info(beneficiary_hash_id, client_hash_id, customer_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BeneficiaryApi.update_beneficiary_v2 ...'
      end
      # verify the required parameter 'beneficiary_hash_id' is set
      if @api_client.config.client_side_validation && beneficiary_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'beneficiary_hash_id' when calling BeneficiaryApi.update_beneficiary_v2"
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling BeneficiaryApi.update_beneficiary_v2"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling BeneficiaryApi.update_beneficiary_v2"
      end
      # resource path
      local_var_path = '/api/v2/client/{clientHashId}/customer/{customerHashId}/beneficiaries/{beneficiaryHashId}'.sub('{' + 'beneficiaryHashId' + '}', CGI.escape(beneficiary_hash_id.to_s)).sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_beneficiary_request_dto'])

      # return_type
      return_type = opts[:debug_return_type] || 'BeneficiaryResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"BeneficiaryApi.update_beneficiary_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeneficiaryApi#update_beneficiary_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
