=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module NiumClient
  class QuotesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Quote
    # This API creates an FX quote for a currency pair according to the desired lock period and conversion schedule. The FX rate provided by this API includes the Nium markup and can be utilized for any FX conversion within the quote's validity period.
    # @param client_hash_id [String] Unique identifier of the client.
    # @param quote_creation_request [QuoteCreationRequest] quoteCreationRequest
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [QuoteCreationResponse]
    def create_quote(client_hash_id, quote_creation_request, opts = {})
      data, _status_code, _headers = create_quote_with_http_info(client_hash_id, quote_creation_request, opts)
      data
    end

    # Create Quote
    # This API creates an FX quote for a currency pair according to the desired lock period and conversion schedule. The FX rate provided by this API includes the Nium markup and can be utilized for any FX conversion within the quote&#39;s validity period.
    # @param client_hash_id [String] Unique identifier of the client.
    # @param quote_creation_request [QuoteCreationRequest] quoteCreationRequest
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(QuoteCreationResponse, Integer, Hash)>] QuoteCreationResponse data, response status code and response headers
    def create_quote_with_http_info(client_hash_id, quote_creation_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuotesApi.create_quote ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling QuotesApi.create_quote"
      end
      if @api_client.config.client_side_validation && client_hash_id.to_s.length > 36
        fail ArgumentError, 'invalid value for "client_hash_id" when calling QuotesApi.create_quote, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && client_hash_id.to_s.length < 36
        fail ArgumentError, 'invalid value for "client_hash_id" when calling QuotesApi.create_quote, the character length must be great than or equal to 36.'
      end

      # verify the required parameter 'quote_creation_request' is set
      if @api_client.config.client_side_validation && quote_creation_request.nil?
        fail ArgumentError, "Missing the required parameter 'quote_creation_request' when calling QuotesApi.create_quote"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/quotes'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(quote_creation_request)

      # return_type
      return_type = opts[:debug_return_type] || 'QuoteCreationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"QuotesApi.create_quote",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuotesApi#create_quote\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch Quote by ID
    # This API allows to fetch a quote. A quote is used to identify the exchange rate, and associated markup and fees.
    # @param client_hash_id [String] Unique identifier of the client.
    # @param quote_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [QuoteCreationResponse]
    def fetch_quote(client_hash_id, quote_id, opts = {})
      data, _status_code, _headers = fetch_quote_with_http_info(client_hash_id, quote_id, opts)
      data
    end

    # Fetch Quote by ID
    # This API allows to fetch a quote. A quote is used to identify the exchange rate, and associated markup and fees.
    # @param client_hash_id [String] Unique identifier of the client.
    # @param quote_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(QuoteCreationResponse, Integer, Hash)>] QuoteCreationResponse data, response status code and response headers
    def fetch_quote_with_http_info(client_hash_id, quote_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuotesApi.fetch_quote ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling QuotesApi.fetch_quote"
      end
      if @api_client.config.client_side_validation && client_hash_id.to_s.length > 36
        fail ArgumentError, 'invalid value for "client_hash_id" when calling QuotesApi.fetch_quote, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && client_hash_id.to_s.length < 36
        fail ArgumentError, 'invalid value for "client_hash_id" when calling QuotesApi.fetch_quote, the character length must be great than or equal to 36.'
      end

      # verify the required parameter 'quote_id' is set
      if @api_client.config.client_side_validation && quote_id.nil?
        fail ArgumentError, "Missing the required parameter 'quote_id' when calling QuotesApi.fetch_quote"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/quotes/{quoteId}'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'quoteId' + '}', CGI.escape(quote_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'QuoteCreationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"QuotesApi.fetch_quote",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuotesApi#fetch_quote\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
