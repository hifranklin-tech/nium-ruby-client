=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module NiumClient
  class ClientPrefundAccountApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Client Prefund Balances
    # This API allows you to fetch the available prefund balance for a client.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<AccountResponseDTO>]
    def client_prefund_balances(client_hash_id, opts = {})
      data, _status_code, _headers = client_prefund_balances_with_http_info(client_hash_id, opts)
      data
    end

    # Client Prefund Balances
    # This API allows you to fetch the available prefund balance for a client.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(Array<AccountResponseDTO>, Integer, Hash)>] Array<AccountResponseDTO> data, response status code and response headers
    def client_prefund_balances_with_http_info(client_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientPrefundAccountApi.client_prefund_balances ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling ClientPrefundAccountApi.client_prefund_balances"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/balances'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AccountResponseDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"ClientPrefundAccountApi.client_prefund_balances",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientPrefundAccountApi#client_prefund_balances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Client Prefund Request
    # This API allows our clients to raise a prefund request in the system.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param prefund_request_dto [PrefundRequestDTO] prefundRequestDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [ClientPrefundResponseDTO]
    def client_prefund_request(client_hash_id, prefund_request_dto, opts = {})
      data, _status_code, _headers = client_prefund_request_with_http_info(client_hash_id, prefund_request_dto, opts)
      data
    end

    # Client Prefund Request
    # This API allows our clients to raise a prefund request in the system.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param prefund_request_dto [PrefundRequestDTO] prefundRequestDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(ClientPrefundResponseDTO, Integer, Hash)>] ClientPrefundResponseDTO data, response status code and response headers
    def client_prefund_request_with_http_info(client_hash_id, prefund_request_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientPrefundAccountApi.client_prefund_request ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling ClientPrefundAccountApi.client_prefund_request"
      end
      # verify the required parameter 'prefund_request_dto' is set
      if @api_client.config.client_side_validation && prefund_request_dto.nil?
        fail ArgumentError, "Missing the required parameter 'prefund_request_dto' when calling ClientPrefundAccountApi.client_prefund_request"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/prefund'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prefund_request_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'ClientPrefundResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"ClientPrefundAccountApi.client_prefund_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientPrefundAccountApi#client_prefund_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch Client Prefund Request
    # This API allows you to fetch the details of client prefund requests.
    # @param client_hash_id [String] Unique client Id assigned to the client during the onboarding process.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :amount amount
    # @option opts [String] :bank_reference_number bankReferenceNumber
    # @option opts [String] :currency currency
    # @option opts [String] :end_date endDate
    # @option opts [String] :order The sort order for the results. Acceptable values are ASC or DESC. The default order value is DESC. (default to 'DESC')
    # @option opts [Integer] :page This API may have lot of data in response and supports pagination. Entire response data is divided into pages with size as the upper limit on the number of data. Integer values from 0 onwards are acceptable. Default page is 0. (default to 0)
    # @option opts [String] :prefund_status prefundStatus
    # @option opts [Integer] :size The upper limit on the number of items to be fetched with each call. Integer values from 1 onwards are acceptable. Default size is 20. (default to 20)
    # @option opts [String] :start_date startDate
    # @option opts [String] :system_reference_number systemReferenceNumber
    # @option opts [String] :unique_payer_id uniquePayerId
    # @option opts [String] :unique_payment_id uniquePaymentId
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Object]
    def fetch_client_prefund_request(client_hash_id, opts = {})
      data, _status_code, _headers = fetch_client_prefund_request_with_http_info(client_hash_id, opts)
      data
    end

    # Fetch Client Prefund Request
    # This API allows you to fetch the details of client prefund requests.
    # @param client_hash_id [String] Unique client Id assigned to the client during the onboarding process.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :amount amount
    # @option opts [String] :bank_reference_number bankReferenceNumber
    # @option opts [String] :currency currency
    # @option opts [String] :end_date endDate
    # @option opts [String] :order The sort order for the results. Acceptable values are ASC or DESC. The default order value is DESC. (default to 'DESC')
    # @option opts [Integer] :page This API may have lot of data in response and supports pagination. Entire response data is divided into pages with size as the upper limit on the number of data. Integer values from 0 onwards are acceptable. Default page is 0. (default to 0)
    # @option opts [String] :prefund_status prefundStatus
    # @option opts [Integer] :size The upper limit on the number of items to be fetched with each call. Integer values from 1 onwards are acceptable. Default size is 20. (default to 20)
    # @option opts [String] :start_date startDate
    # @option opts [String] :system_reference_number systemReferenceNumber
    # @option opts [String] :unique_payer_id uniquePayerId
    # @option opts [String] :unique_payment_id uniquePaymentId
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def fetch_client_prefund_request_with_http_info(client_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientPrefundAccountApi.fetch_client_prefund_request ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling ClientPrefundAccountApi.fetch_client_prefund_request"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/prefundList'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'amount'] = opts[:'amount'] if !opts[:'amount'].nil?
      query_params[:'bankReferenceNumber'] = opts[:'bank_reference_number'] if !opts[:'bank_reference_number'].nil?
      query_params[:'currency'] = opts[:'currency'] if !opts[:'currency'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'prefundStatus'] = opts[:'prefund_status'] if !opts[:'prefund_status'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'systemReferenceNumber'] = opts[:'system_reference_number'] if !opts[:'system_reference_number'].nil?
      query_params[:'uniquePayerId'] = opts[:'unique_payer_id'] if !opts[:'unique_payer_id'].nil?
      query_params[:'uniquePaymentId'] = opts[:'unique_payment_id'] if !opts[:'unique_payment_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"ClientPrefundAccountApi.fetch_client_prefund_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientPrefundAccountApi#fetch_client_prefund_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
