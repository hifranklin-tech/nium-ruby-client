=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module NiumClient
  class CustomerVirtualAccountsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Account Ownership Certificate
    # This API allows you to download an account ownership certificate.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currencies This field accepts the list of currencies in 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes) for which the account ownership certificate to be generated. If no currencies are being sent in query param then account ownership certificate will be generated for all the currencies enabled to the customer.
    # @option opts [Boolean] :current_account_balance This field will display the account balance of the customer as on date (default to false)
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [nil]
    def account_ownership_certificate(client_hash_id, customer_hash_id, opts = {})
      account_ownership_certificate_with_http_info(client_hash_id, customer_hash_id, opts)
      nil
    end

    # Account Ownership Certificate
    # This API allows you to download an account ownership certificate.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currencies This field accepts the list of currencies in 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes) for which the account ownership certificate to be generated. If no currencies are being sent in query param then account ownership certificate will be generated for all the currencies enabled to the customer.
    # @option opts [Boolean] :current_account_balance This field will display the account balance of the customer as on date (default to false)
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def account_ownership_certificate_with_http_info(client_hash_id, customer_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerVirtualAccountsApi.account_ownership_certificate ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling CustomerVirtualAccountsApi.account_ownership_certificate"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling CustomerVirtualAccountsApi.account_ownership_certificate"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/accountOwnershipCertificate'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'currencies'] = opts[:'currencies'] if !opts[:'currencies'].nil?
      query_params[:'currentAccountBalance'] = opts[:'current_account_balance'] if !opts[:'current_account_balance'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"CustomerVirtualAccountsApi.account_ownership_certificate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerVirtualAccountsApi#account_ownership_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Assign Payment ID
    # This API allows you to assign virtual account numbers to customer for specific source.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param payment_id_request_dto2 [PaymentIdRequestDTO2] paymentIdRequestDTO2
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [PaymentIdResponseDTO2]
    def assign_payment_id(client_hash_id, customer_hash_id, wallet_hash_id, payment_id_request_dto2, opts = {})
      data, _status_code, _headers = assign_payment_id_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, payment_id_request_dto2, opts)
      data
    end

    # Assign Payment ID
    # This API allows you to assign virtual account numbers to customer for specific source.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param payment_id_request_dto2 [PaymentIdRequestDTO2] paymentIdRequestDTO2
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(PaymentIdResponseDTO2, Integer, Hash)>] PaymentIdResponseDTO2 data, response status code and response headers
    def assign_payment_id_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, payment_id_request_dto2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerVirtualAccountsApi.assign_payment_id ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling CustomerVirtualAccountsApi.assign_payment_id"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling CustomerVirtualAccountsApi.assign_payment_id"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling CustomerVirtualAccountsApi.assign_payment_id"
      end
      # verify the required parameter 'payment_id_request_dto2' is set
      if @api_client.config.client_side_validation && payment_id_request_dto2.nil?
        fail ArgumentError, "Missing the required parameter 'payment_id_request_dto2' when calling CustomerVirtualAccountsApi.assign_payment_id"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/paymentId'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(payment_id_request_dto2)

      # return_type
      return_type = opts[:debug_return_type] || 'PaymentIdResponseDTO2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"CustomerVirtualAccountsApi.assign_payment_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerVirtualAccountsApi#assign_payment_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Manage Virtual Account Tags
    # This API allows you to add, update, delete client tags against each virtual account.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param payment_id_tag_request_dto [PaymentIdTagRequestDTO] tags
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [PaymentIdCientTagsResponseDTO]
    def manage_virtual_account_tags(client_hash_id, customer_hash_id, wallet_hash_id, payment_id_tag_request_dto, opts = {})
      data, _status_code, _headers = manage_virtual_account_tags_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, payment_id_tag_request_dto, opts)
      data
    end

    # Manage Virtual Account Tags
    # This API allows you to add, update, delete client tags against each virtual account.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param payment_id_tag_request_dto [PaymentIdTagRequestDTO] tags
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(PaymentIdCientTagsResponseDTO, Integer, Hash)>] PaymentIdCientTagsResponseDTO data, response status code and response headers
    def manage_virtual_account_tags_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, payment_id_tag_request_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerVirtualAccountsApi.manage_virtual_account_tags ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling CustomerVirtualAccountsApi.manage_virtual_account_tags"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling CustomerVirtualAccountsApi.manage_virtual_account_tags"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling CustomerVirtualAccountsApi.manage_virtual_account_tags"
      end
      # verify the required parameter 'payment_id_tag_request_dto' is set
      if @api_client.config.client_side_validation && payment_id_tag_request_dto.nil?
        fail ArgumentError, "Missing the required parameter 'payment_id_tag_request_dto' when calling CustomerVirtualAccountsApi.manage_virtual_account_tags"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/paymentId/tags'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(payment_id_tag_request_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'PaymentIdCientTagsResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"CustomerVirtualAccountsApi.manage_virtual_account_tags",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerVirtualAccountsApi#manage_virtual_account_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Virtual Account Details
    # This API allows you to fetch virtual accounts assigned to a customer's wallet.   ⚠️ WARNING   > To access updated functionality and features we recommed using the latest version of this API [Virtual Account Details V2](/apis/reference/virtualaccountdetailsv2). Eventually, this API version will be deprecated and becomes unsupported.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated and shared before API handshake.
    # @param wallet_hash_id [String] Unique wallet identifier generated and shared before API handshake.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency_code 
    # @option opts [String] :end_date 
    # @option opts [String] :order 
    # @option opts [Integer] :page 
    # @option opts [String] :property 
    # @option opts [Integer] :size 
    # @option opts [String] :start_date 
    # @option opts [String] :tag_key 
    # @option opts [String] :tag_value 
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<WalletPaymentIdsResponseDTO>]
    def virtual_account_details(client_hash_id, customer_hash_id, wallet_hash_id, opts = {})
      data, _status_code, _headers = virtual_account_details_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, opts)
      data
    end

    # Virtual Account Details
    # This API allows you to fetch virtual accounts assigned to a customer&#39;s wallet.   ⚠️ WARNING   &gt; To access updated functionality and features we recommed using the latest version of this API [Virtual Account Details V2](/apis/reference/virtualaccountdetailsv2). Eventually, this API version will be deprecated and becomes unsupported.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated and shared before API handshake.
    # @param wallet_hash_id [String] Unique wallet identifier generated and shared before API handshake.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency_code 
    # @option opts [String] :end_date 
    # @option opts [String] :order 
    # @option opts [Integer] :page 
    # @option opts [String] :property 
    # @option opts [Integer] :size 
    # @option opts [String] :start_date 
    # @option opts [String] :tag_key 
    # @option opts [String] :tag_value 
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(Array<WalletPaymentIdsResponseDTO>, Integer, Hash)>] Array<WalletPaymentIdsResponseDTO> data, response status code and response headers
    def virtual_account_details_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerVirtualAccountsApi.virtual_account_details ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling CustomerVirtualAccountsApi.virtual_account_details"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling CustomerVirtualAccountsApi.virtual_account_details"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling CustomerVirtualAccountsApi.virtual_account_details"
      end
      allowable_values = ["DESC", "ASC"]
      if @api_client.config.client_side_validation && opts[:'order'] && !allowable_values.include?(opts[:'order'])
        fail ArgumentError, "invalid value for \"order\", must be one of #{allowable_values}"
      end
      allowable_values = ["createdAt"]
      if @api_client.config.client_side_validation && opts[:'property'] && !allowable_values.include?(opts[:'property'])
        fail ArgumentError, "invalid value for \"property\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/paymentIds'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'currencyCode'] = opts[:'currency_code'] if !opts[:'currency_code'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'property'] = opts[:'property'] if !opts[:'property'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'tagKey'] = opts[:'tag_key'] if !opts[:'tag_key'].nil?
      query_params[:'tagValue'] = opts[:'tag_value'] if !opts[:'tag_value'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<WalletPaymentIdsResponseDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"CustomerVirtualAccountsApi.virtual_account_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerVirtualAccountsApi#virtual_account_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Virtual Account Details V2
    # This API allows you to fetch virtual accounts assigned to a customer's wallet.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated and shared before API handshake.
    # @param wallet_hash_id [String] Unique wallet identifier generated and shared before API handshake.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency_code 
    # @option opts [String] :end_date 
    # @option opts [String] :order 
    # @option opts [Integer] :page 
    # @option opts [String] :property 
    # @option opts [Integer] :size 
    # @option opts [String] :start_date 
    # @option opts [String] :tag_key 
    # @option opts [String] :tag_value 
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [VirtualAccountResponseDTO]
    def virtual_account_details_v2(client_hash_id, customer_hash_id, wallet_hash_id, opts = {})
      data, _status_code, _headers = virtual_account_details_v2_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, opts)
      data
    end

    # Virtual Account Details V2
    # This API allows you to fetch virtual accounts assigned to a customer&#39;s wallet.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated and shared before API handshake.
    # @param wallet_hash_id [String] Unique wallet identifier generated and shared before API handshake.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency_code 
    # @option opts [String] :end_date 
    # @option opts [String] :order 
    # @option opts [Integer] :page 
    # @option opts [String] :property 
    # @option opts [Integer] :size 
    # @option opts [String] :start_date 
    # @option opts [String] :tag_key 
    # @option opts [String] :tag_value 
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(VirtualAccountResponseDTO, Integer, Hash)>] VirtualAccountResponseDTO data, response status code and response headers
    def virtual_account_details_v2_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerVirtualAccountsApi.virtual_account_details_v2 ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling CustomerVirtualAccountsApi.virtual_account_details_v2"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling CustomerVirtualAccountsApi.virtual_account_details_v2"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling CustomerVirtualAccountsApi.virtual_account_details_v2"
      end
      allowable_values = ["DESC", "ASC"]
      if @api_client.config.client_side_validation && opts[:'order'] && !allowable_values.include?(opts[:'order'])
        fail ArgumentError, "invalid value for \"order\", must be one of #{allowable_values}"
      end
      allowable_values = ["createdAt"]
      if @api_client.config.client_side_validation && opts[:'property'] && !allowable_values.include?(opts[:'property'])
        fail ArgumentError, "invalid value for \"property\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v2/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/paymentIds'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'currencyCode'] = opts[:'currency_code'] if !opts[:'currency_code'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'property'] = opts[:'property'] if !opts[:'property'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'tagKey'] = opts[:'tag_key'] if !opts[:'tag_key'].nil?
      query_params[:'tagValue'] = opts[:'tag_value'] if !opts[:'tag_value'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VirtualAccountResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"CustomerVirtualAccountsApi.virtual_account_details_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerVirtualAccountsApi#virtual_account_details_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
