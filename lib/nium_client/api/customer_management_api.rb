=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module NiumClient
  class CustomerManagementApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Account Statement
    # This API allows you to download an account statement.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param end_date [String] End date for fetching the transaction details. The format for endDate is YYYY-MM-DD.
    # @param start_date [String] From date for fetching the transaction details. The format for startDate is YYYY-MM-DD.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currencies This field accepts the list of currencies in 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes) for which the account statement to be generated. If no currencies are being sent in query param then statement will be generated for all the currencies enabled to the customer.
    # @option opts [String] :file_type This field accepts the file type of the account statement to be generated. (default to 'pdf')
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [nil]
    def account_statement(client_hash_id, customer_hash_id, end_date, start_date, opts = {})
      account_statement_with_http_info(client_hash_id, customer_hash_id, end_date, start_date, opts)
      nil
    end

    # Account Statement
    # This API allows you to download an account statement.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param end_date [String] End date for fetching the transaction details. The format for endDate is YYYY-MM-DD.
    # @param start_date [String] From date for fetching the transaction details. The format for startDate is YYYY-MM-DD.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currencies This field accepts the list of currencies in 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes) for which the account statement to be generated. If no currencies are being sent in query param then statement will be generated for all the currencies enabled to the customer.
    # @option opts [String] :file_type This field accepts the file type of the account statement to be generated. (default to 'pdf')
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def account_statement_with_http_info(client_hash_id, customer_hash_id, end_date, start_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerManagementApi.account_statement ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling CustomerManagementApi.account_statement"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling CustomerManagementApi.account_statement"
      end
      # verify the required parameter 'end_date' is set
      if @api_client.config.client_side_validation && end_date.nil?
        fail ArgumentError, "Missing the required parameter 'end_date' when calling CustomerManagementApi.account_statement"
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling CustomerManagementApi.account_statement"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/accounts/statement'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'endDate'] = end_date
      query_params[:'startDate'] = start_date
      query_params[:'currencies'] = opts[:'currencies'] if !opts[:'currencies'].nil?
      query_params[:'fileType'] = opts[:'file_type'] if !opts[:'file_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"CustomerManagementApi.account_statement",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerManagementApi#account_statement\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Block/Unblock Customer
    # This API allows you to permanently block or temporarily block/unblock a customer.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param block_customer_request_dto [BlockCustomerRequestDTO] blockCustomerRequestDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [CustomerApiError]
    def block_unblock_customer(client_hash_id, customer_hash_id, block_customer_request_dto, opts = {})
      data, _status_code, _headers = block_unblock_customer_with_http_info(client_hash_id, customer_hash_id, block_customer_request_dto, opts)
      data
    end

    # Block/Unblock Customer
    # This API allows you to permanently block or temporarily block/unblock a customer.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param block_customer_request_dto [BlockCustomerRequestDTO] blockCustomerRequestDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(CustomerApiError, Integer, Hash)>] CustomerApiError data, response status code and response headers
    def block_unblock_customer_with_http_info(client_hash_id, customer_hash_id, block_customer_request_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerManagementApi.block_unblock_customer ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling CustomerManagementApi.block_unblock_customer"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling CustomerManagementApi.block_unblock_customer"
      end
      # verify the required parameter 'block_customer_request_dto' is set
      if @api_client.config.client_side_validation && block_customer_request_dto.nil?
        fail ArgumentError, "Missing the required parameter 'block_customer_request_dto' when calling CustomerManagementApi.block_unblock_customer"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/block'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(block_customer_request_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerApiError'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"CustomerManagementApi.block_unblock_customer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerManagementApi#block_unblock_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Customer Details
    # This API allows you to fetch details for a specific customer.   >⚠️ WARNING   To access updated functionality and features we recommed using the latest version of this API [Customer Details V2](/apis/reference/customerdetailsv2). In December 2023, this API version will be deprecated and becomes unsupported.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [CustomerDetailResponse]
    def customer_details(client_hash_id, customer_hash_id, opts = {})
      data, _status_code, _headers = customer_details_with_http_info(client_hash_id, customer_hash_id, opts)
      data
    end

    # Customer Details
    # This API allows you to fetch details for a specific customer.   &gt;⚠️ WARNING   To access updated functionality and features we recommed using the latest version of this API [Customer Details V2](/apis/reference/customerdetailsv2). In December 2023, this API version will be deprecated and becomes unsupported.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(CustomerDetailResponse, Integer, Hash)>] CustomerDetailResponse data, response status code and response headers
    def customer_details_with_http_info(client_hash_id, customer_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerManagementApi.customer_details ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling CustomerManagementApi.customer_details"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling CustomerManagementApi.customer_details"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerDetailResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"CustomerManagementApi.customer_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerManagementApi#customer_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Customer Details V2
    # This API allows you to fetch details for a specific customer.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [CustomerDetailsResponseV2DTO]
    def customer_details_v2(client_hash_id, customer_hash_id, opts = {})
      data, _status_code, _headers = customer_details_v2_with_http_info(client_hash_id, customer_hash_id, opts)
      data
    end

    # Customer Details V2
    # This API allows you to fetch details for a specific customer.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(CustomerDetailsResponseV2DTO, Integer, Hash)>] CustomerDetailsResponseV2DTO data, response status code and response headers
    def customer_details_v2_with_http_info(client_hash_id, customer_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerManagementApi.customer_details_v2 ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling CustomerManagementApi.customer_details_v2"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling CustomerManagementApi.customer_details_v2"
      end
      # resource path
      local_var_path = '/api/v2/client/{clientHashId}/customer/{customerHashId}'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerDetailsResponseV2DTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"CustomerManagementApi.customer_details_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerManagementApi#customer_details_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Customer List
    # This API allows you to fetch the customers for the client. It also supports query parameters based filtering to fetch details of a customer with email or mobile.   >⚠️ WARNING   To access updated functionality and features we recommed using the latest version of this API [Customer List V2](/apis/reference/customerlistv2). In December 2023, this API version will be deprecated and becomes unsupported.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :email This field accepts the email ID of the customer.
    # @option opts [String] :mobile This field accepts the mobile number of a customer--digits only--without the country code.
    # @option opts [String] :order This field accepts the order which can be ASC or DESC.
    # @option opts [String] :page This field accepts the page number to be returned. The acceptable values are 0-N.  This field works with size field such that total number of records/size of each page &#x3D; number of pages(N).  This field can then give a particular page.
    # @option opts [String] :size This field accepts the number of elements per page.
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<CustomerDetailResponse>]
    def customer_list(client_hash_id, opts = {})
      data, _status_code, _headers = customer_list_with_http_info(client_hash_id, opts)
      data
    end

    # Customer List
    # This API allows you to fetch the customers for the client. It also supports query parameters based filtering to fetch details of a customer with email or mobile.   &gt;⚠️ WARNING   To access updated functionality and features we recommed using the latest version of this API [Customer List V2](/apis/reference/customerlistv2). In December 2023, this API version will be deprecated and becomes unsupported.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :email This field accepts the email ID of the customer.
    # @option opts [String] :mobile This field accepts the mobile number of a customer--digits only--without the country code.
    # @option opts [String] :order This field accepts the order which can be ASC or DESC.
    # @option opts [String] :page This field accepts the page number to be returned. The acceptable values are 0-N.  This field works with size field such that total number of records/size of each page &#x3D; number of pages(N).  This field can then give a particular page.
    # @option opts [String] :size This field accepts the number of elements per page.
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(Array<CustomerDetailResponse>, Integer, Hash)>] Array<CustomerDetailResponse> data, response status code and response headers
    def customer_list_with_http_info(client_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerManagementApi.customer_list ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling CustomerManagementApi.customer_list"
      end
      if @api_client.config.client_side_validation && !opts[:'mobile'].nil? && opts[:'mobile'].to_s.length > 20
        fail ArgumentError, 'invalid value for "opts[:"mobile"]" when calling CustomerManagementApi.customer_list, the character length must be smaller than or equal to 20.'
      end

      if @api_client.config.client_side_validation && !opts[:'mobile'].nil? && opts[:'mobile'].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"mobile"]" when calling CustomerManagementApi.customer_list, the character length must be great than or equal to 1.'
      end

      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && opts[:'order'] && !allowable_values.include?(opts[:'order'])
        fail ArgumentError, "invalid value for \"order\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customers'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?
      query_params[:'mobile'] = opts[:'mobile'] if !opts[:'mobile'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CustomerDetailResponse>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"CustomerManagementApi.customer_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerManagementApi#customer_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Customer List V2
    # This API allows you to fetch customer lists under a client with optional search parameters.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_registration_number This field accepts the business registration number of corporate customer.
    # @option opts [String] :email This field accepts the email ID of the customer.
    # @option opts [String] :mobile This field accepts the mobile number of a customer without the country code.
    # @option opts [String] :order This field accepts the order which can be ASC or DESC.
    # @option opts [String] :page This field accepts the page number to be returned. The acceptable values are 0-N.  This field works with size field such that total number of records/size of each page &#x3D; number of pages(N).  This field can then give a particular page.
    # @option opts [String] :size This field accepts the number of elements per page.
    # @option opts [String] :tag_key This parameter can filter the customers, based on the exact value of tagKey defined against customers. This can be used as an independent search parameter.
    # @option opts [String] :tag_value This parameter can filter the customers, based on the approximating value of tagValue(that may be mapped for a tagKey defined against customers). This can be used as an independent search parameter.
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [PaginatedCustomerDetailsResponseV2DTO]
    def customer_list_v2(client_hash_id, opts = {})
      data, _status_code, _headers = customer_list_v2_with_http_info(client_hash_id, opts)
      data
    end

    # Customer List V2
    # This API allows you to fetch customer lists under a client with optional search parameters.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_registration_number This field accepts the business registration number of corporate customer.
    # @option opts [String] :email This field accepts the email ID of the customer.
    # @option opts [String] :mobile This field accepts the mobile number of a customer without the country code.
    # @option opts [String] :order This field accepts the order which can be ASC or DESC.
    # @option opts [String] :page This field accepts the page number to be returned. The acceptable values are 0-N.  This field works with size field such that total number of records/size of each page &#x3D; number of pages(N).  This field can then give a particular page.
    # @option opts [String] :size This field accepts the number of elements per page.
    # @option opts [String] :tag_key This parameter can filter the customers, based on the exact value of tagKey defined against customers. This can be used as an independent search parameter.
    # @option opts [String] :tag_value This parameter can filter the customers, based on the approximating value of tagValue(that may be mapped for a tagKey defined against customers). This can be used as an independent search parameter.
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(PaginatedCustomerDetailsResponseV2DTO, Integer, Hash)>] PaginatedCustomerDetailsResponseV2DTO data, response status code and response headers
    def customer_list_v2_with_http_info(client_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerManagementApi.customer_list_v2 ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling CustomerManagementApi.customer_list_v2"
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && opts[:'order'] && !allowable_values.include?(opts[:'order'])
        fail ArgumentError, "invalid value for \"order\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v2/client/{clientHashId}/customers'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'businessRegistrationNumber'] = opts[:'business_registration_number'] if !opts[:'business_registration_number'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?
      query_params[:'mobile'] = opts[:'mobile'] if !opts[:'mobile'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'tagKey'] = opts[:'tag_key'] if !opts[:'tag_key'].nil?
      query_params[:'tagValue'] = opts[:'tag_value'] if !opts[:'tag_value'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedCustomerDetailsResponseV2DTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"CustomerManagementApi.customer_list_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerManagementApi#customer_list_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Customer List V3
    # This API allows you to fetch customer lists under a client with optional search parameters.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_registration_number This field accepts the business registration number of corporate customer.
    # @option opts [String] :customer_type This field accepts the type of customer.
    # @option opts [String] :email This field accepts the email ID of the customer.
    # @option opts [String] :mobile This field accepts the mobile number of a customer without the country code.
    # @option opts [String] :order This field accepts the order which can be ASC or DESC.
    # @option opts [String] :page This field accepts the page number to be returned. The acceptable values are 0-N.  This field works with size field such that total number of records/size of each page &#x3D; number of pages(N).  This field can then give a particular page.
    # @option opts [String] :parent_customer_hash_id This field contains the unique parent customer identifier generated at the time of customer creation.
    # @option opts [String] :size This field accepts the number of elements per page.
    # @option opts [String] :tag_key This parameter can filter the customers, based on the exact value of tagKey defined against customers. This can be used as an independent search parameter.
    # @option opts [String] :tag_value This parameter can filter the customers, based on the approximating value of tagValue(that may be mapped for a tagKey defined against customers). This can be used as an independent search parameter.
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [PaginatedResponseDTOCustomerDetailsResponseV2DTO]
    def customer_list_v3(client_hash_id, opts = {})
      data, _status_code, _headers = customer_list_v3_with_http_info(client_hash_id, opts)
      data
    end

    # Customer List V3
    # This API allows you to fetch customer lists under a client with optional search parameters.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_registration_number This field accepts the business registration number of corporate customer.
    # @option opts [String] :customer_type This field accepts the type of customer.
    # @option opts [String] :email This field accepts the email ID of the customer.
    # @option opts [String] :mobile This field accepts the mobile number of a customer without the country code.
    # @option opts [String] :order This field accepts the order which can be ASC or DESC.
    # @option opts [String] :page This field accepts the page number to be returned. The acceptable values are 0-N.  This field works with size field such that total number of records/size of each page &#x3D; number of pages(N).  This field can then give a particular page.
    # @option opts [String] :parent_customer_hash_id This field contains the unique parent customer identifier generated at the time of customer creation.
    # @option opts [String] :size This field accepts the number of elements per page.
    # @option opts [String] :tag_key This parameter can filter the customers, based on the exact value of tagKey defined against customers. This can be used as an independent search parameter.
    # @option opts [String] :tag_value This parameter can filter the customers, based on the approximating value of tagValue(that may be mapped for a tagKey defined against customers). This can be used as an independent search parameter.
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(PaginatedResponseDTOCustomerDetailsResponseV2DTO, Integer, Hash)>] PaginatedResponseDTOCustomerDetailsResponseV2DTO data, response status code and response headers
    def customer_list_v3_with_http_info(client_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerManagementApi.customer_list_v3 ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling CustomerManagementApi.customer_list_v3"
      end
      allowable_values = ["INDIVIDUAL", "CORPORATE"]
      if @api_client.config.client_side_validation && opts[:'customer_type'] && !allowable_values.include?(opts[:'customer_type'])
        fail ArgumentError, "invalid value for \"customer_type\", must be one of #{allowable_values}"
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && opts[:'order'] && !allowable_values.include?(opts[:'order'])
        fail ArgumentError, "invalid value for \"order\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v3/client/{clientHashId}/customers'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'businessRegistrationNumber'] = opts[:'business_registration_number'] if !opts[:'business_registration_number'].nil?
      query_params[:'customerType'] = opts[:'customer_type'] if !opts[:'customer_type'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?
      query_params[:'mobile'] = opts[:'mobile'] if !opts[:'mobile'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'parentCustomerHashId'] = opts[:'parent_customer_hash_id'] if !opts[:'parent_customer_hash_id'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'tagKey'] = opts[:'tag_key'] if !opts[:'tag_key'].nil?
      query_params[:'tagValue'] = opts[:'tag_value'] if !opts[:'tag_value'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedResponseDTOCustomerDetailsResponseV2DTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"CustomerManagementApi.customer_list_v3",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerManagementApi#customer_list_v3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Manage Customer Tags
    # This API allows you to add, update, and delete customer tags.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated during customer creation.
    # @param customer_client_tags_request_dto [CustomerClientTagsRequestDTO] tags
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [CustomerClientTagsResponseDTO]
    def manage_customer_tags(client_hash_id, customer_hash_id, customer_client_tags_request_dto, opts = {})
      data, _status_code, _headers = manage_customer_tags_with_http_info(client_hash_id, customer_hash_id, customer_client_tags_request_dto, opts)
      data
    end

    # Manage Customer Tags
    # This API allows you to add, update, and delete customer tags.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated during customer creation.
    # @param customer_client_tags_request_dto [CustomerClientTagsRequestDTO] tags
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(CustomerClientTagsResponseDTO, Integer, Hash)>] CustomerClientTagsResponseDTO data, response status code and response headers
    def manage_customer_tags_with_http_info(client_hash_id, customer_hash_id, customer_client_tags_request_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerManagementApi.manage_customer_tags ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling CustomerManagementApi.manage_customer_tags"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling CustomerManagementApi.manage_customer_tags"
      end
      # verify the required parameter 'customer_client_tags_request_dto' is set
      if @api_client.config.client_side_validation && customer_client_tags_request_dto.nil?
        fail ArgumentError, "Missing the required parameter 'customer_client_tags_request_dto' when calling CustomerManagementApi.manage_customer_tags"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/tags'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(customer_client_tags_request_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerClientTagsResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"CustomerManagementApi.manage_customer_tags",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerManagementApi#manage_customer_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
