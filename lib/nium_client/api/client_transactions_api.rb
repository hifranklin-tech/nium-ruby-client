=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module NiumClient
  class ClientTransactionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Client Transactions
    # This API allows you to fetch transaction details at the client level.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake. &gt;ℹ️ INFO  &gt;Query parameters are optional. If query parameters are not passed then by default three months transactions will be returned.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :auth_code This parameter can be used to filter the transactions based on the authorization code. In case of fund wallet transactions you can provide the systemReferenceNumber as value.
    # @option opts [String] :auth_currency This parameter can filter the transactions based on auth currency and accepts 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes).
    # @option opts [Boolean] :business_transaction This parameter can filter the transactions based on businessTransaction flag.
    # @option opts [String] :card_hash_id This field can apply the filter based on the unique card identifier generated during new/add-on card issuance.
    # @option opts [String] :child_customer_hash_id This field contains the unique child customer identifier generated when new child customer created.
    # @option opts [String] :customer_hash_id Unique identifier generated with customer creation.
    # @option opts [String] :end_date End date for fetching the transaction details. The format for endDate is YYYY-MM-DD.
    # @option opts [String] :mcc This parameter can filter the transactions based on 4-digit Merchant Category Codes.
    # @option opts [String] :merchant_categories This parameter describes the merchant&#39;s type of business product or service, also known as the Merchant Category Code (MCC) such as Airlines, Restaurants etc.
    # @option opts [String] :merchant_city This parameter can filter the transactions based on the merchant city field.
    # @option opts [String] :merchant_countries This parameter can filter the transactions based on comma-separated list of 2-letter ISO merchant countries.
    # @option opts [String] :merchant_country This parameter can filter the transactions based on the merchant country field.
    # @option opts [String] :merchant_name This parameter can filter the transactions based on the merchant name field.
    # @option opts [String] :order The sort order for the results.
    # @option opts [Integer] :page This API may have lot of data in response and supports pagination. Entire response data is divided into pages with size as the upper limit on the number of data. Integer values from 0 onwards are acceptable. Default page is 0.
    # @option opts [String] :payment_instrument_hash_id This parameter can filter the transactions based on comma-separated paymentInstrumentHashId.
    # @option opts [String] :property The field indicates the response parameter used to sort paginated data, with &#39;createdAt&#39; as the default parameter.
    # @option opts [String] :settlement_date This parameter can filter the transactions based on the settlement date of the transaction in format yyyyMMdd.
    # @option opts [String] :settlement_status This parameter can filter the transactions based on settlement status. The detailed list of possible values is available in the response of this API.
    # @option opts [Integer] :size This will decide the number of elements per page. Typical values can be 1-20.
    # @option opts [String] :start_date From date for fetching the transaction details. The format for startDate is YYYY-MM-DD.
    # @option opts [String] :status This parameter can filter the transactions based on status. The detailed list of possible values is available in the response of this API.
    # @option opts [String] :system_trace_audit_number This parameter can filter the transactions based on systemTraceAuditNumber.
    # @option opts [String] :tag_key This parameter can filter the transactions, based on the exact value of tagKey defined against transactions. This can be used as an independent search parameter.
    # @option opts [String] :tag_value This parameter can filter the transactions, based on the approximating value of tagValue(that may be mapped for a tagKey defined against transactions). This can be used as an independent search parameter.
    # @option opts [String] :transaction_currency This field contains the 3-letter [ISO-4217 transaction currency code](https://www.iso.org/iso-4217-currency-codes.html).
    # @option opts [String] :transaction_type This field contains the transaction can be one of the complete list of transactions mentioned in [Glossary of Transaction Types](https://docs.nium.com/baas/get-transactions#glossary-of-transaction-types).
    # @option opts [String] :transactions_labels_key This parameter can filter the transactions based on transactionsLabelsKey.
    # @option opts [String] :transactions_labels_value This parameter can filter the transactions based on transactionsLabelsValue.
    # @option opts [String] :wallet_hash_id Unique wallet identifier generated simultaneously with customer creation.
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [ClientTransactionsResponseDTO]
    def client_transactions(client_hash_id, opts = {})
      data, _status_code, _headers = client_transactions_with_http_info(client_hash_id, opts)
      data
    end

    # Client Transactions
    # This API allows you to fetch transaction details at the client level.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake. &gt;ℹ️ INFO  &gt;Query parameters are optional. If query parameters are not passed then by default three months transactions will be returned.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :auth_code This parameter can be used to filter the transactions based on the authorization code. In case of fund wallet transactions you can provide the systemReferenceNumber as value.
    # @option opts [String] :auth_currency This parameter can filter the transactions based on auth currency and accepts 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes).
    # @option opts [Boolean] :business_transaction This parameter can filter the transactions based on businessTransaction flag.
    # @option opts [String] :card_hash_id This field can apply the filter based on the unique card identifier generated during new/add-on card issuance.
    # @option opts [String] :child_customer_hash_id This field contains the unique child customer identifier generated when new child customer created.
    # @option opts [String] :customer_hash_id Unique identifier generated with customer creation.
    # @option opts [String] :end_date End date for fetching the transaction details. The format for endDate is YYYY-MM-DD.
    # @option opts [String] :mcc This parameter can filter the transactions based on 4-digit Merchant Category Codes.
    # @option opts [String] :merchant_categories This parameter describes the merchant&#39;s type of business product or service, also known as the Merchant Category Code (MCC) such as Airlines, Restaurants etc.
    # @option opts [String] :merchant_city This parameter can filter the transactions based on the merchant city field.
    # @option opts [String] :merchant_countries This parameter can filter the transactions based on comma-separated list of 2-letter ISO merchant countries.
    # @option opts [String] :merchant_country This parameter can filter the transactions based on the merchant country field.
    # @option opts [String] :merchant_name This parameter can filter the transactions based on the merchant name field.
    # @option opts [String] :order The sort order for the results.
    # @option opts [Integer] :page This API may have lot of data in response and supports pagination. Entire response data is divided into pages with size as the upper limit on the number of data. Integer values from 0 onwards are acceptable. Default page is 0.
    # @option opts [String] :payment_instrument_hash_id This parameter can filter the transactions based on comma-separated paymentInstrumentHashId.
    # @option opts [String] :property The field indicates the response parameter used to sort paginated data, with &#39;createdAt&#39; as the default parameter.
    # @option opts [String] :settlement_date This parameter can filter the transactions based on the settlement date of the transaction in format yyyyMMdd.
    # @option opts [String] :settlement_status This parameter can filter the transactions based on settlement status. The detailed list of possible values is available in the response of this API.
    # @option opts [Integer] :size This will decide the number of elements per page. Typical values can be 1-20.
    # @option opts [String] :start_date From date for fetching the transaction details. The format for startDate is YYYY-MM-DD.
    # @option opts [String] :status This parameter can filter the transactions based on status. The detailed list of possible values is available in the response of this API.
    # @option opts [String] :system_trace_audit_number This parameter can filter the transactions based on systemTraceAuditNumber.
    # @option opts [String] :tag_key This parameter can filter the transactions, based on the exact value of tagKey defined against transactions. This can be used as an independent search parameter.
    # @option opts [String] :tag_value This parameter can filter the transactions, based on the approximating value of tagValue(that may be mapped for a tagKey defined against transactions). This can be used as an independent search parameter.
    # @option opts [String] :transaction_currency This field contains the 3-letter [ISO-4217 transaction currency code](https://www.iso.org/iso-4217-currency-codes.html).
    # @option opts [String] :transaction_type This field contains the transaction can be one of the complete list of transactions mentioned in [Glossary of Transaction Types](https://docs.nium.com/baas/get-transactions#glossary-of-transaction-types).
    # @option opts [String] :transactions_labels_key This parameter can filter the transactions based on transactionsLabelsKey.
    # @option opts [String] :transactions_labels_value This parameter can filter the transactions based on transactionsLabelsValue.
    # @option opts [String] :wallet_hash_id Unique wallet identifier generated simultaneously with customer creation.
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(ClientTransactionsResponseDTO, Integer, Hash)>] ClientTransactionsResponseDTO data, response status code and response headers
    def client_transactions_with_http_info(client_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientTransactionsApi.client_transactions ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling ClientTransactionsApi.client_transactions"
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && opts[:'order'] && !allowable_values.include?(opts[:'order'])
        fail ArgumentError, "invalid value for \"order\", must be one of #{allowable_values}"
      end
      allowable_values = ["NULL", "IN_PROGRESS", "ACTION_REQUIRED", "RFI_REQUESTED", "RFI_RESPONDED", "COMPLETED", "ERROR", "REJECT", "EXPIRED"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/transactions'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'authCode'] = opts[:'auth_code'] if !opts[:'auth_code'].nil?
      query_params[:'authCurrency'] = opts[:'auth_currency'] if !opts[:'auth_currency'].nil?
      query_params[:'businessTransaction'] = opts[:'business_transaction'] if !opts[:'business_transaction'].nil?
      query_params[:'cardHashId'] = opts[:'card_hash_id'] if !opts[:'card_hash_id'].nil?
      query_params[:'childCustomerHashId'] = opts[:'child_customer_hash_id'] if !opts[:'child_customer_hash_id'].nil?
      query_params[:'customerHashId'] = opts[:'customer_hash_id'] if !opts[:'customer_hash_id'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'mcc'] = opts[:'mcc'] if !opts[:'mcc'].nil?
      query_params[:'merchantCategories'] = opts[:'merchant_categories'] if !opts[:'merchant_categories'].nil?
      query_params[:'merchantCity'] = opts[:'merchant_city'] if !opts[:'merchant_city'].nil?
      query_params[:'merchantCountries'] = opts[:'merchant_countries'] if !opts[:'merchant_countries'].nil?
      query_params[:'merchantCountry'] = opts[:'merchant_country'] if !opts[:'merchant_country'].nil?
      query_params[:'merchantName'] = opts[:'merchant_name'] if !opts[:'merchant_name'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'paymentInstrumentHashId'] = opts[:'payment_instrument_hash_id'] if !opts[:'payment_instrument_hash_id'].nil?
      query_params[:'property'] = opts[:'property'] if !opts[:'property'].nil?
      query_params[:'settlementDate'] = opts[:'settlement_date'] if !opts[:'settlement_date'].nil?
      query_params[:'settlementStatus'] = opts[:'settlement_status'] if !opts[:'settlement_status'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'systemTraceAuditNumber'] = opts[:'system_trace_audit_number'] if !opts[:'system_trace_audit_number'].nil?
      query_params[:'tagKey'] = opts[:'tag_key'] if !opts[:'tag_key'].nil?
      query_params[:'tagValue'] = opts[:'tag_value'] if !opts[:'tag_value'].nil?
      query_params[:'transactionCurrency'] = opts[:'transaction_currency'] if !opts[:'transaction_currency'].nil?
      query_params[:'transactionType'] = opts[:'transaction_type'] if !opts[:'transaction_type'].nil?
      query_params[:'transactionsLabelsKey'] = opts[:'transactions_labels_key'] if !opts[:'transactions_labels_key'].nil?
      query_params[:'transactionsLabelsValue'] = opts[:'transactions_labels_value'] if !opts[:'transactions_labels_value'].nil?
      query_params[:'walletHashId'] = opts[:'wallet_hash_id'] if !opts[:'wallet_hash_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ClientTransactionsResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"ClientTransactionsApi.client_transactions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientTransactionsApi#client_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
