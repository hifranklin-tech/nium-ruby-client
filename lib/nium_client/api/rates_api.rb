=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module NiumClient
  class RatesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Fetch historic aggregated exchange rates
    # This API will retrieve aggregated time series of historical exchange rate.
    # @param source_currency_code [String] This field contains the 3-letter [currency-and-country-codes](https://docs.nium.com/apis/docs/currency-and-country-codes).
    # @param destination_currency_code [String] This field contains the 3-letter [currency-and-country-codes](https://docs.nium.com/apis/docs/currency-and-country-codes).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :csrf_token 
    # @option opts [Time] :start The start timestamp used to filter the aggregated time series. Must be in the format &#39;yyyy-mm-ddTHH:MM:SSZ&#39;.
    # @option opts [Time] :_end The end timestamp used to filter the aggregated time series. Must be in the format &#39;yyyy-mm-ddTHH:MM:SSZ&#39;.
    # @option opts [Window] :window Specifies the field by which the results should be grouped. (default to '1_day')
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [ExchangeRatesGetResponse]
    def aggregated_exchange_rates(source_currency_code, destination_currency_code, opts = {})
      data, _status_code, _headers = aggregated_exchange_rates_with_http_info(source_currency_code, destination_currency_code, opts)
      data
    end

    # Fetch historic aggregated exchange rates
    # This API will retrieve aggregated time series of historical exchange rate.
    # @param source_currency_code [String] This field contains the 3-letter [currency-and-country-codes](https://docs.nium.com/apis/docs/currency-and-country-codes).
    # @param destination_currency_code [String] This field contains the 3-letter [currency-and-country-codes](https://docs.nium.com/apis/docs/currency-and-country-codes).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :csrf_token 
    # @option opts [Time] :start The start timestamp used to filter the aggregated time series. Must be in the format &#39;yyyy-mm-ddTHH:MM:SSZ&#39;.
    # @option opts [Time] :_end The end timestamp used to filter the aggregated time series. Must be in the format &#39;yyyy-mm-ddTHH:MM:SSZ&#39;.
    # @option opts [Window] :window Specifies the field by which the results should be grouped. (default to '1_day')
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [Array<(ExchangeRatesGetResponse, Integer, Hash)>] ExchangeRatesGetResponse data, response status code and response headers
    def aggregated_exchange_rates_with_http_info(source_currency_code, destination_currency_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RatesApi.aggregated_exchange_rates ...'
      end
      # verify the required parameter 'source_currency_code' is set
      if @api_client.config.client_side_validation && source_currency_code.nil?
        fail ArgumentError, "Missing the required parameter 'source_currency_code' when calling RatesApi.aggregated_exchange_rates"
      end
      if @api_client.config.client_side_validation && source_currency_code.to_s.length > 3
        fail ArgumentError, 'invalid value for "source_currency_code" when calling RatesApi.aggregated_exchange_rates, the character length must be smaller than or equal to 3.'
      end

      if @api_client.config.client_side_validation && source_currency_code.to_s.length < 3
        fail ArgumentError, 'invalid value for "source_currency_code" when calling RatesApi.aggregated_exchange_rates, the character length must be great than or equal to 3.'
      end

      # verify the required parameter 'destination_currency_code' is set
      if @api_client.config.client_side_validation && destination_currency_code.nil?
        fail ArgumentError, "Missing the required parameter 'destination_currency_code' when calling RatesApi.aggregated_exchange_rates"
      end
      if @api_client.config.client_side_validation && destination_currency_code.to_s.length > 3
        fail ArgumentError, 'invalid value for "destination_currency_code" when calling RatesApi.aggregated_exchange_rates, the character length must be smaller than or equal to 3.'
      end

      if @api_client.config.client_side_validation && destination_currency_code.to_s.length < 3
        fail ArgumentError, 'invalid value for "destination_currency_code" when calling RatesApi.aggregated_exchange_rates, the character length must be great than or equal to 3.'
      end

      # resource path
      local_var_path = '/api/v1/exchangeRates/aggregate'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sourceCurrencyCode'] = source_currency_code
      query_params[:'destinationCurrencyCode'] = destination_currency_code
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'end'] = opts[:'_end'] if !opts[:'_end'].nil?
      query_params[:'window'] = opts[:'window'] if !opts[:'window'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params['csrf_token'] = opts[:'csrf_token'] if !opts[:'csrf_token'].nil?
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExchangeRatesGetResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"RatesApi.aggregated_exchange_rates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RatesApi#aggregated_exchange_rates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Exchange Rate V2
    # This API fetches the interbank FX rate for a currency pair. Note that the rate provided does not include the Nium markup.
    # @param source_currency_code [String] This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the source amount.
    # @param destination_currency_code [String] This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the destination amount.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [ExchangeRateV2ResponseDto]
    def exchange_rate_v2(source_currency_code, destination_currency_code, opts = {})
      data, _status_code, _headers = exchange_rate_v2_with_http_info(source_currency_code, destination_currency_code, opts)
      data
    end

    # Exchange Rate V2
    # This API fetches the interbank FX rate for a currency pair. Note that the rate provided does not include the Nium markup.
    # @param source_currency_code [String] This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the source amount.
    # @param destination_currency_code [String] This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the destination amount.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(ExchangeRateV2ResponseDto, Integer, Hash)>] ExchangeRateV2ResponseDto data, response status code and response headers
    def exchange_rate_v2_with_http_info(source_currency_code, destination_currency_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RatesApi.exchange_rate_v2 ...'
      end
      # verify the required parameter 'source_currency_code' is set
      if @api_client.config.client_side_validation && source_currency_code.nil?
        fail ArgumentError, "Missing the required parameter 'source_currency_code' when calling RatesApi.exchange_rate_v2"
      end
      if @api_client.config.client_side_validation && source_currency_code.to_s.length > 3
        fail ArgumentError, 'invalid value for "source_currency_code" when calling RatesApi.exchange_rate_v2, the character length must be smaller than or equal to 3.'
      end

      if @api_client.config.client_side_validation && source_currency_code.to_s.length < 3
        fail ArgumentError, 'invalid value for "source_currency_code" when calling RatesApi.exchange_rate_v2, the character length must be great than or equal to 3.'
      end

      # verify the required parameter 'destination_currency_code' is set
      if @api_client.config.client_side_validation && destination_currency_code.nil?
        fail ArgumentError, "Missing the required parameter 'destination_currency_code' when calling RatesApi.exchange_rate_v2"
      end
      if @api_client.config.client_side_validation && destination_currency_code.to_s.length > 3
        fail ArgumentError, 'invalid value for "destination_currency_code" when calling RatesApi.exchange_rate_v2, the character length must be smaller than or equal to 3.'
      end

      if @api_client.config.client_side_validation && destination_currency_code.to_s.length < 3
        fail ArgumentError, 'invalid value for "destination_currency_code" when calling RatesApi.exchange_rate_v2, the character length must be great than or equal to 3.'
      end

      # resource path
      local_var_path = '/api/v2/exchangeRate'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sourceCurrencyCode'] = source_currency_code
      query_params[:'destinationCurrencyCode'] = destination_currency_code

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExchangeRateV2ResponseDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"RatesApi.exchange_rate_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RatesApi#exchange_rate_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
