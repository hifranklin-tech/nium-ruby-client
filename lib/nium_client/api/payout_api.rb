=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module NiumClient
  class PayoutApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Card Widget
    # This API allows you to use NIUM’s card widget to tokenize beneficiary card details. Non-PCI DSS compliant Clients are expected to integrate with this new API to get beneficiary’s encrypted card token number. This token number needs to be passed in field encryptedBeneficiaryCardToken while adding a beneficiary to make a payout to card.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated during customer creation.
    # @param customer_card_widget_token_request_dto [CustomerCardWidgetTokenRequestDTO] cardWidgetTokenRequestDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [CustomerCardWidgetTokenResponse]
    def customer_get_card_widget(client_hash_id, customer_hash_id, customer_card_widget_token_request_dto, opts = {})
      data, _status_code, _headers = customer_get_card_widget_with_http_info(client_hash_id, customer_hash_id, customer_card_widget_token_request_dto, opts)
      data
    end

    # Get Card Widget
    # This API allows you to use NIUM’s card widget to tokenize beneficiary card details. Non-PCI DSS compliant Clients are expected to integrate with this new API to get beneficiary’s encrypted card token number. This token number needs to be passed in field encryptedBeneficiaryCardToken while adding a beneficiary to make a payout to card.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated during customer creation.
    # @param customer_card_widget_token_request_dto [CustomerCardWidgetTokenRequestDTO] cardWidgetTokenRequestDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(CustomerCardWidgetTokenResponse, Integer, Hash)>] CustomerCardWidgetTokenResponse data, response status code and response headers
    def customer_get_card_widget_with_http_info(client_hash_id, customer_hash_id, customer_card_widget_token_request_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayoutApi.customer_get_card_widget ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling PayoutApi.customer_get_card_widget"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling PayoutApi.customer_get_card_widget"
      end
      # verify the required parameter 'customer_card_widget_token_request_dto' is set
      if @api_client.config.client_side_validation && customer_card_widget_token_request_dto.nil?
        fail ArgumentError, "Missing the required parameter 'customer_card_widget_token_request_dto' when calling PayoutApi.customer_get_card_widget"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/widget/token'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(customer_card_widget_token_request_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerCardWidgetTokenResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"PayoutApi.customer_get_card_widget",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayoutApi#customer_get_card_widget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch Remittance Life Cycle Status
    # This API allows you to fetch the Remittance Life Cycle Status along with Payment Reference Number, Partner Reference Number, System Reference Number, Date and Time of the Remittance status based on the System Reference Number provided in the input.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param system_reference_number [String] This is a unique system reference number generated by card issuance platform for the transaction.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<RemittanceEventsResponseDTO2>]
    def fetch_remittance_life_cycle_status(client_hash_id, customer_hash_id, system_reference_number, wallet_hash_id, opts = {})
      data, _status_code, _headers = fetch_remittance_life_cycle_status_with_http_info(client_hash_id, customer_hash_id, system_reference_number, wallet_hash_id, opts)
      data
    end

    # Fetch Remittance Life Cycle Status
    # This API allows you to fetch the Remittance Life Cycle Status along with Payment Reference Number, Partner Reference Number, System Reference Number, Date and Time of the Remittance status based on the System Reference Number provided in the input.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param system_reference_number [String] This is a unique system reference number generated by card issuance platform for the transaction.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(Array<RemittanceEventsResponseDTO2>, Integer, Hash)>] Array<RemittanceEventsResponseDTO2> data, response status code and response headers
    def fetch_remittance_life_cycle_status_with_http_info(client_hash_id, customer_hash_id, system_reference_number, wallet_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayoutApi.fetch_remittance_life_cycle_status ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling PayoutApi.fetch_remittance_life_cycle_status"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling PayoutApi.fetch_remittance_life_cycle_status"
      end
      # verify the required parameter 'system_reference_number' is set
      if @api_client.config.client_side_validation && system_reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'system_reference_number' when calling PayoutApi.fetch_remittance_life_cycle_status"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling PayoutApi.fetch_remittance_life_cycle_status"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/remittance/{systemReferenceNumber}/audit'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'systemReferenceNumber' + '}', CGI.escape(system_reference_number.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<RemittanceEventsResponseDTO2>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"PayoutApi.fetch_remittance_life_cycle_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayoutApi#fetch_remittance_life_cycle_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Proof Of Payment
    # This API allows you to download a proof of payment receipt against a transaction.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param system_reference_number [String] Unique System Reference Number generated on Transfer Money request.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [nil]
    def po_p(client_hash_id, customer_hash_id, system_reference_number, wallet_hash_id, opts = {})
      po_p_with_http_info(client_hash_id, customer_hash_id, system_reference_number, wallet_hash_id, opts)
      nil
    end

    # Get Proof Of Payment
    # This API allows you to download a proof of payment receipt against a transaction.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param system_reference_number [String] Unique System Reference Number generated on Transfer Money request.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def po_p_with_http_info(client_hash_id, customer_hash_id, system_reference_number, wallet_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayoutApi.po_p ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling PayoutApi.po_p"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling PayoutApi.po_p"
      end
      # verify the required parameter 'system_reference_number' is set
      if @api_client.config.client_side_validation && system_reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'system_reference_number' when calling PayoutApi.po_p"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling PayoutApi.po_p"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/remittance/{systemReferenceNumber}/receipt'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'systemReferenceNumber' + '}', CGI.escape(system_reference_number.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"PayoutApi.po_p",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayoutApi#po_p\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Purpose of Transfer
    # This API will allow you to fetch the list of purpose of transfer.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<PurposeCodeResponseDTO>]
    def purposeof_transfer(opts = {})
      data, _status_code, _headers = purposeof_transfer_with_http_info(opts)
      data
    end

    # Purpose of Transfer
    # This API will allow you to fetch the list of purpose of transfer.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(Array<PurposeCodeResponseDTO>, Integer, Hash)>] Array<PurposeCodeResponseDTO> data, response status code and response headers
    def purposeof_transfer_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayoutApi.purposeof_transfer ...'
      end
      # resource path
      local_var_path = '/api/v1/remittance/purposeCodes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PurposeCodeResponseDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"PayoutApi.purposeof_transfer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayoutApi#purposeof_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Respond to Transaction RFI
    # This API allows you to respond to an RFI raised for a transaction.
    # @param auth_code [String] Authorization code of the transaction.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param upload_rfi_document_request_dto [UploadRfiDocumentRequestDTO] uploadRfiDocumentRequestDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [UploadRfiDetailsResponseDTO]
    def respondto_transaction_rfi(auth_code, client_hash_id, customer_hash_id, wallet_hash_id, upload_rfi_document_request_dto, opts = {})
      data, _status_code, _headers = respondto_transaction_rfi_with_http_info(auth_code, client_hash_id, customer_hash_id, wallet_hash_id, upload_rfi_document_request_dto, opts)
      data
    end

    # Respond to Transaction RFI
    # This API allows you to respond to an RFI raised for a transaction.
    # @param auth_code [String] Authorization code of the transaction.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param upload_rfi_document_request_dto [UploadRfiDocumentRequestDTO] uploadRfiDocumentRequestDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(UploadRfiDetailsResponseDTO, Integer, Hash)>] UploadRfiDetailsResponseDTO data, response status code and response headers
    def respondto_transaction_rfi_with_http_info(auth_code, client_hash_id, customer_hash_id, wallet_hash_id, upload_rfi_document_request_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayoutApi.respondto_transaction_rfi ...'
      end
      # verify the required parameter 'auth_code' is set
      if @api_client.config.client_side_validation && auth_code.nil?
        fail ArgumentError, "Missing the required parameter 'auth_code' when calling PayoutApi.respondto_transaction_rfi"
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling PayoutApi.respondto_transaction_rfi"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling PayoutApi.respondto_transaction_rfi"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling PayoutApi.respondto_transaction_rfi"
      end
      # verify the required parameter 'upload_rfi_document_request_dto' is set
      if @api_client.config.client_side_validation && upload_rfi_document_request_dto.nil?
        fail ArgumentError, "Missing the required parameter 'upload_rfi_document_request_dto' when calling PayoutApi.respondto_transaction_rfi"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/transactions/{authCode}/rfi/upload'.sub('{' + 'authCode' + '}', CGI.escape(auth_code.to_s)).sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(upload_rfi_document_request_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'UploadRfiDetailsResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"PayoutApi.respondto_transaction_rfi",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayoutApi#respondto_transaction_rfi\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Transfer Money
    # This API will allow you to send money to the registered beneficiary.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param remittance_transactions_request_dto [RemittanceTransactionsRequestDTO] remittanceTransactionsRequestDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [RemittanceResponseDTO]
    def transfer_money(client_hash_id, customer_hash_id, wallet_hash_id, remittance_transactions_request_dto, opts = {})
      data, _status_code, _headers = transfer_money_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, remittance_transactions_request_dto, opts)
      data
    end

    # Transfer Money
    # This API will allow you to send money to the registered beneficiary.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param remittance_transactions_request_dto [RemittanceTransactionsRequestDTO] remittanceTransactionsRequestDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(RemittanceResponseDTO, Integer, Hash)>] RemittanceResponseDTO data, response status code and response headers
    def transfer_money_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, remittance_transactions_request_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayoutApi.transfer_money ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling PayoutApi.transfer_money"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling PayoutApi.transfer_money"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling PayoutApi.transfer_money"
      end
      # verify the required parameter 'remittance_transactions_request_dto' is set
      if @api_client.config.client_side_validation && remittance_transactions_request_dto.nil?
        fail ArgumentError, "Missing the required parameter 'remittance_transactions_request_dto' when calling PayoutApi.transfer_money"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/remittance'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(remittance_transactions_request_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'RemittanceResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"PayoutApi.transfer_money",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayoutApi#transfer_money\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Withdraw Funds from Wallet
    # This API allows you to withdraw funds from the customer's wallet.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param wallet_refund_request_dto [WalletRefundRequestDTO] walletRefundRequestDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [ApiResponseOfWalletRefundResponseDTO]
    def withdraw_funds_from_wallet(client_hash_id, customer_hash_id, wallet_hash_id, wallet_refund_request_dto, opts = {})
      data, _status_code, _headers = withdraw_funds_from_wallet_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, wallet_refund_request_dto, opts)
      data
    end

    # Withdraw Funds from Wallet
    # This API allows you to withdraw funds from the customer&#39;s wallet.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param wallet_refund_request_dto [WalletRefundRequestDTO] walletRefundRequestDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(ApiResponseOfWalletRefundResponseDTO, Integer, Hash)>] ApiResponseOfWalletRefundResponseDTO data, response status code and response headers
    def withdraw_funds_from_wallet_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, wallet_refund_request_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayoutApi.withdraw_funds_from_wallet ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling PayoutApi.withdraw_funds_from_wallet"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling PayoutApi.withdraw_funds_from_wallet"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling PayoutApi.withdraw_funds_from_wallet"
      end
      # verify the required parameter 'wallet_refund_request_dto' is set
      if @api_client.config.client_side_validation && wallet_refund_request_dto.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_refund_request_dto' when calling PayoutApi.withdraw_funds_from_wallet"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/refund'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(wallet_refund_request_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'ApiResponseOfWalletRefundResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"PayoutApi.withdraw_funds_from_wallet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayoutApi#withdraw_funds_from_wallet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
