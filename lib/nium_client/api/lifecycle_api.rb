=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module NiumClient
  class LifecycleApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Activate Card V2
    # This API allows you to activate a card after delivery to the customer.
    # @param client_hash_id [String] The unique client identifier generated and shared before the API handshake.
    # @param customer_hash_id [String] The unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] The unique wallet identifier generated simultaneously with customer creation.
    # @param card_hash_id [String] The unique card identifier generated while new/add-on card issuance.
    # @param activate_card_request_v2_dto [ActivateCardRequestV2DTO] Activate card request
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [ActivateCardResponseV2DTO]
    def activate_card(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, activate_card_request_v2_dto, opts = {})
      data, _status_code, _headers = activate_card_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, activate_card_request_v2_dto, opts)
      data
    end

    # Activate Card V2
    # This API allows you to activate a card after delivery to the customer.
    # @param client_hash_id [String] The unique client identifier generated and shared before the API handshake.
    # @param customer_hash_id [String] The unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] The unique wallet identifier generated simultaneously with customer creation.
    # @param card_hash_id [String] The unique card identifier generated while new/add-on card issuance.
    # @param activate_card_request_v2_dto [ActivateCardRequestV2DTO] Activate card request
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [Array<(ActivateCardResponseV2DTO, Integer, Hash)>] ActivateCardResponseV2DTO data, response status code and response headers
    def activate_card_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, activate_card_request_v2_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LifecycleApi.activate_card ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling LifecycleApi.activate_card"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling LifecycleApi.activate_card"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling LifecycleApi.activate_card"
      end
      # verify the required parameter 'card_hash_id' is set
      if @api_client.config.client_side_validation && card_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_hash_id' when calling LifecycleApi.activate_card"
      end
      # verify the required parameter 'activate_card_request_v2_dto' is set
      if @api_client.config.client_side_validation && activate_card_request_v2_dto.nil?
        fail ArgumentError, "Missing the required parameter 'activate_card_request_v2_dto' when calling LifecycleApi.activate_card"
      end
      # resource path
      local_var_path = '/api/v2/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/activate'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s)).sub('{' + 'cardHashId' + '}', CGI.escape(card_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(activate_card_request_v2_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'ActivateCardResponseV2DTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"LifecycleApi.activate_card",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LifecycleApi#activate_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Activate Card
    # This API allows you to activate a card after delivery to a customer.
    # @param client_hash_id [String] The unique client identifier generated and shared before the API handshake.
    # @param customer_hash_id [String] The unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] The unique wallet identifier generated simultaneously with customer creation.
    # @param card_hash_id [String] The unique card identifier generated while new/add-on card issuance.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [ActivateCardResponseDTO]
    def activate_card1(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, opts = {})
      data, _status_code, _headers = activate_card1_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, opts)
      data
    end

    # Activate Card
    # This API allows you to activate a card after delivery to a customer.
    # @param client_hash_id [String] The unique client identifier generated and shared before the API handshake.
    # @param customer_hash_id [String] The unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] The unique wallet identifier generated simultaneously with customer creation.
    # @param card_hash_id [String] The unique card identifier generated while new/add-on card issuance.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [Array<(ActivateCardResponseDTO, Integer, Hash)>] ActivateCardResponseDTO data, response status code and response headers
    def activate_card1_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LifecycleApi.activate_card1 ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling LifecycleApi.activate_card1"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling LifecycleApi.activate_card1"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling LifecycleApi.activate_card1"
      end
      # verify the required parameter 'card_hash_id' is set
      if @api_client.config.client_side_validation && card_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_hash_id' when calling LifecycleApi.activate_card1"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/activate'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s)).sub('{' + 'cardHashId' + '}', CGI.escape(card_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActivateCardResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"LifecycleApi.activate_card1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LifecycleApi#activate_card1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Card
    # This API allows you to issue a card for a customer.   >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Add Card V2](ref:addcardv2) is the latest version of this API.
    # @param client_hash_id [String] The unique client identifier generated and shared before the API handshake.
    # @param customer_hash_id [String] The unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] The unique wallet identifier generated simultaneously with customer creation.
    # @param add_card_request [AddCardRequest] addCardRequest
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [AddCardResponseDTO]
    def add_card(client_hash_id, customer_hash_id, wallet_hash_id, add_card_request, opts = {})
      data, _status_code, _headers = add_card_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, add_card_request, opts)
      data
    end

    # Add Card
    # This API allows you to issue a card for a customer.   &gt;⚠️ WARNING   &gt;This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Add Card V2](ref:addcardv2) is the latest version of this API.
    # @param client_hash_id [String] The unique client identifier generated and shared before the API handshake.
    # @param customer_hash_id [String] The unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] The unique wallet identifier generated simultaneously with customer creation.
    # @param add_card_request [AddCardRequest] addCardRequest
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [Array<(AddCardResponseDTO, Integer, Hash)>] AddCardResponseDTO data, response status code and response headers
    def add_card_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, add_card_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LifecycleApi.add_card ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling LifecycleApi.add_card"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling LifecycleApi.add_card"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling LifecycleApi.add_card"
      end
      # verify the required parameter 'add_card_request' is set
      if @api_client.config.client_side_validation && add_card_request.nil?
        fail ArgumentError, "Missing the required parameter 'add_card_request' when calling LifecycleApi.add_card"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_card_request)

      # return_type
      return_type = opts[:debug_return_type] || 'AddCardResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"LifecycleApi.add_card",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LifecycleApi#add_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Card V2
    # This API allows you to issue a card for a customer.
    # @param client_hash_id [String] The unique client identifier generated and shared before the API handshake.
    # @param customer_hash_id [String] The unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] The unique wallet identifier generated simultaneously with customer creation.
    # @param add_card_v2_request [AddCardV2Request] The request body to add a new card.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [AddCardV2ResponseDTO]
    def add_card_v2(client_hash_id, customer_hash_id, wallet_hash_id, add_card_v2_request, opts = {})
      data, _status_code, _headers = add_card_v2_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, add_card_v2_request, opts)
      data
    end

    # Add Card V2
    # This API allows you to issue a card for a customer.
    # @param client_hash_id [String] The unique client identifier generated and shared before the API handshake.
    # @param customer_hash_id [String] The unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] The unique wallet identifier generated simultaneously with customer creation.
    # @param add_card_v2_request [AddCardV2Request] The request body to add a new card.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [Array<(AddCardV2ResponseDTO, Integer, Hash)>] AddCardV2ResponseDTO data, response status code and response headers
    def add_card_v2_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, add_card_v2_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LifecycleApi.add_card_v2 ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling LifecycleApi.add_card_v2"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling LifecycleApi.add_card_v2"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling LifecycleApi.add_card_v2"
      end
      # verify the required parameter 'add_card_v2_request' is set
      if @api_client.config.client_side_validation && add_card_v2_request.nil?
        fail ArgumentError, "Missing the required parameter 'add_card_v2_request' when calling LifecycleApi.add_card_v2"
      end
      # resource path
      local_var_path = '/api/v2/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_card_v2_request)

      # return_type
      return_type = opts[:debug_return_type] || 'AddCardV2ResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"LifecycleApi.add_card_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LifecycleApi#add_card_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Assign Card
    # This API is used to assign a card to a customer. In this use case, the client has an unassigned card with him/her. The client hands over the card to the customer and assigns it to him/her.
    # @param client_hash_id [String] The unique client identifier generated and shared before the API handshake.
    # @param customer_hash_id [String] The unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] The unique wallet identifier generated simultaneously with customer creation.
    # @param assign_card_dto [AssignCardDTO] assignCardDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [CardAssignResponseDTO]
    def assign_card(client_hash_id, customer_hash_id, wallet_hash_id, assign_card_dto, opts = {})
      data, _status_code, _headers = assign_card_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, assign_card_dto, opts)
      data
    end

    # Assign Card
    # This API is used to assign a card to a customer. In this use case, the client has an unassigned card with him/her. The client hands over the card to the customer and assigns it to him/her.
    # @param client_hash_id [String] The unique client identifier generated and shared before the API handshake.
    # @param customer_hash_id [String] The unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] The unique wallet identifier generated simultaneously with customer creation.
    # @param assign_card_dto [AssignCardDTO] assignCardDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [Array<(CardAssignResponseDTO, Integer, Hash)>] CardAssignResponseDTO data, response status code and response headers
    def assign_card_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, assign_card_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LifecycleApi.assign_card ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling LifecycleApi.assign_card"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling LifecycleApi.assign_card"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling LifecycleApi.assign_card"
      end
      # verify the required parameter 'assign_card_dto' is set
      if @api_client.config.client_side_validation && assign_card_dto.nil?
        fail ArgumentError, "Missing the required parameter 'assign_card_dto' when calling LifecycleApi.assign_card"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/assignCard'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(assign_card_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'CardAssignResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"LifecycleApi.assign_card",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LifecycleApi#assign_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Block and Replace Card
    # Use this API to block and replace a card.
    # @param client_hash_id [String] The unique client identifier generated and shared before the API handshake.
    # @param customer_hash_id [String] The unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] The unique wallet identifier generated simultaneously with customer creation.
    # @param card_hash_id [String] The unique card identifier generated while new/add-on card issuance.
    # @param block_and_replace_card_request_dto [BlockAndReplaceCardRequestDTO] A card can be blocked and replaced using the Block And Replace Card API.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [BlockAndReplaceCardResponseDTO]
    def block_and_replace_card_v2(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, block_and_replace_card_request_dto, opts = {})
      data, _status_code, _headers = block_and_replace_card_v2_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, block_and_replace_card_request_dto, opts)
      data
    end

    # Block and Replace Card
    # Use this API to block and replace a card.
    # @param client_hash_id [String] The unique client identifier generated and shared before the API handshake.
    # @param customer_hash_id [String] The unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] The unique wallet identifier generated simultaneously with customer creation.
    # @param card_hash_id [String] The unique card identifier generated while new/add-on card issuance.
    # @param block_and_replace_card_request_dto [BlockAndReplaceCardRequestDTO] A card can be blocked and replaced using the Block And Replace Card API.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [Array<(BlockAndReplaceCardResponseDTO, Integer, Hash)>] BlockAndReplaceCardResponseDTO data, response status code and response headers
    def block_and_replace_card_v2_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, block_and_replace_card_request_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LifecycleApi.block_and_replace_card_v2 ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling LifecycleApi.block_and_replace_card_v2"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling LifecycleApi.block_and_replace_card_v2"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling LifecycleApi.block_and_replace_card_v2"
      end
      # verify the required parameter 'card_hash_id' is set
      if @api_client.config.client_side_validation && card_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_hash_id' when calling LifecycleApi.block_and_replace_card_v2"
      end
      # verify the required parameter 'block_and_replace_card_request_dto' is set
      if @api_client.config.client_side_validation && block_and_replace_card_request_dto.nil?
        fail ArgumentError, "Missing the required parameter 'block_and_replace_card_request_dto' when calling LifecycleApi.block_and_replace_card_v2"
      end
      # resource path
      local_var_path = '/api/v2/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/blockAndReplace'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s)).sub('{' + 'cardHashId' + '}', CGI.escape(card_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(block_and_replace_card_request_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'BlockAndReplaceCardResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"LifecycleApi.block_and_replace_card_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LifecycleApi#block_and_replace_card_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Block/Unblock Cards
    # This API helps you perform the following operations: Permanent block card Temporary block card Unblock card.  >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. For a temporary lock and unlock, [Lock/Unlock Card API](ref:lockunlockcardv2) is the latest version of this API. For a permanent block and replacing the card, [Block and Replace API](ref:blockandreplacecardv2) is the latest version of this API.
    # @param client_hash_id [String] The unique client identifier generated and shared before the API handshake.
    # @param customer_hash_id [String] The unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] The unique wallet identifier generated simultaneously with customer creation.
    # @param card_hash_id [String] The unique card identifier generated while new/add-on card issuance.
    # @param block_code_dto [BlockCodeDTO] blockCode
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [BlockCodeCardResponseDTO]
    def block_unblock_cards(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, block_code_dto, opts = {})
      data, _status_code, _headers = block_unblock_cards_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, block_code_dto, opts)
      data
    end

    # Block/Unblock Cards
    # This API helps you perform the following operations: Permanent block card Temporary block card Unblock card.  &gt;⚠️ WARNING   &gt;This API version is deprecated. Eventually, a deprecated API version becomes unsupported. For a temporary lock and unlock, [Lock/Unlock Card API](ref:lockunlockcardv2) is the latest version of this API. For a permanent block and replacing the card, [Block and Replace API](ref:blockandreplacecardv2) is the latest version of this API.
    # @param client_hash_id [String] The unique client identifier generated and shared before the API handshake.
    # @param customer_hash_id [String] The unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] The unique wallet identifier generated simultaneously with customer creation.
    # @param card_hash_id [String] The unique card identifier generated while new/add-on card issuance.
    # @param block_code_dto [BlockCodeDTO] blockCode
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [Array<(BlockCodeCardResponseDTO, Integer, Hash)>] BlockCodeCardResponseDTO data, response status code and response headers
    def block_unblock_cards_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, block_code_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LifecycleApi.block_unblock_cards ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling LifecycleApi.block_unblock_cards"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling LifecycleApi.block_unblock_cards"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling LifecycleApi.block_unblock_cards"
      end
      # verify the required parameter 'card_hash_id' is set
      if @api_client.config.client_side_validation && card_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_hash_id' when calling LifecycleApi.block_unblock_cards"
      end
      # verify the required parameter 'block_code_dto' is set
      if @api_client.config.client_side_validation && block_code_dto.nil?
        fail ArgumentError, "Missing the required parameter 'block_code_dto' when calling LifecycleApi.block_unblock_cards"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/cardAction'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s)).sub('{' + 'cardHashId' + '}', CGI.escape(card_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(block_code_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'BlockCodeCardResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"LifecycleApi.block_unblock_cards",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LifecycleApi#block_unblock_cards\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Card Details
    # This API allows you to fetch the card details of a particular card.  >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Card Details V2](ref:carddetailsv2) is the latest version of this API.
    # @param client_hash_id [String] The unique client identifier generated and shared before the API handshake.
    # @param customer_hash_id [String] The unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] The unique wallet identifier generated simultaneously with customer creation.
    # @param card_hash_id [String] The unique card identifier generated while new/add-on card issuance.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [CardResponseDTO]
    def card_details(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, opts = {})
      data, _status_code, _headers = card_details_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, opts)
      data
    end

    # Card Details
    # This API allows you to fetch the card details of a particular card.  &gt;⚠️ WARNING   &gt;This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Card Details V2](ref:carddetailsv2) is the latest version of this API.
    # @param client_hash_id [String] The unique client identifier generated and shared before the API handshake.
    # @param customer_hash_id [String] The unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] The unique wallet identifier generated simultaneously with customer creation.
    # @param card_hash_id [String] The unique card identifier generated while new/add-on card issuance.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [Array<(CardResponseDTO, Integer, Hash)>] CardResponseDTO data, response status code and response headers
    def card_details_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LifecycleApi.card_details ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling LifecycleApi.card_details"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling LifecycleApi.card_details"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling LifecycleApi.card_details"
      end
      # verify the required parameter 'card_hash_id' is set
      if @api_client.config.client_side_validation && card_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_hash_id' when calling LifecycleApi.card_details"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s)).sub('{' + 'cardHashId' + '}', CGI.escape(card_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CardResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"LifecycleApi.card_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LifecycleApi#card_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Card Details V2
    # This API allows you to get details about a card.
    # @param client_hash_id [String] The unique client identifier generated and shared before the API handshake.
    # @param customer_hash_id [String] The unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] The unique wallet identifier generated simultaneously with customer creation.
    # @param card_hash_id [String] The unique card identifier generated while new/add-on card issuance.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [CardDetails]
    def card_details_v2(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, opts = {})
      data, _status_code, _headers = card_details_v2_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, opts)
      data
    end

    # Card Details V2
    # This API allows you to get details about a card.
    # @param client_hash_id [String] The unique client identifier generated and shared before the API handshake.
    # @param customer_hash_id [String] The unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] The unique wallet identifier generated simultaneously with customer creation.
    # @param card_hash_id [String] The unique card identifier generated while new/add-on card issuance.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(CardDetails, Integer, Hash)>] CardDetails data, response status code and response headers
    def card_details_v2_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LifecycleApi.card_details_v2 ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling LifecycleApi.card_details_v2"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling LifecycleApi.card_details_v2"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling LifecycleApi.card_details_v2"
      end
      # verify the required parameter 'card_hash_id' is set
      if @api_client.config.client_side_validation && card_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_hash_id' when calling LifecycleApi.card_details_v2"
      end
      # resource path
      local_var_path = '/api/v2/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s)).sub('{' + 'cardHashId' + '}', CGI.escape(card_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CardDetails'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"LifecycleApi.card_details_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LifecycleApi#card_details_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Card List
    # This API will return all the cards issued, for a given wallet.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Hash<String, Object>]
    def card_list(client_hash_id, customer_hash_id, wallet_hash_id, opts = {})
      data, _status_code, _headers = card_list_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, opts)
      data
    end

    # Card List
    # This API will return all the cards issued, for a given wallet.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def card_list_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LifecycleApi.card_list ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling LifecycleApi.card_list"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling LifecycleApi.card_list"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling LifecycleApi.card_list"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/cards'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"LifecycleApi.card_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LifecycleApi#card_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Card List V2
    # This API returns all the cards issued for a given customer wallet.
    # @param client_hash_id [String] The unique client identifier generated and shared before the API handshake.
    # @param customer_hash_id [String] The unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] The unique wallet identifier generated simultaneously with customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :child_customer_hash_id This field refers to a unique identifier, known as the customerHashId, assigned to an individual customer who is associated with a corporate customer at the parent level. This identifier distinguishes and tracks the child-level customer within a given client&#39;s program. By utilizing this identifier, it becomes possible to establish and maintain the appropriate linkage between the child customer and their parent corporate customer, ensuring accurate association and management of customer data.
    # @option opts [Integer] :page This field accepts the page number to be returned. The acceptable values are 0-N.  This field works with size field such that total number of records/size of each page &#x3D; number of pages(N).  This field can then give a particular page.
    # @option opts [Integer] :size This field accepts the number of elements per page.
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [PageResponseCardDetails]
    def card_list_v2(client_hash_id, customer_hash_id, wallet_hash_id, opts = {})
      data, _status_code, _headers = card_list_v2_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, opts)
      data
    end

    # Card List V2
    # This API returns all the cards issued for a given customer wallet.
    # @param client_hash_id [String] The unique client identifier generated and shared before the API handshake.
    # @param customer_hash_id [String] The unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] The unique wallet identifier generated simultaneously with customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :child_customer_hash_id This field refers to a unique identifier, known as the customerHashId, assigned to an individual customer who is associated with a corporate customer at the parent level. This identifier distinguishes and tracks the child-level customer within a given client&#39;s program. By utilizing this identifier, it becomes possible to establish and maintain the appropriate linkage between the child customer and their parent corporate customer, ensuring accurate association and management of customer data.
    # @option opts [Integer] :page This field accepts the page number to be returned. The acceptable values are 0-N.  This field works with size field such that total number of records/size of each page &#x3D; number of pages(N).  This field can then give a particular page.
    # @option opts [Integer] :size This field accepts the number of elements per page.
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [Array<(PageResponseCardDetails, Integer, Hash)>] PageResponseCardDetails data, response status code and response headers
    def card_list_v2_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LifecycleApi.card_list_v2 ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling LifecycleApi.card_list_v2"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling LifecycleApi.card_list_v2"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling LifecycleApi.card_list_v2"
      end
      # resource path
      local_var_path = '/api/v2/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/cards'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'childCustomerHashId'] = opts[:'child_customer_hash_id'] if !opts[:'child_customer_hash_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageResponseCardDetails'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"LifecycleApi.card_list_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LifecycleApi#card_list_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Card Details Widget
    # Use this API to fetch card widget url and token for Non-PCI DSS compliant Clients
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param card_hash_id [String] Unique card identifier generated while new/add-on card issuance.
    # @param card_widget_token_request_dto [CardWidgetTokenRequestDTO] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [CardWidgetTokenResponse]
    def get_card_widget(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, card_widget_token_request_dto, opts = {})
      data, _status_code, _headers = get_card_widget_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, card_widget_token_request_dto, opts)
      data
    end

    # Get Card Details Widget
    # Use this API to fetch card widget url and token for Non-PCI DSS compliant Clients
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param card_hash_id [String] Unique card identifier generated while new/add-on card issuance.
    # @param card_widget_token_request_dto [CardWidgetTokenRequestDTO] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [Array<(CardWidgetTokenResponse, Integer, Hash)>] CardWidgetTokenResponse data, response status code and response headers
    def get_card_widget_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, card_widget_token_request_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LifecycleApi.get_card_widget ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling LifecycleApi.get_card_widget"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling LifecycleApi.get_card_widget"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling LifecycleApi.get_card_widget"
      end
      # verify the required parameter 'card_hash_id' is set
      if @api_client.config.client_side_validation && card_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_hash_id' when calling LifecycleApi.get_card_widget"
      end
      # verify the required parameter 'card_widget_token_request_dto' is set
      if @api_client.config.client_side_validation && card_widget_token_request_dto.nil?
        fail ArgumentError, "Missing the required parameter 'card_widget_token_request_dto' when calling LifecycleApi.get_card_widget"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/widget/showCardDetails'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s)).sub('{' + 'cardHashId' + '}', CGI.escape(card_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(card_widget_token_request_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'CardWidgetTokenResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"LifecycleApi.get_card_widget",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LifecycleApi#get_card_widget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Issue Replacement Card
    # Use this API for issuing a card replacement.  >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. For a permanent block and replacing the card, [Block and Replace API](ref:blockandreplacecardv2) is the latest version of this API.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param card_hash_id [String] Unique card identifier generated while new/add-on card issuance.
    # @param replace_card_request [ReplaceCardRequest] A card can be replaced using the Replace Card API only if it is permanently blocked. A permanently blocked card cannot be replaced on the same date as date of issuance. For example, a customer issued a card today and request to block the card permanently, on the same day. However, a customer may not call the Replace Card API to issue a replacement on the same date.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [AddCardResponseDTO]
    def issue_replacement_card(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, replace_card_request, opts = {})
      data, _status_code, _headers = issue_replacement_card_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, replace_card_request, opts)
      data
    end

    # Issue Replacement Card
    # Use this API for issuing a card replacement.  &gt;⚠️ WARNING   &gt;This API version is deprecated. Eventually, a deprecated API version becomes unsupported. For a permanent block and replacing the card, [Block and Replace API](ref:blockandreplacecardv2) is the latest version of this API.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param card_hash_id [String] Unique card identifier generated while new/add-on card issuance.
    # @param replace_card_request [ReplaceCardRequest] A card can be replaced using the Replace Card API only if it is permanently blocked. A permanently blocked card cannot be replaced on the same date as date of issuance. For example, a customer issued a card today and request to block the card permanently, on the same day. However, a customer may not call the Replace Card API to issue a replacement on the same date.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(AddCardResponseDTO, Integer, Hash)>] AddCardResponseDTO data, response status code and response headers
    def issue_replacement_card_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, replace_card_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LifecycleApi.issue_replacement_card ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling LifecycleApi.issue_replacement_card"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling LifecycleApi.issue_replacement_card"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling LifecycleApi.issue_replacement_card"
      end
      # verify the required parameter 'card_hash_id' is set
      if @api_client.config.client_side_validation && card_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_hash_id' when calling LifecycleApi.issue_replacement_card"
      end
      # verify the required parameter 'replace_card_request' is set
      if @api_client.config.client_side_validation && replace_card_request.nil?
        fail ArgumentError, "Missing the required parameter 'replace_card_request' when calling LifecycleApi.issue_replacement_card"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/replaceCard'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s)).sub('{' + 'cardHashId' + '}', CGI.escape(card_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(replace_card_request)

      # return_type
      return_type = opts[:debug_return_type] || 'AddCardResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"LifecycleApi.issue_replacement_card",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LifecycleApi#issue_replacement_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lock/Unlock Cards
    # This API allows you to temporarily lock or unlock a card.
    # @param client_hash_id [String] The unique client identifier generated and shared before the API handshake.
    # @param customer_hash_id [String] The unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] The unique wallet identifier generated simultaneously with customer creation.
    # @param card_hash_id [String] The unique card identifier generated while new/add-on card issuance.
    # @param lock_status_update_request_dto [LockStatusUpdateRequestDTO] lockStatusUpdateRequestDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [LockStatusUpdateResponseDTO]
    def lock_unlock_card_v2(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, lock_status_update_request_dto, opts = {})
      data, _status_code, _headers = lock_unlock_card_v2_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, lock_status_update_request_dto, opts)
      data
    end

    # Lock/Unlock Cards
    # This API allows you to temporarily lock or unlock a card.
    # @param client_hash_id [String] The unique client identifier generated and shared before the API handshake.
    # @param customer_hash_id [String] The unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] The unique wallet identifier generated simultaneously with customer creation.
    # @param card_hash_id [String] The unique card identifier generated while new/add-on card issuance.
    # @param lock_status_update_request_dto [LockStatusUpdateRequestDTO] lockStatusUpdateRequestDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [Array<(LockStatusUpdateResponseDTO, Integer, Hash)>] LockStatusUpdateResponseDTO data, response status code and response headers
    def lock_unlock_card_v2_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, lock_status_update_request_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LifecycleApi.lock_unlock_card_v2 ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling LifecycleApi.lock_unlock_card_v2"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling LifecycleApi.lock_unlock_card_v2"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling LifecycleApi.lock_unlock_card_v2"
      end
      # verify the required parameter 'card_hash_id' is set
      if @api_client.config.client_side_validation && card_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_hash_id' when calling LifecycleApi.lock_unlock_card_v2"
      end
      # verify the required parameter 'lock_status_update_request_dto' is set
      if @api_client.config.client_side_validation && lock_status_update_request_dto.nil?
        fail ArgumentError, "Missing the required parameter 'lock_status_update_request_dto' when calling LifecycleApi.lock_unlock_card_v2"
      end
      # resource path
      local_var_path = '/api/v2/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/lockAction'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s)).sub('{' + 'cardHashId' + '}', CGI.escape(card_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(lock_status_update_request_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'LockStatusUpdateResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"LifecycleApi.lock_unlock_card_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LifecycleApi#lock_unlock_card_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Renew Card
    # Use this API for card renewal.
    # @param client_hash_id [String] The unique client identifier generated and shared before the API handshake.
    # @param customer_hash_id [String] The unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] The unique wallet identifier generated simultaneously with customer creation.
    # @param card_hash_id [String] The unique card identifier generated while new/add-on card issuance.
    # @param renew_card_request [RenewCardRequest] A card can be renewed using the Renew Card API on or before 45 days from the expiration date.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [String]
    def renew_card(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, renew_card_request, opts = {})
      data, _status_code, _headers = renew_card_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, renew_card_request, opts)
      data
    end

    # Renew Card
    # Use this API for card renewal.
    # @param client_hash_id [String] The unique client identifier generated and shared before the API handshake.
    # @param customer_hash_id [String] The unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] The unique wallet identifier generated simultaneously with customer creation.
    # @param card_hash_id [String] The unique card identifier generated while new/add-on card issuance.
    # @param renew_card_request [RenewCardRequest] A card can be renewed using the Renew Card API on or before 45 days from the expiration date.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def renew_card_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, renew_card_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LifecycleApi.renew_card ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling LifecycleApi.renew_card"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling LifecycleApi.renew_card"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling LifecycleApi.renew_card"
      end
      # verify the required parameter 'card_hash_id' is set
      if @api_client.config.client_side_validation && card_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_hash_id' when calling LifecycleApi.renew_card"
      end
      # verify the required parameter 'renew_card_request' is set
      if @api_client.config.client_side_validation && renew_card_request.nil?
        fail ArgumentError, "Missing the required parameter 'renew_card_request' when calling LifecycleApi.renew_card"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/renewCard'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s)).sub('{' + 'cardHashId' + '}', CGI.escape(card_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(renew_card_request)

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"LifecycleApi.renew_card",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LifecycleApi#renew_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Card Details V2
    # This API allows you to update the contact information of the cardholder.
    # @param client_hash_id [String] clientHashId
    # @param customer_hash_id [String] customerHashId
    # @param wallet_hash_id [String] walletHashId
    # @param card_hash_id [String] cardHashId
    # @param update_contact_info_request_dto [UpdateContactInfoRequestDTO] updateContactInfoRequestDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [ApiResponse2]
    def update_card_details_v2(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, update_contact_info_request_dto, opts = {})
      data, _status_code, _headers = update_card_details_v2_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, update_contact_info_request_dto, opts)
      data
    end

    # Update Card Details V2
    # This API allows you to update the contact information of the cardholder.
    # @param client_hash_id [String] clientHashId
    # @param customer_hash_id [String] customerHashId
    # @param wallet_hash_id [String] walletHashId
    # @param card_hash_id [String] cardHashId
    # @param update_contact_info_request_dto [UpdateContactInfoRequestDTO] updateContactInfoRequestDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [Array<(ApiResponse2, Integer, Hash)>] ApiResponse2 data, response status code and response headers
    def update_card_details_v2_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, update_contact_info_request_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LifecycleApi.update_card_details_v2 ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling LifecycleApi.update_card_details_v2"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling LifecycleApi.update_card_details_v2"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling LifecycleApi.update_card_details_v2"
      end
      # verify the required parameter 'card_hash_id' is set
      if @api_client.config.client_side_validation && card_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_hash_id' when calling LifecycleApi.update_card_details_v2"
      end
      # verify the required parameter 'update_contact_info_request_dto' is set
      if @api_client.config.client_side_validation && update_contact_info_request_dto.nil?
        fail ArgumentError, "Missing the required parameter 'update_contact_info_request_dto' when calling LifecycleApi.update_card_details_v2"
      end
      # resource path
      local_var_path = '/api/v2/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s)).sub('{' + 'cardHashId' + '}', CGI.escape(card_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_contact_info_request_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'ApiResponse2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"LifecycleApi.update_card_details_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LifecycleApi#update_card_details_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
