=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module NiumClient
  class CustomerAccountCorporateApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Exhaustive Corporate Details using Business ID
    # This API allows you to fetch both public and non-public exhaustive corporate details using business ID.  >ℹ️ INFO   >Every call for this API incurs a fee. Contact your Nium account manager to use it. This API only supports the corporate customer onboarding process. Avoid unnecessary API calls by using the throttling and debouncing techniques. This API should only be called after getting a successful response from [Public Corporate Details using Business ID API](/apis/reference/publiccorporatedetailsusingbusinessid).
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param country_code [String] This field accepts the 2-letter [ISO-2 country code](https://nium-documents.s3-eu-west-1.amazonaws.com/spend-documents/Country+Code.pdf) of the corporate customer.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search_reference_id This field accepts the search reference id of the corporate customer as received in response of public corporate details api.
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [CorporateEnrichedDetailResponseDTO]
    def exhaustive_corporate_details_using_business_id(client_hash_id, country_code, opts = {})
      data, _status_code, _headers = exhaustive_corporate_details_using_business_id_with_http_info(client_hash_id, country_code, opts)
      data
    end

    # Exhaustive Corporate Details using Business ID
    # This API allows you to fetch both public and non-public exhaustive corporate details using business ID.  &gt;ℹ️ INFO   &gt;Every call for this API incurs a fee. Contact your Nium account manager to use it. This API only supports the corporate customer onboarding process. Avoid unnecessary API calls by using the throttling and debouncing techniques. This API should only be called after getting a successful response from [Public Corporate Details using Business ID API](/apis/reference/publiccorporatedetailsusingbusinessid).
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param country_code [String] This field accepts the 2-letter [ISO-2 country code](https://nium-documents.s3-eu-west-1.amazonaws.com/spend-documents/Country+Code.pdf) of the corporate customer.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search_reference_id This field accepts the search reference id of the corporate customer as received in response of public corporate details api.
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(CorporateEnrichedDetailResponseDTO, Integer, Hash)>] CorporateEnrichedDetailResponseDTO data, response status code and response headers
    def exhaustive_corporate_details_using_business_id_with_http_info(client_hash_id, country_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerAccountCorporateApi.exhaustive_corporate_details_using_business_id ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling CustomerAccountCorporateApi.exhaustive_corporate_details_using_business_id"
      end
      # verify the required parameter 'country_code' is set
      if @api_client.config.client_side_validation && country_code.nil?
        fail ArgumentError, "Missing the required parameter 'country_code' when calling CustomerAccountCorporateApi.exhaustive_corporate_details_using_business_id"
      end
      # resource path
      local_var_path = '/api/v2/client/{clientHashId}/corporate/lookup'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'countryCode'] = country_code
      query_params[:'searchReferenceId'] = opts[:'search_reference_id'] if !opts[:'search_reference_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CorporateEnrichedDetailResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"CustomerAccountCorporateApi.exhaustive_corporate_details_using_business_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerAccountCorporateApi#exhaustive_corporate_details_using_business_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch corporate constants
    # This API returns the acceptable values for the `category` query param to be used as input in the corporate onboarding flow. Refer to the [Fetch Corporate Constants](doc:fetch-corporate-constants-api) user guide for details on usage instructions on this API.
    # @param category [String] This field is used to select one of the category used during corporate customer onboarding. The API response will return list of allowed values for the selected category.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param region [String] The response will be filtered based on the value selected in this field for regulatory region of the customer.
    # @param type [String] Type of Customer being onboarded.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [AddCategoryResponseDTO]
    def fetch_corporate_constants_using_get(category, client_hash_id, region, type, opts = {})
      data, _status_code, _headers = fetch_corporate_constants_using_get_with_http_info(category, client_hash_id, region, type, opts)
      data
    end

    # Fetch corporate constants
    # This API returns the acceptable values for the &#x60;category&#x60; query param to be used as input in the corporate onboarding flow. Refer to the [Fetch Corporate Constants](doc:fetch-corporate-constants-api) user guide for details on usage instructions on this API.
    # @param category [String] This field is used to select one of the category used during corporate customer onboarding. The API response will return list of allowed values for the selected category.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param region [String] The response will be filtered based on the value selected in this field for regulatory region of the customer.
    # @param type [String] Type of Customer being onboarded.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(AddCategoryResponseDTO, Integer, Hash)>] AddCategoryResponseDTO data, response status code and response headers
    def fetch_corporate_constants_using_get_with_http_info(category, client_hash_id, region, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerAccountCorporateApi.fetch_corporate_constants_using_get ...'
      end
      # verify the required parameter 'category' is set
      if @api_client.config.client_side_validation && category.nil?
        fail ArgumentError, "Missing the required parameter 'category' when calling CustomerAccountCorporateApi.fetch_corporate_constants_using_get"
      end
      # verify enum value
      allowable_values = ["annualTurnover", "businessType", "countryName", "countryOfOperation", "documentType", "intendedUseOfAccount", "industrySector", "listedExchange", "position", "regulatedTrustType", "restrictedCountries", "state", "streetType", "totalEmployees", "unregulatedTrustType", "rfiTemplates", "estimatedMonthlyFunding", "occupation"]
      if @api_client.config.client_side_validation && !allowable_values.include?(category)
        fail ArgumentError, "invalid value for \"category\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling CustomerAccountCorporateApi.fetch_corporate_constants_using_get"
      end
      # verify the required parameter 'region' is set
      if @api_client.config.client_side_validation && region.nil?
        fail ArgumentError, "Missing the required parameter 'region' when calling CustomerAccountCorporateApi.fetch_corporate_constants_using_get"
      end
      # verify enum value
      allowable_values = ["AU", "EU", "SG", "HK", "UK", "US", "CA"]
      if @api_client.config.client_side_validation && !allowable_values.include?(region)
        fail ArgumentError, "invalid value for \"region\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling CustomerAccountCorporateApi.fetch_corporate_constants_using_get"
      end
      # verify enum value
      allowable_values = ["INDIVIDUAL", "CORPORATE"]
      if @api_client.config.client_side_validation && !allowable_values.include?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v2/client/{clientHashId}/onboarding/constants'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'category'] = category
      query_params[:'region'] = region
      query_params[:'type'] = type

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AddCategoryResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"CustomerAccountCorporateApi.fetch_corporate_constants_using_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerAccountCorporateApi#fetch_corporate_constants_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch Corporate Customer RFI Details
    # This API allows you to fetch details of RFI raised as part of corporate customer onboarding.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :case_id This field contains unique case ID generated and returned in Onboard API response.
    # @option opts [String] :client_id This field contains unique client ID generated and returned in Onboard API response.
    # @option opts [String] :customer_hash_id This field contains the customerHashId, For example, 909ffc5f-c8ab-4df0-bcb2-111fcdd6f735.
    # @option opts [String] :region This field contains the region code for which onboarding has been triggered, For example, AU, EU, UK, SG.
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [ComplianceRFITemplateMetadataResponseDTO]
    def fetch_corporate_customer_rfi_details(client_hash_id, opts = {})
      data, _status_code, _headers = fetch_corporate_customer_rfi_details_with_http_info(client_hash_id, opts)
      data
    end

    # Fetch Corporate Customer RFI Details
    # This API allows you to fetch details of RFI raised as part of corporate customer onboarding.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :case_id This field contains unique case ID generated and returned in Onboard API response.
    # @option opts [String] :client_id This field contains unique client ID generated and returned in Onboard API response.
    # @option opts [String] :customer_hash_id This field contains the customerHashId, For example, 909ffc5f-c8ab-4df0-bcb2-111fcdd6f735.
    # @option opts [String] :region This field contains the region code for which onboarding has been triggered, For example, AU, EU, UK, SG.
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(ComplianceRFITemplateMetadataResponseDTO, Integer, Hash)>] ComplianceRFITemplateMetadataResponseDTO data, response status code and response headers
    def fetch_corporate_customer_rfi_details_with_http_info(client_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerAccountCorporateApi.fetch_corporate_customer_rfi_details ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling CustomerAccountCorporateApi.fetch_corporate_customer_rfi_details"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/corporate/rfi'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'caseId'] = opts[:'case_id'] if !opts[:'case_id'].nil?
      query_params[:'clientId'] = opts[:'client_id'] if !opts[:'client_id'].nil?
      query_params[:'customerHashId'] = opts[:'customer_hash_id'] if !opts[:'customer_hash_id'].nil?
      query_params[:'region'] = opts[:'region'] if !opts[:'region'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComplianceRFITemplateMetadataResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"CustomerAccountCorporateApi.fetch_corporate_customer_rfi_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerAccountCorporateApi#fetch_corporate_customer_rfi_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Onboard Corporate Customer
    # This API allows you to onboard a corporate customer under existing client.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param corporate_customer_requests_dto [CorporateCustomerRequestsDTO] corporateCustomerRequestsDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [ProductCorporateCustomerResponseDTO]
    def onboard_corporate_customer(client_hash_id, corporate_customer_requests_dto, opts = {})
      data, _status_code, _headers = onboard_corporate_customer_with_http_info(client_hash_id, corporate_customer_requests_dto, opts)
      data
    end

    # Onboard Corporate Customer
    # This API allows you to onboard a corporate customer under existing client.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param corporate_customer_requests_dto [CorporateCustomerRequestsDTO] corporateCustomerRequestsDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(ProductCorporateCustomerResponseDTO, Integer, Hash)>] ProductCorporateCustomerResponseDTO data, response status code and response headers
    def onboard_corporate_customer_with_http_info(client_hash_id, corporate_customer_requests_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerAccountCorporateApi.onboard_corporate_customer ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling CustomerAccountCorporateApi.onboard_corporate_customer"
      end
      # verify the required parameter 'corporate_customer_requests_dto' is set
      if @api_client.config.client_side_validation && corporate_customer_requests_dto.nil?
        fail ArgumentError, "Missing the required parameter 'corporate_customer_requests_dto' when calling CustomerAccountCorporateApi.onboard_corporate_customer"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/corporate'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(corporate_customer_requests_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'ProductCorporateCustomerResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"CustomerAccountCorporateApi.onboard_corporate_customer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerAccountCorporateApi#onboard_corporate_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Public Corporate Details using Business ID
    # This API will help you to fetch the publicly available corporate details using business Id.
    # @param business_registration_number [String] This field contains the business registration number of the entity.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param country_code [String] This field contains the 2-letter [ISO-2 country code](doc:currency-and-country-codes).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [CorporateDetailResponseDTO]
    def public_corporate_details_using_business_id(business_registration_number, client_hash_id, country_code, opts = {})
      data, _status_code, _headers = public_corporate_details_using_business_id_with_http_info(business_registration_number, client_hash_id, country_code, opts)
      data
    end

    # Public Corporate Details using Business ID
    # This API will help you to fetch the publicly available corporate details using business Id.
    # @param business_registration_number [String] This field contains the business registration number of the entity.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param country_code [String] This field contains the 2-letter [ISO-2 country code](doc:currency-and-country-codes).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(CorporateDetailResponseDTO, Integer, Hash)>] CorporateDetailResponseDTO data, response status code and response headers
    def public_corporate_details_using_business_id_with_http_info(business_registration_number, client_hash_id, country_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerAccountCorporateApi.public_corporate_details_using_business_id ...'
      end
      # verify the required parameter 'business_registration_number' is set
      if @api_client.config.client_side_validation && business_registration_number.nil?
        fail ArgumentError, "Missing the required parameter 'business_registration_number' when calling CustomerAccountCorporateApi.public_corporate_details_using_business_id"
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling CustomerAccountCorporateApi.public_corporate_details_using_business_id"
      end
      # verify the required parameter 'country_code' is set
      if @api_client.config.client_side_validation && country_code.nil?
        fail ArgumentError, "Missing the required parameter 'country_code' when calling CustomerAccountCorporateApi.public_corporate_details_using_business_id"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/corporate/lookup'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'businessRegistrationNumber'] = business_registration_number
      query_params[:'countryCode'] = country_code

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CorporateDetailResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"CustomerAccountCorporateApi.public_corporate_details_using_business_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerAccountCorporateApi#public_corporate_details_using_business_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Regenerate KYC URL
    # This api will be used to regenerate kyc url
    # @param client_hash_id [String] The unique client hash id of customer
    # @param customer_hash_id [String] The unique customer hash id of customer
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [RegenerateUrlResponse]
    def regenerate_kycurl(client_hash_id, customer_hash_id, opts = {})
      data, _status_code, _headers = regenerate_kycurl_with_http_info(client_hash_id, customer_hash_id, opts)
      data
    end

    # Regenerate KYC URL
    # This api will be used to regenerate kyc url
    # @param client_hash_id [String] The unique client hash id of customer
    # @param customer_hash_id [String] The unique customer hash id of customer
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [Array<(RegenerateUrlResponse, Integer, Hash)>] RegenerateUrlResponse data, response status code and response headers
    def regenerate_kycurl_with_http_info(client_hash_id, customer_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerAccountCorporateApi.regenerate_kycurl ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling CustomerAccountCorporateApi.regenerate_kycurl"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling CustomerAccountCorporateApi.regenerate_kycurl"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/regenerateKYCURL'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegenerateUrlResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"CustomerAccountCorporateApi.regenerate_kycurl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerAccountCorporateApi#regenerate_kycurl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Respond to RFI for Corporate Customer
    # This API allows you to respond to an RFI raised for a corporate customer. You may use this API to respond to an RFI for data or documents when the corporate customer's compliance status is RFI_REQUESTED.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param respond_rfi_request_dto [RespondRfiRequestDTO] respondRfiRequestDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [RespondRfiResponseDTO]
    def respondto_rf_ifor_corporate_customer(client_hash_id, respond_rfi_request_dto, opts = {})
      data, _status_code, _headers = respondto_rf_ifor_corporate_customer_with_http_info(client_hash_id, respond_rfi_request_dto, opts)
      data
    end

    # Respond to RFI for Corporate Customer
    # This API allows you to respond to an RFI raised for a corporate customer. You may use this API to respond to an RFI for data or documents when the corporate customer&#39;s compliance status is RFI_REQUESTED.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param respond_rfi_request_dto [RespondRfiRequestDTO] respondRfiRequestDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(RespondRfiResponseDTO, Integer, Hash)>] RespondRfiResponseDTO data, response status code and response headers
    def respondto_rf_ifor_corporate_customer_with_http_info(client_hash_id, respond_rfi_request_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerAccountCorporateApi.respondto_rf_ifor_corporate_customer ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling CustomerAccountCorporateApi.respondto_rf_ifor_corporate_customer"
      end
      # verify the required parameter 'respond_rfi_request_dto' is set
      if @api_client.config.client_side_validation && respond_rfi_request_dto.nil?
        fail ArgumentError, "Missing the required parameter 'respond_rfi_request_dto' when calling CustomerAccountCorporateApi.respondto_rf_ifor_corporate_customer"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/corporate/rfi'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(respond_rfi_request_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'RespondRfiResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"CustomerAccountCorporateApi.respondto_rf_ifor_corporate_customer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerAccountCorporateApi#respondto_rf_ifor_corporate_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Corporate Customer
    # This API allows you to update a corporate customer under existing client.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param corporate_customer_requests_dto [CorporateCustomerRequestsDTO] updateCorporateCustomerRequestsDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [UpdateCorporateKybResponseDTO]
    def update_corporate_customer_using_post(client_hash_id, customer_hash_id, corporate_customer_requests_dto, opts = {})
      data, _status_code, _headers = update_corporate_customer_using_post_with_http_info(client_hash_id, customer_hash_id, corporate_customer_requests_dto, opts)
      data
    end

    # Update Corporate Customer
    # This API allows you to update a corporate customer under existing client.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param corporate_customer_requests_dto [CorporateCustomerRequestsDTO] updateCorporateCustomerRequestsDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(UpdateCorporateKybResponseDTO, Integer, Hash)>] UpdateCorporateKybResponseDTO data, response status code and response headers
    def update_corporate_customer_using_post_with_http_info(client_hash_id, customer_hash_id, corporate_customer_requests_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerAccountCorporateApi.update_corporate_customer_using_post ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling CustomerAccountCorporateApi.update_corporate_customer_using_post"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling CustomerAccountCorporateApi.update_corporate_customer_using_post"
      end
      # verify the required parameter 'corporate_customer_requests_dto' is set
      if @api_client.config.client_side_validation && corporate_customer_requests_dto.nil?
        fail ArgumentError, "Missing the required parameter 'corporate_customer_requests_dto' when calling CustomerAccountCorporateApi.update_corporate_customer_using_post"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/corporate'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(corporate_customer_requests_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateCorporateKybResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"CustomerAccountCorporateApi.update_corporate_customer_using_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerAccountCorporateApi#update_corporate_customer_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload Document for Corporate Customer
    # This API allows you to upload document for corporate customers.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param corporate_compliance_document_request_dto [CorporateComplianceDocumentRequestDTO] corporateComplianceDocumentRequestDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [CorporateComplianceDocumentResponseDTO]
    def upload_documentfor_corporate_customer(client_hash_id, customer_hash_id, corporate_compliance_document_request_dto, opts = {})
      data, _status_code, _headers = upload_documentfor_corporate_customer_with_http_info(client_hash_id, customer_hash_id, corporate_compliance_document_request_dto, opts)
      data
    end

    # Upload Document for Corporate Customer
    # This API allows you to upload document for corporate customers.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param corporate_compliance_document_request_dto [CorporateComplianceDocumentRequestDTO] corporateComplianceDocumentRequestDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(CorporateComplianceDocumentResponseDTO, Integer, Hash)>] CorporateComplianceDocumentResponseDTO data, response status code and response headers
    def upload_documentfor_corporate_customer_with_http_info(client_hash_id, customer_hash_id, corporate_compliance_document_request_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerAccountCorporateApi.upload_documentfor_corporate_customer ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling CustomerAccountCorporateApi.upload_documentfor_corporate_customer"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling CustomerAccountCorporateApi.upload_documentfor_corporate_customer"
      end
      # verify the required parameter 'corporate_compliance_document_request_dto' is set
      if @api_client.config.client_side_validation && corporate_compliance_document_request_dto.nil?
        fail ArgumentError, "Missing the required parameter 'corporate_compliance_document_request_dto' when calling CustomerAccountCorporateApi.upload_documentfor_corporate_customer"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/corporate/documents'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(corporate_compliance_document_request_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'CorporateComplianceDocumentResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"CustomerAccountCorporateApi.upload_documentfor_corporate_customer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerAccountCorporateApi#upload_documentfor_corporate_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
