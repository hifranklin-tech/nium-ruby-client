=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module NiumClient
  class ControlsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Fetch Card Limits
    # This API allows you to fetch card limits.
    # @param card_hash_id [String] Unique card identifier generated while new/add-on card issuance.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [TransactionLimitsDTO]
    def get_card_limits(card_hash_id, client_hash_id, customer_hash_id, wallet_hash_id, opts = {})
      data, _status_code, _headers = get_card_limits_with_http_info(card_hash_id, client_hash_id, customer_hash_id, wallet_hash_id, opts)
      data
    end

    # Fetch Card Limits
    # This API allows you to fetch card limits.
    # @param card_hash_id [String] Unique card identifier generated while new/add-on card issuance.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(TransactionLimitsDTO, Integer, Hash)>] TransactionLimitsDTO data, response status code and response headers
    def get_card_limits_with_http_info(card_hash_id, client_hash_id, customer_hash_id, wallet_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ControlsApi.get_card_limits ...'
      end
      # verify the required parameter 'card_hash_id' is set
      if @api_client.config.client_side_validation && card_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_hash_id' when calling ControlsApi.get_card_limits"
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling ControlsApi.get_card_limits"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling ControlsApi.get_card_limits"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling ControlsApi.get_card_limits"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/limits'.sub('{' + 'cardHashId' + '}', CGI.escape(card_hash_id.to_s)).sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TransactionLimitsDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"ControlsApi.get_card_limits",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ControlsApi#get_card_limits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Channel Restriction
    # This API will get the restriction set at card level for all the channels, for example, instore, online, ATM, cross border, and magnetic stripe.
    # @param card_hash_id [String] Unique card identifier generated while new/add-on card issuance.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [ApiResponseOfTransactionChannelsResponseDTO]
    def get_channel_restriction(card_hash_id, client_hash_id, customer_hash_id, wallet_hash_id, opts = {})
      data, _status_code, _headers = get_channel_restriction_with_http_info(card_hash_id, client_hash_id, customer_hash_id, wallet_hash_id, opts)
      data
    end

    # Get Channel Restriction
    # This API will get the restriction set at card level for all the channels, for example, instore, online, ATM, cross border, and magnetic stripe.
    # @param card_hash_id [String] Unique card identifier generated while new/add-on card issuance.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(ApiResponseOfTransactionChannelsResponseDTO, Integer, Hash)>] ApiResponseOfTransactionChannelsResponseDTO data, response status code and response headers
    def get_channel_restriction_with_http_info(card_hash_id, client_hash_id, customer_hash_id, wallet_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ControlsApi.get_channel_restriction ...'
      end
      # verify the required parameter 'card_hash_id' is set
      if @api_client.config.client_side_validation && card_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_hash_id' when calling ControlsApi.get_channel_restriction"
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling ControlsApi.get_channel_restriction"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling ControlsApi.get_channel_restriction"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling ControlsApi.get_channel_restriction"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/channels'.sub('{' + 'cardHashId' + '}', CGI.escape(card_hash_id.to_s)).sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiResponseOfTransactionChannelsResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"ControlsApi.get_channel_restriction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ControlsApi#get_channel_restriction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get MCC Channel Restrictions
    # This API allows you to fetch MCC based channel restrictions at the card level.
    # @param card_hash_id [String] Unique card identifier generated while new/add-on card issuance.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [MCCRestrictionDTO]
    def get_mcc_channel_restrictions(card_hash_id, client_hash_id, customer_hash_id, wallet_hash_id, opts = {})
      data, _status_code, _headers = get_mcc_channel_restrictions_with_http_info(card_hash_id, client_hash_id, customer_hash_id, wallet_hash_id, opts)
      data
    end

    # Get MCC Channel Restrictions
    # This API allows you to fetch MCC based channel restrictions at the card level.
    # @param card_hash_id [String] Unique card identifier generated while new/add-on card issuance.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(MCCRestrictionDTO, Integer, Hash)>] MCCRestrictionDTO data, response status code and response headers
    def get_mcc_channel_restrictions_with_http_info(card_hash_id, client_hash_id, customer_hash_id, wallet_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ControlsApi.get_mcc_channel_restrictions ...'
      end
      # verify the required parameter 'card_hash_id' is set
      if @api_client.config.client_side_validation && card_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_hash_id' when calling ControlsApi.get_mcc_channel_restrictions"
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling ControlsApi.get_mcc_channel_restrictions"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling ControlsApi.get_mcc_channel_restrictions"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling ControlsApi.get_mcc_channel_restrictions"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/channels/mcc'.sub('{' + 'cardHashId' + '}', CGI.escape(card_hash_id.to_s)).sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MCCRestrictionDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"ControlsApi.get_mcc_channel_restrictions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ControlsApi#get_mcc_channel_restrictions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Limits For All Cards For A Customer
    # This API allows you to fetch card level limits for all cards belonging to a customer.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [TransactionWalletLimitsDTO]
    def limits_for_all_cards_for_a_customer(client_hash_id, customer_hash_id, wallet_hash_id, opts = {})
      data, _status_code, _headers = limits_for_all_cards_for_a_customer_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, opts)
      data
    end

    # Limits For All Cards For A Customer
    # This API allows you to fetch card level limits for all cards belonging to a customer.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(TransactionWalletLimitsDTO, Integer, Hash)>] TransactionWalletLimitsDTO data, response status code and response headers
    def limits_for_all_cards_for_a_customer_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ControlsApi.limits_for_all_cards_for_a_customer ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling ControlsApi.limits_for_all_cards_for_a_customer"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling ControlsApi.limits_for_all_cards_for_a_customer"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling ControlsApi.limits_for_all_cards_for_a_customer"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/limits'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TransactionWalletLimitsDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"ControlsApi.limits_for_all_cards_for_a_customer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ControlsApi#limits_for_all_cards_for_a_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Card Limits
    # This API allows you to set card limits.
    # @param card_hash_id [String] Unique card identifier generated while new/add-on card issuance.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param transaction_limits_dto [TransactionLimitsDTO] transactionLimitsDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [WalletApiResponse2]
    def set_card_limits(card_hash_id, client_hash_id, customer_hash_id, wallet_hash_id, transaction_limits_dto, opts = {})
      data, _status_code, _headers = set_card_limits_with_http_info(card_hash_id, client_hash_id, customer_hash_id, wallet_hash_id, transaction_limits_dto, opts)
      data
    end

    # Card Limits
    # This API allows you to set card limits.
    # @param card_hash_id [String] Unique card identifier generated while new/add-on card issuance.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param transaction_limits_dto [TransactionLimitsDTO] transactionLimitsDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(WalletApiResponse2, Integer, Hash)>] WalletApiResponse2 data, response status code and response headers
    def set_card_limits_with_http_info(card_hash_id, client_hash_id, customer_hash_id, wallet_hash_id, transaction_limits_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ControlsApi.set_card_limits ...'
      end
      # verify the required parameter 'card_hash_id' is set
      if @api_client.config.client_side_validation && card_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_hash_id' when calling ControlsApi.set_card_limits"
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling ControlsApi.set_card_limits"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling ControlsApi.set_card_limits"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling ControlsApi.set_card_limits"
      end
      # verify the required parameter 'transaction_limits_dto' is set
      if @api_client.config.client_side_validation && transaction_limits_dto.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_limits_dto' when calling ControlsApi.set_card_limits"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/limits'.sub('{' + 'cardHashId' + '}', CGI.escape(card_hash_id.to_s)).sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(transaction_limits_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'WalletApiResponse2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"ControlsApi.set_card_limits",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ControlsApi#set_card_limits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Channel Restriction
    # This API will restrict transaction at card level for a given channel, for example, in instore, online, ATM, cross border and magnetic stripe.
    # @param card_hash_id [String] Unique card identifier generated while new/add-on card issuance.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param channel_action_request_dto [ChannelActionRequestDTO] channelActionRequestDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [WalletApiResponseOfstring]
    def update_channel_restriction(card_hash_id, client_hash_id, customer_hash_id, wallet_hash_id, channel_action_request_dto, opts = {})
      data, _status_code, _headers = update_channel_restriction_with_http_info(card_hash_id, client_hash_id, customer_hash_id, wallet_hash_id, channel_action_request_dto, opts)
      data
    end

    # Update Channel Restriction
    # This API will restrict transaction at card level for a given channel, for example, in instore, online, ATM, cross border and magnetic stripe.
    # @param card_hash_id [String] Unique card identifier generated while new/add-on card issuance.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param channel_action_request_dto [ChannelActionRequestDTO] channelActionRequestDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(WalletApiResponseOfstring, Integer, Hash)>] WalletApiResponseOfstring data, response status code and response headers
    def update_channel_restriction_with_http_info(card_hash_id, client_hash_id, customer_hash_id, wallet_hash_id, channel_action_request_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ControlsApi.update_channel_restriction ...'
      end
      # verify the required parameter 'card_hash_id' is set
      if @api_client.config.client_side_validation && card_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_hash_id' when calling ControlsApi.update_channel_restriction"
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling ControlsApi.update_channel_restriction"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling ControlsApi.update_channel_restriction"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling ControlsApi.update_channel_restriction"
      end
      # verify the required parameter 'channel_action_request_dto' is set
      if @api_client.config.client_side_validation && channel_action_request_dto.nil?
        fail ArgumentError, "Missing the required parameter 'channel_action_request_dto' when calling ControlsApi.update_channel_restriction"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/channels'.sub('{' + 'cardHashId' + '}', CGI.escape(card_hash_id.to_s)).sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(channel_action_request_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'WalletApiResponseOfstring'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"ControlsApi.update_channel_restriction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ControlsApi#update_channel_restriction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update MCC Channel Restrictions
    # This API allows you to create MCC based channel restrictions at the card level.
    # @param card_hash_id [String] Unique card identifier generated while new/add-on card issuance.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param mcc_restriction_dto [MCCRestrictionDTO] The API will work as below: • If the status is Active and channelStrategy is WHITE_LIST, then the MCC in the list only gets processed and the rest will be blocked • If the status is Inactive then the MCC whitelist restriction will be Inactive. • If the status is Active and channelStrategy is BLACK_LIST then only the MCC in the list will get blocked and the rest will be allowed. • If the status is Inactive then the MCC blacklist restriction will be Inactive • Either blacklist or whitelist can be enabled at one point in time.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [WalletApiResponse2]
    def update_mcc_channel_restrictions(card_hash_id, client_hash_id, customer_hash_id, wallet_hash_id, mcc_restriction_dto, opts = {})
      data, _status_code, _headers = update_mcc_channel_restrictions_with_http_info(card_hash_id, client_hash_id, customer_hash_id, wallet_hash_id, mcc_restriction_dto, opts)
      data
    end

    # Update MCC Channel Restrictions
    # This API allows you to create MCC based channel restrictions at the card level.
    # @param card_hash_id [String] Unique card identifier generated while new/add-on card issuance.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param mcc_restriction_dto [MCCRestrictionDTO] The API will work as below: • If the status is Active and channelStrategy is WHITE_LIST, then the MCC in the list only gets processed and the rest will be blocked • If the status is Inactive then the MCC whitelist restriction will be Inactive. • If the status is Active and channelStrategy is BLACK_LIST then only the MCC in the list will get blocked and the rest will be allowed. • If the status is Inactive then the MCC blacklist restriction will be Inactive • Either blacklist or whitelist can be enabled at one point in time.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(WalletApiResponse2, Integer, Hash)>] WalletApiResponse2 data, response status code and response headers
    def update_mcc_channel_restrictions_with_http_info(card_hash_id, client_hash_id, customer_hash_id, wallet_hash_id, mcc_restriction_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ControlsApi.update_mcc_channel_restrictions ...'
      end
      # verify the required parameter 'card_hash_id' is set
      if @api_client.config.client_side_validation && card_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_hash_id' when calling ControlsApi.update_mcc_channel_restrictions"
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling ControlsApi.update_mcc_channel_restrictions"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling ControlsApi.update_mcc_channel_restrictions"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling ControlsApi.update_mcc_channel_restrictions"
      end
      # verify the required parameter 'mcc_restriction_dto' is set
      if @api_client.config.client_side_validation && mcc_restriction_dto.nil?
        fail ArgumentError, "Missing the required parameter 'mcc_restriction_dto' when calling ControlsApi.update_mcc_channel_restrictions"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/channels/mcc'.sub('{' + 'cardHashId' + '}', CGI.escape(card_hash_id.to_s)).sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(mcc_restriction_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'WalletApiResponse2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"ControlsApi.update_mcc_channel_restrictions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ControlsApi#update_mcc_channel_restrictions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
