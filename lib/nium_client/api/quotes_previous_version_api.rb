=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module NiumClient
  class QuotesPreviousVersionApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Exchange Rate Lock and Hold
    # This API allows you to fetch exchange rate, and lock and hold the rates till a certain amount of time.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param destination_currency [String] This field contains the [3-letter ISO-4217 currency code](doc:currency-and-country-codes) for the destination amount.
    # @param source_currency [String] This field contains the [3-letter ISO-4217 currency code](doc:currency-and-country-codes) for the source amount.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :additional_fx_markup This field is used if client wants to apply additional Fxmarkup in the exchange rate for their customer. The value should be in percentage. For example use 0.10 for 0.1% additional markup. (default to 0)
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [FxHoldLockResponseContent]
    def exchange_rate_lockand_hold(client_hash_id, customer_hash_id, destination_currency, source_currency, wallet_hash_id, opts = {})
      data, _status_code, _headers = exchange_rate_lockand_hold_with_http_info(client_hash_id, customer_hash_id, destination_currency, source_currency, wallet_hash_id, opts)
      data
    end

    # Exchange Rate Lock and Hold
    # This API allows you to fetch exchange rate, and lock and hold the rates till a certain amount of time.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param destination_currency [String] This field contains the [3-letter ISO-4217 currency code](doc:currency-and-country-codes) for the destination amount.
    # @param source_currency [String] This field contains the [3-letter ISO-4217 currency code](doc:currency-and-country-codes) for the source amount.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :additional_fx_markup This field is used if client wants to apply additional Fxmarkup in the exchange rate for their customer. The value should be in percentage. For example use 0.10 for 0.1% additional markup. (default to 0)
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(FxHoldLockResponseContent, Integer, Hash)>] FxHoldLockResponseContent data, response status code and response headers
    def exchange_rate_lockand_hold_with_http_info(client_hash_id, customer_hash_id, destination_currency, source_currency, wallet_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuotesPreviousVersionApi.exchange_rate_lockand_hold ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling QuotesPreviousVersionApi.exchange_rate_lockand_hold"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling QuotesPreviousVersionApi.exchange_rate_lockand_hold"
      end
      # verify the required parameter 'destination_currency' is set
      if @api_client.config.client_side_validation && destination_currency.nil?
        fail ArgumentError, "Missing the required parameter 'destination_currency' when calling QuotesPreviousVersionApi.exchange_rate_lockand_hold"
      end
      # verify the required parameter 'source_currency' is set
      if @api_client.config.client_side_validation && source_currency.nil?
        fail ArgumentError, "Missing the required parameter 'source_currency' when calling QuotesPreviousVersionApi.exchange_rate_lockand_hold"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling QuotesPreviousVersionApi.exchange_rate_lockand_hold"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/lockExchangeRate'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'destinationCurrency'] = destination_currency
      query_params[:'sourceCurrency'] = source_currency
      query_params[:'additionalFxMarkup'] = opts[:'additional_fx_markup'] if !opts[:'additional_fx_markup'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FxHoldLockResponseContent'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"QuotesPreviousVersionApi.exchange_rate_lockand_hold",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuotesPreviousVersionApi#exchange_rate_lockand_hold\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Exchange Rate With Markup
    # This API fetches the exchange rate between source currency and destination currency. If either source or destination amount is provided, the equivalent amount will also be returned. Note that you may not send both sourceAmount and destinationAmount as query parameters together. If both are provided, sourceAmount shall be taken for conversion.
    # @param client_hash_id [String] Unique customer identifier generated on customer creation.
    # @param source_currency_code [String] This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the source amount.
    # @param destination_currency_code [String] This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the destination amount.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :source_amount An amount to be converted. This field takes precedence over destinationAmount, in case both are provided.
    # @option opts [Float] :destination_amount An amount to which the source is converted. It can be used to find the necessary source amount value. If both sourceAmount and destinationAmount are provided, this field is ignored.
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [ExchangeRateV2ResponseDto]
    def exchange_rate_with_markup(client_hash_id, source_currency_code, destination_currency_code, opts = {})
      data, _status_code, _headers = exchange_rate_with_markup_with_http_info(client_hash_id, source_currency_code, destination_currency_code, opts)
      data
    end

    # Exchange Rate With Markup
    # This API fetches the exchange rate between source currency and destination currency. If either source or destination amount is provided, the equivalent amount will also be returned. Note that you may not send both sourceAmount and destinationAmount as query parameters together. If both are provided, sourceAmount shall be taken for conversion.
    # @param client_hash_id [String] Unique customer identifier generated on customer creation.
    # @param source_currency_code [String] This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the source amount.
    # @param destination_currency_code [String] This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the destination amount.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :source_amount An amount to be converted. This field takes precedence over destinationAmount, in case both are provided.
    # @option opts [Float] :destination_amount An amount to which the source is converted. It can be used to find the necessary source amount value. If both sourceAmount and destinationAmount are provided, this field is ignored.
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(ExchangeRateV2ResponseDto, Integer, Hash)>] ExchangeRateV2ResponseDto data, response status code and response headers
    def exchange_rate_with_markup_with_http_info(client_hash_id, source_currency_code, destination_currency_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuotesPreviousVersionApi.exchange_rate_with_markup ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling QuotesPreviousVersionApi.exchange_rate_with_markup"
      end
      if @api_client.config.client_side_validation && client_hash_id.to_s.length > 36
        fail ArgumentError, 'invalid value for "client_hash_id" when calling QuotesPreviousVersionApi.exchange_rate_with_markup, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && client_hash_id.to_s.length < 36
        fail ArgumentError, 'invalid value for "client_hash_id" when calling QuotesPreviousVersionApi.exchange_rate_with_markup, the character length must be great than or equal to 36.'
      end

      # verify the required parameter 'source_currency_code' is set
      if @api_client.config.client_side_validation && source_currency_code.nil?
        fail ArgumentError, "Missing the required parameter 'source_currency_code' when calling QuotesPreviousVersionApi.exchange_rate_with_markup"
      end
      if @api_client.config.client_side_validation && source_currency_code.to_s.length > 3
        fail ArgumentError, 'invalid value for "source_currency_code" when calling QuotesPreviousVersionApi.exchange_rate_with_markup, the character length must be smaller than or equal to 3.'
      end

      if @api_client.config.client_side_validation && source_currency_code.to_s.length < 3
        fail ArgumentError, 'invalid value for "source_currency_code" when calling QuotesPreviousVersionApi.exchange_rate_with_markup, the character length must be great than or equal to 3.'
      end

      # verify the required parameter 'destination_currency_code' is set
      if @api_client.config.client_side_validation && destination_currency_code.nil?
        fail ArgumentError, "Missing the required parameter 'destination_currency_code' when calling QuotesPreviousVersionApi.exchange_rate_with_markup"
      end
      if @api_client.config.client_side_validation && destination_currency_code.to_s.length > 3
        fail ArgumentError, 'invalid value for "destination_currency_code" when calling QuotesPreviousVersionApi.exchange_rate_with_markup, the character length must be smaller than or equal to 3.'
      end

      if @api_client.config.client_side_validation && destination_currency_code.to_s.length < 3
        fail ArgumentError, 'invalid value for "destination_currency_code" when calling QuotesPreviousVersionApi.exchange_rate_with_markup, the character length must be great than or equal to 3.'
      end

      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/exchangeRate'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sourceCurrencyCode'] = source_currency_code
      query_params[:'destinationCurrencyCode'] = destination_currency_code
      query_params[:'sourceAmount'] = opts[:'source_amount'] if !opts[:'source_amount'].nil?
      query_params[:'destinationAmount'] = opts[:'destination_amount'] if !opts[:'destination_amount'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExchangeRateV2ResponseDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"QuotesPreviousVersionApi.exchange_rate_with_markup",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuotesPreviousVersionApi#exchange_rate_with_markup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
