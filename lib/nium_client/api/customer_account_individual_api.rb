=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module NiumClient
  class CustomerAccountIndividualApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add Customer
    # This API allows you to register a customer with a wallet in NIUM's cards platform.  >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Unified Add Customer](ref:unifiedaddcustomer) is the latest version of this API.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_data_request_dto [CustomerDataRequestDTO] customerDataRequestDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [CustomerDetailResponseDTO]
    def add_customer(client_hash_id, customer_data_request_dto, opts = {})
      data, _status_code, _headers = add_customer_with_http_info(client_hash_id, customer_data_request_dto, opts)
      data
    end

    # Add Customer
    # This API allows you to register a customer with a wallet in NIUM&#39;s cards platform.  &gt;⚠️ WARNING   &gt;This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Unified Add Customer](ref:unifiedaddcustomer) is the latest version of this API.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_data_request_dto [CustomerDataRequestDTO] customerDataRequestDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(CustomerDetailResponseDTO, Integer, Hash)>] CustomerDetailResponseDTO data, response status code and response headers
    def add_customer_with_http_info(client_hash_id, customer_data_request_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerAccountIndividualApi.add_customer ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling CustomerAccountIndividualApi.add_customer"
      end
      # verify the required parameter 'customer_data_request_dto' is set
      if @api_client.config.client_side_validation && customer_data_request_dto.nil?
        fail ArgumentError, "Missing the required parameter 'customer_data_request_dto' when calling CustomerAccountIndividualApi.add_customer"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(customer_data_request_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerDetailResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"CustomerAccountIndividualApi.add_customer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerAccountIndividualApi#add_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Customer Using MyInfo [SG]
    # This API will create customers using minimal data, the rest of the partial data will be pulled via MyInfo etc. which is locked and cannot be edited and further rest fields can be updated using Customer Update API.  >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Unified Add Customer](ref:unifiedaddcustomer) is the latest version of this API.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_data_external_request_dto [CustomerDataExternalRequestDTO] customerDataExternalRequestDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [CustomerDataExternalResponseDTO]
    def add_customer_using_my_info_sg(client_hash_id, customer_data_external_request_dto, opts = {})
      data, _status_code, _headers = add_customer_using_my_info_sg_with_http_info(client_hash_id, customer_data_external_request_dto, opts)
      data
    end

    # Add Customer Using MyInfo [SG]
    # This API will create customers using minimal data, the rest of the partial data will be pulled via MyInfo etc. which is locked and cannot be edited and further rest fields can be updated using Customer Update API.  &gt;⚠️ WARNING   &gt;This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Unified Add Customer](ref:unifiedaddcustomer) is the latest version of this API.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_data_external_request_dto [CustomerDataExternalRequestDTO] customerDataExternalRequestDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(CustomerDataExternalResponseDTO, Integer, Hash)>] CustomerDataExternalResponseDTO data, response status code and response headers
    def add_customer_using_my_info_sg_with_http_info(client_hash_id, customer_data_external_request_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerAccountIndividualApi.add_customer_using_my_info_sg ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling CustomerAccountIndividualApi.add_customer_using_my_info_sg"
      end
      # verify the required parameter 'customer_data_external_request_dto' is set
      if @api_client.config.client_side_validation && customer_data_external_request_dto.nil?
        fail ArgumentError, "Missing the required parameter 'customer_data_external_request_dto' when calling CustomerAccountIndividualApi.add_customer_using_my_info_sg"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer-min-data'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(customer_data_external_request_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerDataExternalResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"CustomerAccountIndividualApi.add_customer_using_my_info_sg",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerAccountIndividualApi#add_customer_using_my_info_sg\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Customer Using e-Document Verification
    #   >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Unified Add Customer](ref:unifiedaddcustomer) is the latest version of this API.
    # @param client_hash_id [String] clientHashId
    # @param e_verify_customer_registration_request_dto [EVerifyCustomerRegistrationRequestDTO] requestDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [AddCustomerResponseDTO]
    def add_customer_usinge_document_verification(client_hash_id, e_verify_customer_registration_request_dto, opts = {})
      data, _status_code, _headers = add_customer_usinge_document_verification_with_http_info(client_hash_id, e_verify_customer_registration_request_dto, opts)
      data
    end

    # Add Customer Using e-Document Verification
    #   &gt;⚠️ WARNING   &gt;This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Unified Add Customer](ref:unifiedaddcustomer) is the latest version of this API.
    # @param client_hash_id [String] clientHashId
    # @param e_verify_customer_registration_request_dto [EVerifyCustomerRegistrationRequestDTO] requestDTO
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(AddCustomerResponseDTO, Integer, Hash)>] AddCustomerResponseDTO data, response status code and response headers
    def add_customer_usinge_document_verification_with_http_info(client_hash_id, e_verify_customer_registration_request_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerAccountIndividualApi.add_customer_usinge_document_verification ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling CustomerAccountIndividualApi.add_customer_usinge_document_verification"
      end
      # verify the required parameter 'e_verify_customer_registration_request_dto' is set
      if @api_client.config.client_side_validation && e_verify_customer_registration_request_dto.nil?
        fail ArgumentError, "Missing the required parameter 'e_verify_customer_registration_request_dto' when calling CustomerAccountIndividualApi.add_customer_usinge_document_verification"
      end
      # resource path
      local_var_path = '/api/v3/client/{clientHashId}/customer'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(e_verify_customer_registration_request_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'AddCustomerResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"CustomerAccountIndividualApi.add_customer_usinge_document_verification",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerAccountIndividualApi#add_customer_usinge_document_verification\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Customer Update
    # This API allows you to update the customer details subject to the following constraints: 1. If compliance status equals to COMPLETED. You can only update email, mobile, delivery address details, and correspondence address details. You may NOT update the billing address. 2. In other cases, you may update any of the fields. At least one key-value pair is needed in the request body of this API.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @option opts [UpdateCustomerDTO] :update_customer_dto Customer update request
    # @return [UpdateCustomerResponseDTO]
    def customer_update(client_hash_id, customer_hash_id, opts = {})
      data, _status_code, _headers = customer_update_with_http_info(client_hash_id, customer_hash_id, opts)
      data
    end

    # Customer Update
    # This API allows you to update the customer details subject to the following constraints: 1. If compliance status equals to COMPLETED. You can only update email, mobile, delivery address details, and correspondence address details. You may NOT update the billing address. 2. In other cases, you may update any of the fields. At least one key-value pair is needed in the request body of this API.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @option opts [UpdateCustomerDTO] :update_customer_dto Customer update request
    # @return [Array<(UpdateCustomerResponseDTO, Integer, Hash)>] UpdateCustomerResponseDTO data, response status code and response headers
    def customer_update_with_http_info(client_hash_id, customer_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerAccountIndividualApi.customer_update ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling CustomerAccountIndividualApi.customer_update"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling CustomerAccountIndividualApi.customer_update"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/updateCustomer'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_customer_dto'])

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateCustomerResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"CustomerAccountIndividualApi.customer_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerAccountIndividualApi#customer_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch Individual Customer RFI Details
    # This API allows you to fetch details of RFI raised as part of Individual customer onboarding.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<CustomerRfiDetailsResponse>]
    def fetch_individual_customer_rfi_details(client_hash_id, customer_hash_id, opts = {})
      data, _status_code, _headers = fetch_individual_customer_rfi_details_with_http_info(client_hash_id, customer_hash_id, opts)
      data
    end

    # Fetch Individual Customer RFI Details
    # This API allows you to fetch details of RFI raised as part of Individual customer onboarding.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(Array<CustomerRfiDetailsResponse>, Integer, Hash)>] Array<CustomerRfiDetailsResponse> data, response status code and response headers
    def fetch_individual_customer_rfi_details_with_http_info(client_hash_id, customer_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerAccountIndividualApi.fetch_individual_customer_rfi_details ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling CustomerAccountIndividualApi.fetch_individual_customer_rfi_details"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling CustomerAccountIndividualApi.fetch_individual_customer_rfi_details"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/rfi'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CustomerRfiDetailsResponse>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"CustomerAccountIndividualApi.fetch_individual_customer_rfi_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerAccountIndividualApi#fetch_individual_customer_rfi_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Respond to RFI
    # This API allows you to respond to an RFI raised by NIUM compliance team. You may use this API to respond to an RFI for data or documents when the customer's compliance status is RFI_REQUESTED.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param upload_rfi_document_request_dto [UploadRfiDocumentRequestDto] RFI response object
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [UploadRfiDetailsResponseDto]
    def respondto_rfi(client_hash_id, customer_hash_id, upload_rfi_document_request_dto, opts = {})
      data, _status_code, _headers = respondto_rfi_with_http_info(client_hash_id, customer_hash_id, upload_rfi_document_request_dto, opts)
      data
    end

    # Respond to RFI
    # This API allows you to respond to an RFI raised by NIUM compliance team. You may use this API to respond to an RFI for data or documents when the customer&#39;s compliance status is RFI_REQUESTED.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param upload_rfi_document_request_dto [UploadRfiDocumentRequestDto] RFI response object
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(UploadRfiDetailsResponseDto, Integer, Hash)>] UploadRfiDetailsResponseDto data, response status code and response headers
    def respondto_rfi_with_http_info(client_hash_id, customer_hash_id, upload_rfi_document_request_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerAccountIndividualApi.respondto_rfi ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling CustomerAccountIndividualApi.respondto_rfi"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling CustomerAccountIndividualApi.respondto_rfi"
      end
      # verify the required parameter 'upload_rfi_document_request_dto' is set
      if @api_client.config.client_side_validation && upload_rfi_document_request_dto.nil?
        fail ArgumentError, "Missing the required parameter 'upload_rfi_document_request_dto' when calling CustomerAccountIndividualApi.respondto_rfi"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/rfi'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(upload_rfi_document_request_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'UploadRfiDetailsResponseDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"CustomerAccountIndividualApi.respondto_rfi",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerAccountIndividualApi#respondto_rfi\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unified Add Customer
    # This API onboards customers based on their client configuration and preference.   >ℹ️ INFO   The 'childMustHaveParent' setting can be optionally set to 'true' for Payroll and Spend and Management clients, and it should be set to 'false' for all other clients.   For details, see [Parent-child hierarchy](doc:parent-child-hierarchy).
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param request_dto [UnifiedAddCustomerRequest] Add individual customer
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [AddCustomerResponseDTO]
    def unified_add_customer(client_hash_id, request_dto, opts = {})
      data, _status_code, _headers = unified_add_customer_with_http_info(client_hash_id, request_dto, opts)
      data
    end

    # Unified Add Customer
    # This API onboards customers based on their client configuration and preference.   &gt;ℹ️ INFO   The &#39;childMustHaveParent&#39; setting can be optionally set to &#39;true&#39; for Payroll and Spend and Management clients, and it should be set to &#39;false&#39; for all other clients.   For details, see [Parent-child hierarchy](doc:parent-child-hierarchy).
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param request_dto [UnifiedAddCustomerRequest] Add individual customer
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(AddCustomerResponseDTO, Integer, Hash)>] AddCustomerResponseDTO data, response status code and response headers
    def unified_add_customer_with_http_info(client_hash_id, request_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerAccountIndividualApi.unified_add_customer ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling CustomerAccountIndividualApi.unified_add_customer"
      end
      # verify the required parameter 'request_dto' is set
      if @api_client.config.client_side_validation && request_dto.nil?
        fail ArgumentError, "Missing the required parameter 'request_dto' when calling CustomerAccountIndividualApi.unified_add_customer"
      end
      # resource path
      local_var_path = '/api/v4/client/{clientHashId}/customer'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'AddCustomerResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"CustomerAccountIndividualApi.unified_add_customer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerAccountIndividualApi#unified_add_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload Document
    # This API allows to upload documents necessary for customer onboarding. Refer to the RFI details on required documents.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param compliance_document_dto [ComplianceDocumentDTO] Compliance documents
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [ComplianceDocumentResponseDTO]
    def upload_document(client_hash_id, customer_hash_id, compliance_document_dto, opts = {})
      data, _status_code, _headers = upload_document_with_http_info(client_hash_id, customer_hash_id, compliance_document_dto, opts)
      data
    end

    # Upload Document
    # This API allows to upload documents necessary for customer onboarding. Refer to the RFI details on required documents.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param compliance_document_dto [ComplianceDocumentDTO] Compliance documents
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(ComplianceDocumentResponseDTO, Integer, Hash)>] ComplianceDocumentResponseDTO data, response status code and response headers
    def upload_document_with_http_info(client_hash_id, customer_hash_id, compliance_document_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerAccountIndividualApi.upload_document ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling CustomerAccountIndividualApi.upload_document"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling CustomerAccountIndividualApi.upload_document"
      end
      # verify the required parameter 'compliance_document_dto' is set
      if @api_client.config.client_side_validation && compliance_document_dto.nil?
        fail ArgumentError, "Missing the required parameter 'compliance_document_dto' when calling CustomerAccountIndividualApi.upload_document"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/uploadDocuments'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(compliance_document_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'ComplianceDocumentResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"CustomerAccountIndividualApi.upload_document",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerAccountIndividualApi#upload_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
