=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module NiumClient
  class SecurityApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Fetch ATM Pin
    # This API allows you to fetch the base-64 encoded ATM PIN for physical cards and virtual upgrade to physical in the production environment. This API does not work for virtual cards. This is allowed only for the EU and UK cards.
    # @param client_hash_id [String] The unique client identifier generated and shared before the API handshake.
    # @param customer_hash_id [String] The unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] The unique wallet identifier generated simultaneously with customer creation.
    # @param card_hash_id [String] The unique card identifier generated while new/add-on card issuance.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [FetchPinResponseDTO]
    def fetch_atm_pin(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, opts = {})
      data, _status_code, _headers = fetch_atm_pin_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, opts)
      data
    end

    # Fetch ATM Pin
    # This API allows you to fetch the base-64 encoded ATM PIN for physical cards and virtual upgrade to physical in the production environment. This API does not work for virtual cards. This is allowed only for the EU and UK cards.
    # @param client_hash_id [String] The unique client identifier generated and shared before the API handshake.
    # @param customer_hash_id [String] The unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] The unique wallet identifier generated simultaneously with customer creation.
    # @param card_hash_id [String] The unique card identifier generated while new/add-on card issuance.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [Array<(FetchPinResponseDTO, Integer, Hash)>] FetchPinResponseDTO data, response status code and response headers
    def fetch_atm_pin_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.fetch_atm_pin ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling SecurityApi.fetch_atm_pin"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling SecurityApi.fetch_atm_pin"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling SecurityApi.fetch_atm_pin"
      end
      # verify the required parameter 'card_hash_id' is set
      if @api_client.config.client_side_validation && card_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_hash_id' when calling SecurityApi.fetch_atm_pin"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/pin'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s)).sub('{' + 'cardHashId' + '}', CGI.escape(card_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FetchPinResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"SecurityApi.fetch_atm_pin",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#fetch_atm_pin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch card data encrypted
    # This API allows you to fetch the unmasked card number, CVV2 and expiry (encrypted) for a card
    # @param client_hash_id [String] The unique client identifier generated and shared before the API handshake.
    # @param customer_hash_id [String] The unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] The unique wallet identifier generated simultaneously with customer creation.
    # @param card_hash_id [String] The unique card identifier generated while new/add-on card issuance.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [RetrieveCardDetailsResponseDTO]
    def fetch_card_data_encrypted_v2(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, opts = {})
      data, _status_code, _headers = fetch_card_data_encrypted_v2_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, opts)
      data
    end

    # Fetch card data encrypted
    # This API allows you to fetch the unmasked card number, CVV2 and expiry (encrypted) for a card
    # @param client_hash_id [String] The unique client identifier generated and shared before the API handshake.
    # @param customer_hash_id [String] The unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] The unique wallet identifier generated simultaneously with customer creation.
    # @param card_hash_id [String] The unique card identifier generated while new/add-on card issuance.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(RetrieveCardDetailsResponseDTO, Integer, Hash)>] RetrieveCardDetailsResponseDTO data, response status code and response headers
    def fetch_card_data_encrypted_v2_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.fetch_card_data_encrypted_v2 ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling SecurityApi.fetch_card_data_encrypted_v2"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling SecurityApi.fetch_card_data_encrypted_v2"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling SecurityApi.fetch_card_data_encrypted_v2"
      end
      # verify the required parameter 'card_hash_id' is set
      if @api_client.config.client_side_validation && card_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_hash_id' when calling SecurityApi.fetch_card_data_encrypted_v2"
      end
      # resource path
      local_var_path = '/api/v2/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/retrieve'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s)).sub('{' + 'cardHashId' + '}', CGI.escape(card_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RetrieveCardDetailsResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"SecurityApi.fetch_card_data_encrypted_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#fetch_card_data_encrypted_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch CVV2
    # This API allows you to fetch the base-64 encoded CVV2 and expiry for a card.   >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Fetch Card Data Encrypted](ref:fetchcarddataencryptedv2) is the latest version of this API.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param card_hash_id [String] Unique card identifier generated while new/add-on card issuance.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [CvvResponseDTO]
    def fetch_cvv2(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, opts = {})
      data, _status_code, _headers = fetch_cvv2_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, opts)
      data
    end

    # Fetch CVV2
    # This API allows you to fetch the base-64 encoded CVV2 and expiry for a card.   &gt;⚠️ WARNING   &gt;This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Fetch Card Data Encrypted](ref:fetchcarddataencryptedv2) is the latest version of this API.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param card_hash_id [String] Unique card identifier generated while new/add-on card issuance.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(CvvResponseDTO, Integer, Hash)>] CvvResponseDTO data, response status code and response headers
    def fetch_cvv2_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.fetch_cvv2 ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling SecurityApi.fetch_cvv2"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling SecurityApi.fetch_cvv2"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling SecurityApi.fetch_cvv2"
      end
      # verify the required parameter 'card_hash_id' is set
      if @api_client.config.client_side_validation && card_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_hash_id' when calling SecurityApi.fetch_cvv2"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/cvv'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s)).sub('{' + 'cardHashId' + '}', CGI.escape(card_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CvvResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"SecurityApi.fetch_cvv2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#fetch_cvv2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch Pin Status
    # This API allows you to fetch the PIN status of an active card.
    # @param client_hash_id [String] The unique client identifier generated and shared before the API handshake.
    # @param customer_hash_id [String] The unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] The unique wallet identifier generated simultaneously with customer creation.
    # @param card_hash_id [String] The unique card identifier generated while new/add-on card issuance.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [FetchPinStatusResponseDTO]
    def fetch_pin_status(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, opts = {})
      data, _status_code, _headers = fetch_pin_status_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, opts)
      data
    end

    # Fetch Pin Status
    # This API allows you to fetch the PIN status of an active card.
    # @param client_hash_id [String] The unique client identifier generated and shared before the API handshake.
    # @param customer_hash_id [String] The unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] The unique wallet identifier generated simultaneously with customer creation.
    # @param card_hash_id [String] The unique card identifier generated while new/add-on card issuance.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [Array<(FetchPinStatusResponseDTO, Integer, Hash)>] FetchPinStatusResponseDTO data, response status code and response headers
    def fetch_pin_status_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.fetch_pin_status ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling SecurityApi.fetch_pin_status"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling SecurityApi.fetch_pin_status"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling SecurityApi.fetch_pin_status"
      end
      # verify the required parameter 'card_hash_id' is set
      if @api_client.config.client_side_validation && card_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_hash_id' when calling SecurityApi.fetch_pin_status"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/pin/status'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s)).sub('{' + 'cardHashId' + '}', CGI.escape(card_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FetchPinStatusResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"SecurityApi.fetch_pin_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#fetch_pin_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set/Reset PIN
    # This API allows you to set a new PIN or change the PIN for a card in the production environment. This API only applies to a physical card or a virtual card upgraded to a physical card. This is allowed only for cards issued in APAC, not for EU/UK cards.
    # @param client_hash_id [String] The unique client identifier generated and shared before the API handshake.
    # @param customer_hash_id [String] The unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] The unique wallet identifier generated simultaneously with customer creation.
    # @param card_hash_id [String] The unique card identifier generated while new/add-on card issuance.
    # @param pin_update_request_dto [PinUpdateRequestDTO] pinUpdate
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [PinUpdateResponseDTO]
    def set_reset_pin(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, pin_update_request_dto, opts = {})
      data, _status_code, _headers = set_reset_pin_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, pin_update_request_dto, opts)
      data
    end

    # Set/Reset PIN
    # This API allows you to set a new PIN or change the PIN for a card in the production environment. This API only applies to a physical card or a virtual card upgraded to a physical card. This is allowed only for cards issued in APAC, not for EU/UK cards.
    # @param client_hash_id [String] The unique client identifier generated and shared before the API handshake.
    # @param customer_hash_id [String] The unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] The unique wallet identifier generated simultaneously with customer creation.
    # @param card_hash_id [String] The unique card identifier generated while new/add-on card issuance.
    # @param pin_update_request_dto [PinUpdateRequestDTO] pinUpdate
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value.
    # @return [Array<(PinUpdateResponseDTO, Integer, Hash)>] PinUpdateResponseDTO data, response status code and response headers
    def set_reset_pin_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, pin_update_request_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.set_reset_pin ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling SecurityApi.set_reset_pin"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling SecurityApi.set_reset_pin"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling SecurityApi.set_reset_pin"
      end
      # verify the required parameter 'card_hash_id' is set
      if @api_client.config.client_side_validation && card_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_hash_id' when calling SecurityApi.set_reset_pin"
      end
      # verify the required parameter 'pin_update_request_dto' is set
      if @api_client.config.client_side_validation && pin_update_request_dto.nil?
        fail ArgumentError, "Missing the required parameter 'pin_update_request_dto' when calling SecurityApi.set_reset_pin"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/pin'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s)).sub('{' + 'cardHashId' + '}', CGI.escape(card_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pin_update_request_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'PinUpdateResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"SecurityApi.set_reset_pin",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#set_reset_pin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unblock PIN
    # This API allows you to unblock PIN and reset retry count for a card. This API is only applicable for the APAC region.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param card_hash_id [String] Unique card identifier generated while new/add-on card issuance.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Please enter a unique UUID value
    # @return [PinUpdateResponseDTO]
    def unblock_card_pin(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, opts = {})
      data, _status_code, _headers = unblock_card_pin_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, opts)
      data
    end

    # Unblock PIN
    # This API allows you to unblock PIN and reset retry count for a card. This API is only applicable for the APAC region.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param card_hash_id [String] Unique card identifier generated while new/add-on card issuance.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Please enter a unique UUID value
    # @return [Array<(PinUpdateResponseDTO, Integer, Hash)>] PinUpdateResponseDTO data, response status code and response headers
    def unblock_card_pin_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.unblock_card_pin ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling SecurityApi.unblock_card_pin"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling SecurityApi.unblock_card_pin"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling SecurityApi.unblock_card_pin"
      end
      # verify the required parameter 'card_hash_id' is set
      if @api_client.config.client_side_validation && card_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_hash_id' when calling SecurityApi.unblock_card_pin"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/pin/unblock'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s)).sub('{' + 'cardHashId' + '}', CGI.escape(card_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PinUpdateResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"SecurityApi.unblock_card_pin",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#unblock_card_pin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unmask Card
    # This API allows you to unmask a card number before using it for an e-commerce transaction.   >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Fetch Card Data Encrypted](ref:fetchcarddataencryptedv2) is the latest version of this API.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param card_hash_id [String] Unique card identifier generated while new/add-on card issuance.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [UnmaskCardResponseDTO]
    def unmask_card(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, opts = {})
      data, _status_code, _headers = unmask_card_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, opts)
      data
    end

    # Unmask Card
    # This API allows you to unmask a card number before using it for an e-commerce transaction.   &gt;⚠️ WARNING   &gt;This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Fetch Card Data Encrypted](ref:fetchcarddataencryptedv2) is the latest version of this API.
    # @param client_hash_id [String] Unique client identifier generated and shared before API handshake.
    # @param customer_hash_id [String] Unique customer identifier generated on customer creation.
    # @param wallet_hash_id [String] Unique wallet identifier generated simultaneously with customer creation.
    # @param card_hash_id [String] Unique card identifier generated while new/add-on card issuance.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id Enter a unique UUID value
    # @return [Array<(UnmaskCardResponseDTO, Integer, Hash)>] UnmaskCardResponseDTO data, response status code and response headers
    def unmask_card_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, card_hash_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.unmask_card ...'
      end
      # verify the required parameter 'client_hash_id' is set
      if @api_client.config.client_side_validation && client_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hash_id' when calling SecurityApi.unmask_card"
      end
      # verify the required parameter 'customer_hash_id' is set
      if @api_client.config.client_side_validation && customer_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_hash_id' when calling SecurityApi.unmask_card"
      end
      # verify the required parameter 'wallet_hash_id' is set
      if @api_client.config.client_side_validation && wallet_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_hash_id' when calling SecurityApi.unmask_card"
      end
      # verify the required parameter 'card_hash_id' is set
      if @api_client.config.client_side_validation && card_hash_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_hash_id' when calling SecurityApi.unmask_card"
      end
      # resource path
      local_var_path = '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/unmask'.sub('{' + 'clientHashId' + '}', CGI.escape(client_hash_id.to_s)).sub('{' + 'customerHashId' + '}', CGI.escape(customer_hash_id.to_s)).sub('{' + 'walletHashId' + '}', CGI.escape(wallet_hash_id.to_s)).sub('{' + 'cardHashId' + '}', CGI.escape(card_hash_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
      header_params[:'x-request-id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnmaskCardResponseDTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['default']

      new_options = opts.merge(
        :operation => :"SecurityApi.unmask_card",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#unmask_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
