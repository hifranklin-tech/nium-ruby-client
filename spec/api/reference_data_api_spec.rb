=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'spec_helper'
require 'json'

# Unit tests for NiumClient::ReferenceDataApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ReferenceDataApi' do
  before do
    # run before each test
    @api_instance = NiumClient::ReferenceDataApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ReferenceDataApi' do
    it 'should create an instance of ReferenceDataApi' do
      expect(@api_instance).to be_instance_of(NiumClient::ReferenceDataApi)
    end
  end

  # unit tests for fetch_bank_detailsusing_routing_code
  # Fetch Bank Details using Routing Code
  # This API allows you to fetch the bank details against the routing information.
  # @param client_hash_id Unique client identifier generated and shared before API handshake.
  # @param country_code This field accepts the [2-letter ISO-2 country code](doc:currency-and-country-codes) of a beneficiary.
  # @param customer_hash_id This field accepts the unique customer identifier generated on customer creation.
  # @param routing_code_type This field accepts the routing code type 1. The possible values are: SWIFT for all cases where SWIFT is applicable IFSC (relevant for India) ACH CODE (relevant for USA) BSB CODE (relevant for Australia) SORT CODE (relevant for the UK) LOCATION ID (relevant for Nepal) BANK CODE (relevant for few countries including Canada, Hong Kong, Sri Lanka, South Korea, Pakistan, Brazil, and some more) TRANSIT NUMBER (relevant for Canada) BRANCH CODE (relevant for Sri Lanka, Vietnam, Brazil, Uruguay, Kenya and some more) Given that the routing_code_type_1 is a PATH parameter, apply URL encoding. For example, when you want to pass ACH CODE, after URL encoding you will pass it as ACH%20CODE
  # @param routing_code_value This field accepts the routing code value 1. Refer to the [Examples of Routing Codes](/apis/docs/routing-codes#examples-of-routing-codes).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id Enter a unique UUID value
  # @return [Resource]
  describe 'fetch_bank_detailsusing_routing_code test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for fetch_supported_corridors
  # Fetch Supported Corridors
  # This API will allow you to fetch the supported corridors for remittance with details.
  # @param client_hash_id Unique client identifier generated and shared before API handshake.
  # @param customer_hash_id Unique customer identifier generated on customer creation.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id Enter a unique UUID value
  # @return [Resource]
  describe 'fetch_supported_corridors test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for fetch_supported_corridors_v2
  # Fetch Supported Corridors V2
  # This API will allow you to fetch the supported corridors for remittance with details.
  # @param client_hash_id Unique client identifier generated and shared before API handshake.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :beneficiary_account_type This field accepts the beneficiary account type.
  # @option opts [String] :client_type This field accepts type of Client e.g. FI, NonFI, default NonFI.
  # @option opts [String] :customer_type This field accepts the type of customer.
  # @option opts [String] :destination_country This field accepts the [2-letter ISO-2 destination country code](https://docs.nium.com/apis/docs/currency-and-country-codes).
  # @option opts [String] :destination_currency This field accepts the [3-letter ISO-4217 currency code](https://docs.nium.com/apis/docs/currency-and-country-codes) which will be used to filter the user selected currency and get the payout method.
  # @option opts [String] :payout_method This field accepts the different modes of payout.
  # @option opts [String] :routing_code_type This field determines the routing code type for the currency.
  # @option opts [String] :x_request_id Enter a unique UUID value
  # @return [Array<SupportedCorridorsResponseDTO>]
  describe 'fetch_supported_corridors_v2 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for search_routing_code_using_bank_name
  # Search Routing Code Using Bank Name
  # This API will allow you to search the routing code details using bank name.
  # @param client_hash_id Unique client identifier generated and shared before API handshake.
  # @param country_code This field accepts the [2-letter ISO-2 country code](doc:currency-and-country-codes) for which routing code search is initiated.
  # @param routing_code_type This field determines the routing code type for the search.
  # @param search_value This field accepts the partial or full value of the Bank Name on which the search is initiated, for example, it could be DBS.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :bank_code This field can accept the bank code of specified branch and country.
  # @option opts [String] :bank_name This field can accept the bank name associated with country.
  # @option opts [String] :currency_code This field accepts the [3-letter ISO-4217 currency code](doc:currency-and-country-codes) for which routing code search is to be initiated.
  # @option opts [String] :payout_method This field can accept the different modes of payout. This field can accept one of the following values: LOCAL SWIFT WALLET CARD PROXY(upcoming feature) Default value of the parameter is LOCAL.
  # @option opts [String] :x_request_id Enter a unique UUID value
  # @return [Array<PartialSearchBankNameResponseDTO>]
  describe 'search_routing_code_using_bank_name test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for search_routing_code_using_branch_name
  # Search Routing Code Using Branch Name
  # This API will allow you to search the routing code details using branch name.
  # @param client_hash_id Unique client identifier generated and shared before API handshake.
  # @param country_code This field accepts the [2-letter ISO-2 country code](doc:currency-and-country-codes) for which routing code search is initiated.
  # @param routing_code_type This field determines the routing code type for the search.
  # @param search_value This field accepts the partial or full value of the Bank Name on which the search is initiated, for example, it could be DBS.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :bank_code This field can accept the bank code of specified branch and country.
  # @option opts [String] :bank_name This field can accept the bank name associated with country.
  # @option opts [String] :currency_code This field accepts the [3-letter ISO-4217 currency code](doc:currency-and-country-codes) for which routing code search is to be initiated.
  # @option opts [String] :payout_method This field can accept the different modes of payout. This field can accept one of the following values: LOCAL SWIFT WALLET CARD PROXY(upcoming feature) Default value of the parameter is LOCAL.
  # @option opts [String] :x_request_id Enter a unique UUID value
  # @return [Array<PartialSearchBranchNameResponseDTO>]
  describe 'search_routing_code_using_branch_name test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for search_routing_codeusingbanknamebranchname
  # Search Routing Code (using bank name/branch name)
  # This API will allow you to search the routing code details of a bank based on certain parameters - i.e., by using bank name or branch name. This API will help you to build a user experience where you can help your users to locate a specific routing code (that could be SWIFT, IFSC, SORT CODE, ACH CODE, etc., - see the list below) by using full or partial name search of bank name or branch name. For example, if your user is looking for SWIFT CODE for HSBC in the UK, then this API can be used to search for the SORT CODE by searching using the bank name.
  # @param client_hash_id Unique client identifier generated and shared before API handshake.
  # @param customer_hash_id Unique customer identifier generated on customer creation.
  # @param partial_search_dto partialSearchDTO
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id Enter a unique UUID value
  # @return [Resource]
  describe 'search_routing_codeusingbanknamebranchname test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
