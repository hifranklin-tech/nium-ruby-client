=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'spec_helper'
require 'json'

# Unit tests for NiumClient::QuotesPreviousVersionApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'QuotesPreviousVersionApi' do
  before do
    # run before each test
    @api_instance = NiumClient::QuotesPreviousVersionApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of QuotesPreviousVersionApi' do
    it 'should create an instance of QuotesPreviousVersionApi' do
      expect(@api_instance).to be_instance_of(NiumClient::QuotesPreviousVersionApi)
    end
  end

  # unit tests for exchange_rate_lockand_hold
  # Exchange Rate Lock and Hold
  # This API allows you to fetch exchange rate, and lock and hold the rates till a certain amount of time.
  # @param client_hash_id Unique client identifier generated and shared before API handshake.
  # @param customer_hash_id Unique customer identifier generated on customer creation.
  # @param destination_currency This field contains the [3-letter ISO-4217 currency code](doc:currency-and-country-codes) for the destination amount.
  # @param source_currency This field contains the [3-letter ISO-4217 currency code](doc:currency-and-country-codes) for the source amount.
  # @param wallet_hash_id Unique wallet identifier generated simultaneously with customer creation.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :additional_fx_markup This field is used if client wants to apply additional Fxmarkup in the exchange rate for their customer. The value should be in percentage. For example use 0.10 for 0.1% additional markup.
  # @option opts [String] :x_request_id Enter a unique UUID value
  # @return [FxHoldLockResponseContent]
  describe 'exchange_rate_lockand_hold test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for exchange_rate_with_markup
  # Exchange Rate With Markup
  # This API fetches the exchange rate between source currency and destination currency. If either source or destination amount is provided, the equivalent amount will also be returned. Note that you may not send both sourceAmount and destinationAmount as query parameters together. If both are provided, sourceAmount shall be taken for conversion.
  # @param client_hash_id Unique customer identifier generated on customer creation.
  # @param source_currency_code This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the source amount.
  # @param destination_currency_code This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the destination amount.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :source_amount An amount to be converted. This field takes precedence over destinationAmount, in case both are provided.
  # @option opts [Float] :destination_amount An amount to which the source is converted. It can be used to find the necessary source amount value. If both sourceAmount and destinationAmount are provided, this field is ignored.
  # @option opts [String] :x_request_id Enter a unique UUID value
  # @return [ExchangeRateV2ResponseDto]
  describe 'exchange_rate_with_markup test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
