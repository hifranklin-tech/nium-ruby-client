=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'spec_helper'
require 'json'

# Unit tests for NiumClient::CustomerWalletTransactionsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'CustomerWalletTransactionsApi' do
  before do
    # run before each test
    @api_instance = NiumClient::CustomerWalletTransactionsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of CustomerWalletTransactionsApi' do
    it 'should create an instance of CustomerWalletTransactionsApi' do
      expect(@api_instance).to be_instance_of(NiumClient::CustomerWalletTransactionsApi)
    end
  end

  # unit tests for download_transaction_receipt
  # Download Transaction Receipt
  # This API allows you to download a receipt against each transaction.
  # @param client_hash_id Unique client identifier generated and shared before API handshake.
  # @param customer_hash_id Unique customer identifier generated on customer creation.
  # @param transaction_id Transaction Id is NIUM generated 36 character UUID which is unique, per transaction.
  # @param wallet_hash_id Unique wallet identifier generated simultaneously with customer creation.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id Enter a unique UUID value
  # @return [TransactionsReceiptDTO]
  describe 'download_transaction_receipt test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for manage_transaction_tags
  # Manage Transaction Tags
  # This API allows you to add, update, and delete transaction tags.
  # @param client_hash_id Unique client identifier generated and shared before API handshake.
  # @param customer_hash_id Unique customer identifier generated on customer creation.
  # @param transaction_id Unique transaction Identifier generated and shared before API handshake.
  # @param wallet_hash_id Unique wallet identifier generated simultaneously with customer creation.
  # @param transaction_client_tags_request_dto tags
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id Enter a unique UUID value
  # @return [TransactionClientTagsResponseDTO]
  describe 'manage_transaction_tags test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for transaction_geo_tagging
  # Transaction Geo-Tagging
  # This API allows you to update a transaction with merchant location.
  # @param client_hash_id Unique client identifier generated and shared before API handshake.
  # @param customer_hash_id Unique customer identifier generated on customer creation.
  # @param transaction_id Transaction Id is NIUM generated 36 character UUID which is unique, per transaction.
  # @param wallet_hash_id Unique wallet identifier generated simultaneously with customer creation.
  # @param transactions_location_dto transactionsLocationDTO
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id Enter a unique UUID value
  # @return [WalletApiError]
  describe 'transaction_geo_tagging test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for transactions
  # Transactions
  # This API allows you to fetch transaction details for a customer.
  # @param client_hash_id Unique client identifier generated and shared before API handshake.
  # @param customer_hash_id Unique customer identifier generated on customer creation.
  # @param wallet_hash_id Unique wallet identifier generated simultaneously with customer creation.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :auth_code This parameter can be used to filter the transactions based on the authorization code. In case of fund wallet transactions you can provide the systemReferenceNumber as value.
  # @option opts [String] :auth_currency This parameter can filter the transactions based on auth currency and accepts 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes).
  # @option opts [String] :business_transaction This parameter can filter the transactions based on businessTransaction flag.
  # @option opts [String] :card_hash_id This field can apply the filter based on the unique card identifier generated during new/add-on card issuance.
  # @option opts [String] :child_customer_hash_id This field contains the unique child customer identifier generated when new child customer created.
  # @option opts [String] :end_date End date for fetching the transaction details. The format for endDate is YYYY-MM-DD.
  # @option opts [String] :mcc This parameter can filter the transactions based on 4-digit Merchant Category Codes.
  # @option opts [String] :merchant_categories This parameter describes the merchant&#39;s type of business product or service, also known as the Merchant Category Code (MCC) such as Airlines, Restaurants etc.
  # @option opts [String] :merchant_city This parameter can filter the transactions based on the merchant city field.
  # @option opts [String] :merchant_countries This parameter can filter the transactions based on comma-separated list of 2-letter ISO merchant countries.
  # @option opts [String] :merchant_country This parameter can filter the transactions based on the merchant country field.
  # @option opts [String] :merchant_name This parameter can filter the transactions based on the merchant name field.
  # @option opts [String] :order The sort order for the results.
  # @option opts [Integer] :page This API may have lot of data in response and supports pagination. Entire response data is divided into pages with size as the upper limit on the number of data. Integer values from 0 onwards are acceptable. Default page is 0.
  # @option opts [String] :payment_instrument_hash_id This parameter can filter the transactions based on comma-separated paymentInstrumentHashId.
  # @option opts [String] :property The field indicates the response parameter used to sort paginated data, with &#39;createdAt&#39; as the default parameter.
  # @option opts [String] :settlement_date This parameter can filter the transactions based on the settlement date of the transaction in format yyyyMMdd.
  # @option opts [String] :settlement_status This parameter can filter the transactions based on settlement status. The detailed list of possible values is available in the response of this API.
  # @option opts [Integer] :size This will decide the number of elements per page. Typical values can be 1-20.
  # @option opts [String] :start_date From date for fetching the transaction details. The format for startDate is YYYY-MM-DD.
  # @option opts [String] :status This parameter can filter the transactions based on status. The detailed list of possible values is available in the response of this API.
  # @option opts [String] :system_reference_number This parameter can be used to filter the transactions based on the systemReferenceNumber.
  # @option opts [String] :system_trace_audit_number This parameter can filter the transactions based on systemTraceAuditNumber.
  # @option opts [String] :tag_key This parameter can filter the transactions, based on the exact value of tagKey defined against transactions. This can be used as an independent search parameter.
  # @option opts [String] :tag_value This parameter can filter the transactions, based on the approximating value of tagValue(that may be mapped for a tagKey defined against transactions). This can be used as an independent search parameter.
  # @option opts [String] :transaction_currency This field contains the 3-letter [ISO-4217 transaction currency code](https://www.iso.org/iso-4217-currency-codes.html).
  # @option opts [String] :transaction_type This field contains the transaction can be one of the complete list of transactions mentioned in [Glossary of Transaction Types](https://docs.nium.com/baas/get-transactions#glossary-of-transaction-types).
  # @option opts [String] :transactions_labels_key This parameter can filter the transactions based on transactionsLabelsKey.
  # @option opts [String] :transactions_labels_value This parameter can filter the transactions based on transactionsLabelsValue.
  # @option opts [String] :x_request_id Enter a unique UUID value
  # @return [WalletTransactionsResponseDTO]
  describe 'transactions test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_business_transaction_flag
  # Update Business Transaction Flag
  # This API allows you to update a flag against each transaction signifying that the transaction is a business transaction.
  # @param client_hash_id Unique client identifier generated and shared before API handshake.
  # @param customer_hash_id Unique customer identifier generated on customer creation.
  # @param transaction_id Transaction Id is NIUM generated 36 character UUID which is unique, per transaction.
  # @param wallet_hash_id Unique wallet identifier generated simultaneously with customer creation.
  # @param transactions_business_dto transactionsBusinessDTO
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id Enter a unique UUID value
  # @return [WalletApiError]
  describe 'update_business_transaction_flag test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for upload_transaction_receipt
  # Upload Transaction Receipt
  # This API allows you to upload a receipt against each transaction.
  # @param client_hash_id Unique client identifier generated and shared before API handshake.
  # @param customer_hash_id Unique customer identifier generated on customer creation.
  # @param transaction_id Transaction Id is NIUM generated 36 character UUID which is unique, per transaction.
  # @param wallet_hash_id Unique wallet identifier generated simultaneously with customer creation.
  # @param transactions_receipt_dto transactionReceipt
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id Enter a unique UUID value
  # @return [WalletApiError]
  describe 'upload_transaction_receipt test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
