=begin
#NIUM Platform

#NIUM Platform

The version of the OpenAPI document: 2023.12.12
Contact: experience@nium.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'spec_helper'
require 'json'

# Unit tests for NiumClient::ControlsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ControlsApi' do
  before do
    # run before each test
    @api_instance = NiumClient::ControlsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ControlsApi' do
    it 'should create an instance of ControlsApi' do
      expect(@api_instance).to be_instance_of(NiumClient::ControlsApi)
    end
  end

  # unit tests for get_card_limits
  # Fetch Card Limits
  # This API allows you to fetch card limits.
  # @param card_hash_id Unique card identifier generated while new/add-on card issuance.
  # @param client_hash_id Unique client identifier generated and shared before API handshake.
  # @param customer_hash_id Unique customer identifier generated on customer creation.
  # @param wallet_hash_id Unique wallet identifier generated simultaneously with customer creation.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id Enter a unique UUID value
  # @return [TransactionLimitsDTO]
  describe 'get_card_limits test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_channel_restriction
  # Get Channel Restriction
  # This API will get the restriction set at card level for all the channels, for example, instore, online, ATM, cross border, and magnetic stripe.
  # @param card_hash_id Unique card identifier generated while new/add-on card issuance.
  # @param client_hash_id Unique client identifier generated and shared before API handshake.
  # @param customer_hash_id Unique customer identifier generated on customer creation.
  # @param wallet_hash_id Unique wallet identifier generated simultaneously with customer creation.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id Enter a unique UUID value
  # @return [ApiResponseOfTransactionChannelsResponseDTO]
  describe 'get_channel_restriction test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_mcc_channel_restrictions
  # Get MCC Channel Restrictions
  # This API allows you to fetch MCC based channel restrictions at the card level.
  # @param card_hash_id Unique card identifier generated while new/add-on card issuance.
  # @param client_hash_id Unique client identifier generated and shared before API handshake.
  # @param customer_hash_id Unique customer identifier generated on customer creation.
  # @param wallet_hash_id Unique wallet identifier generated simultaneously with customer creation.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id Enter a unique UUID value
  # @return [MCCRestrictionDTO]
  describe 'get_mcc_channel_restrictions test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for limits_for_all_cards_for_a_customer
  # Limits For All Cards For A Customer
  # This API allows you to fetch card level limits for all cards belonging to a customer.
  # @param client_hash_id Unique client identifier generated and shared before API handshake.
  # @param customer_hash_id Unique customer identifier generated on customer creation.
  # @param wallet_hash_id Unique wallet identifier generated simultaneously with customer creation.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id Enter a unique UUID value
  # @return [TransactionWalletLimitsDTO]
  describe 'limits_for_all_cards_for_a_customer test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for set_card_limits
  # Card Limits
  # This API allows you to set card limits.
  # @param card_hash_id Unique card identifier generated while new/add-on card issuance.
  # @param client_hash_id Unique client identifier generated and shared before API handshake.
  # @param customer_hash_id Unique customer identifier generated on customer creation.
  # @param wallet_hash_id Unique wallet identifier generated simultaneously with customer creation.
  # @param transaction_limits_dto transactionLimitsDTO
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id Enter a unique UUID value
  # @return [WalletApiResponse2]
  describe 'set_card_limits test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_channel_restriction
  # Update Channel Restriction
  # This API will restrict transaction at card level for a given channel, for example, in instore, online, ATM, cross border and magnetic stripe.
  # @param card_hash_id Unique card identifier generated while new/add-on card issuance.
  # @param client_hash_id Unique client identifier generated and shared before API handshake.
  # @param customer_hash_id Unique customer identifier generated on customer creation.
  # @param wallet_hash_id Unique wallet identifier generated simultaneously with customer creation.
  # @param channel_action_request_dto channelActionRequestDTO
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id Enter a unique UUID value
  # @return [WalletApiResponseOfstring]
  describe 'update_channel_restriction test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_mcc_channel_restrictions
  # Update MCC Channel Restrictions
  # This API allows you to create MCC based channel restrictions at the card level.
  # @param card_hash_id Unique card identifier generated while new/add-on card issuance.
  # @param client_hash_id Unique client identifier generated and shared before API handshake.
  # @param customer_hash_id Unique customer identifier generated on customer creation.
  # @param wallet_hash_id Unique wallet identifier generated simultaneously with customer creation.
  # @param mcc_restriction_dto The API will work as below: • If the status is Active and channelStrategy is WHITE_LIST, then the MCC in the list only gets processed and the rest will be blocked • If the status is Inactive then the MCC whitelist restriction will be Inactive. • If the status is Active and channelStrategy is BLACK_LIST then only the MCC in the list will get blocked and the rest will be allowed. • If the status is Inactive then the MCC blacklist restriction will be Inactive • Either blacklist or whitelist can be enabled at one point in time.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id Enter a unique UUID value
  # @return [WalletApiResponse2]
  describe 'update_mcc_channel_restrictions test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
